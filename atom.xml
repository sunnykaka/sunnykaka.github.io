<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[skaka的博客]]></title>
  <link href="http://skaka.me/atom.xml" rel="self"/>
  <link href="http://skaka.me/"/>
  <updated>2015-09-15T23:03:02+08:00</updated>
  <id>http://skaka.me/</id>
  <author>
    <name><![CDATA[skaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[给Java开发者的Play Framework(2.4)介绍 Part3：搭建Play的开发环境]]></title>
    <link href="http://skaka.me/blog/2015/09/13/play3/"/>
    <updated>2015-09-13T10:22:10+08:00</updated>
    <id>http://skaka.me/blog/2015/09/13/play3</id>
    <content type="html"><![CDATA[<h3>1. 开始前的准备</h3>

<p>这篇文章会介绍Play项目开发环境的搭建，以及日常开发的常用命令。进行之前，首先得准备下面的工具：</p>

<p>1.JDK8+<br/>
2.<a href="http://www.scala-lang.org/">Scala 2.11.6+</a><br/>
3.<a href="http://www.scala-sbt.org/">sbt 0.13.7+</a><br/>
4.<a href="https://www.jetbrains.com/idea/">IntelliJ IDEA 14+</a><br/>
5.<a href="http://www.mysql.com/">MySQL 5.5+</a> 或 <a href="https://mariadb.org/">MariaDB 10+</a>
6.<a href="http://redis.io/">Redis 2.7+</a>
7.科学上网工具</p>

<p>这些软件安装都可以参照官方的文档，这里就不介绍了。</p>

<p>推荐使用的IDE是IntelliJ IDEA，如果对Eclipse有执念的也可以考虑用Typesafe维护的<a href="http://scala-ide.org/">ScalaIDE</a>。<br/>
但是在目前看来，IDEA对Scala的支持最好，另外IDEA相比Eclipse也有很多优点，没有尝试过的朋友可以试一下，保证你不会想切回Eclipse了：）</p>

<p>MySQL和Redis是这篇文章的demo项目启动需要的，如果不打算运行项目可以忽略。</p>

<p>另外科学上网工具也是需要的, demo项目的一些包需要连接Google Code仓库获取，而且没有科学上网的话下载速度会奇慢无比，相信我，你没有那么多时间用来浪费的。</p>

<h3>2. 搭建开发环境</h3>

<p>我的操作系统是Ubuntu 14.04，所以下面涉及到命令或文件路径地方，可能都是Linux风格的。如果你的操作系统是Windows或OS X，需要做相应替换。</p>

<h4>1. 安装IDEA插件</h4>

<p>打开IDEA之后的第一件事就是要安装Scala插件，这个插件包含了对Scala, sbt, Play的支持。
插件安装方法是点击左上角的Files->Settings->在弹出框的左上角输入plugins->点击弹出框底部靠中间位置的Install Jetbrains Plugins->输入Scala->点击Install。
然后等待下载结束重启即可。注意如果没有翻墙的话下载速度会很慢。</p>

<h4>2. 从Github签出Demo项目</h4>

<p>之前我在Github上创建了一个使用了Play，Spring，JPA的<a href="https://github.com/sunnykaka/awesome-play">脚手架项目</a>，这个项目数据存储使用MySQL和Redis，
使用Bootstrap作为页面框架。我们之后的操作都以这个项目为基础。现在先从Github把项目拿下来，直接使用IDEA的Checkout From Github即可，等待下载完成。下载完成之后，
如果之前的Scala插件安装成功，应该会出现下面这个界面：
<img src="http://skaka.me/images/custom/20150914/play3_1.png">
这里选中sbt，然后点击next，选择合适的路径和JDK8，点击完成即可。之后就是等待IDEA导入项目并且下载依赖就行了。再次提示，需要准备梯子。</p>

<h4>3. 项目结构</h4>

<p><img src="http://skaka.me/images/custom/20150914/play3_2.png"></p>

<ul>
<li>admin：web模块，这个模块是一个标准的Play项目</li>
<li>common：公共模块，存放一些工具类，公用的实体类和服务类</li>
<li>order-center：领域模块，订单中心。系统可以按照限界上下文拆分出来多个领域模块</li>
</ul>


<p>这里演示了sbt多模块项目的使用。我们在划分模块的时候，按照DDD的思想，每一个确定的限界上下文划分为一个领域模块，领域层和服务层的代码都放在领域模块中。
领域模块之间会有依赖关系，而具体的应用会依赖这些领域模块。比如admin是一个Play应用，用来实现管理界面，会依赖order-center这个领域模块。以后如果需要构建其他应用，
比如需要对外提供API服务，只需要再增加一个web模块并且引用需要的领域模块就可以了。这种架构在一定程度上可以减少大泥球带来的维护困难，因此比较适合没有复杂到需要划分
微服务的项目采用。</p>

<ul>
<li>project：sbt构建目录</li>
</ul>


<p>sbt在构建项目的时候会依赖这个目录下面的文件。现在不需要做太多了解，只需要知道这个目录的作用类似于maven的pom.xml即可。</p>

<ul>
<li>admin/app：存放源代码，这个项目中app目录下主要存放Controller代码</li>
<li>admin/conf：存放项目配置文件</li>
<li>admin/public：存放静态资源，比如js和css，图片</li>
<li>admin/test：存放测试代码</li>
</ul>


<p>admin项目结构是一个标准是Play项目结构，因为我们把领域层和服务层的代码都放在了领域模块，所以这个模块中基本上只有展现层的代码，即Controller。</p>

<h4>4. 修改配置与初始化数据库</h4>

<p>这个项目用到了MySQL数据库，所以我们需要初始化数据库，数据库初始化文件位置是docs/test-object.sql。进入MySQL终端（或者你喜欢的MySQL客户端工具），输入下面命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drop database play;
</span><span class='line'>create database play;
</span><span class='line'>source /path/to/docs/test-object.sql -- 换成你自己的路径</span></code></pre></td></tr></table></div></figure>


<p>接下来需要修改项目配置，将MySQL连接信息替换成你自己的。打开admin/conf/application.conf，替换下面的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.default {
</span><span class='line'>  driver = com.mysql.jdbc.Driver
</span><span class='line'>  url = "jdbc:mysql://localhost:3306/play?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull"
</span><span class='line'>  username = root
</span><span class='line'>  password = "root"
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>redis {
</span><span class='line'>  host = 127.0.0.1
</span><span class='line'>  port = 6379
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h4>5. 项目启动</h4>

<p>好了，废话了这么多，现在我们要来启动我们的第一个Play应用了！<br/>
打开命令行，你可以使用操作系统默认的命令行工具或者IDEA的terminal，更好的选择是Ubuntu的Guake或OS X的iTerm2。首先切换到当前项目所在目录，然后输入下面的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sbt
</span><span class='line'>project admin
</span><span class='line'>run</span></code></pre></td></tr></table></div></figure>


<p>如果一切顺利，你在命令行将看到下面的结果：
<img src="http://skaka.me/images/custom/20150914/play3_3.png"></p>

<p>解释每个命令：<br/>
<strong>sbt</strong>：在项目目录下使用这个命令，sbt会读取项目的配置（主要是项目下的project文件夹和build.sbt文件），然后进入sbt交互模式，之后的命令都是在sbt交互模式下输入的。<br/>
<strong>project admin</strong>：切换到admin子项目。这是一个多模块项目，在sbt中，使用"project 模块名"来切换到对应的模块。<br/>
<strong>run</strong>：Play项目启动有两种模式，开发模式启动(run)和生产模式启动(start)。启动的时候可以指定端口，比如run 9001，默认端口为9000。</p>

<p>现在我们可以打开浏览器访问了。访问<a href="http://localhost:9000/">http://localhost:9000/</a>，看到下面的界面就代表启动成功了。
<img src="http://skaka.me/images/custom/20150914/play3_4.png"></p>

<p>如果访问不了，请查看之前的步骤是否都正确完成。这里要注意，第一次访问页面的时候会很慢，这时你观察命令行可能会看见代码正在进行编译，或者正在打出大量的log。
出现这种情况是因为如果通过run启动（开发模式），启动的时候并不会真正启动应用，而只是监听端口，当发现有第一个请求过来的时候，才会编译业务代码，开始处理流程。</p>

<p>如果你坚持做到这里，恭喜你，你已经准备好了开发环境。接下来我会介绍一些开发和运维过程中会经常使用的命令。</p>

<h4>6. 对项目进行Debug</h4>

<p>如果你之前一直都使用IDE启动项目，你可能会觉得奇怪，为什么要在命令行用sbt启动项目。这是因为IDEA的Scala插件还不能支持多模块项目的Play应用启动，而且通过命令行的方式
也让我们能够对项目的启动有更多控制，比如Debug。因为我们是在命令行通过sbt启动的项目，所以需要用到Java的远程调试功能，即JDWP。我们会在IDEA中启动调试器，
连接被调试的sbt进程。我们首先需要为sbt设置启动参数，如果你的机器是Linux或OS X，可以在~/.bashrc中加入下面的环境变量（Windows可以右键我的电脑添加环境变量）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export SBT_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999"</span></code></pre></td></tr></table></div></figure>


<p>这样sbt每次启动的时候都会监听调试端口9999。这里要注意，加了这个配置后，你不能同时启动多个sbt进程，因为端口会发生冲突。如果需要同时启动多个sbt进程，
就不能加到环境变量里，而是在每次启动的时候指定SBT_OPTS参数。</p>

<p>修改~/.bashrc之后，打开一个新的命令行，启动sbt，你会发现sbt在启动之后会输出一行
<img src="http://skaka.me/images/custom/20150914/play3_5.png"></p>

<p>这样就代表配置成功了。</p>

<p>然后就是在IDEA中启动远程调试，这和远程调试其他Java应用并无不同。在IDEA中点击菜单中的Run->Edit Configurations，在弹出框中点击左上角的“+”号，选择Remote，
在port中输入9999，输入一个你喜欢的名字，点击OK就行了。然后如下图，点击Debug按钮启动就可以了。
<img src="http://skaka.me/images/custom/20150914/play3_6.png"></p>

<p>现在应用可以正确的在断点处停下来。</p>

<h4>7. 部署应用</h4>

<p>现在，我们要谈谈项目部署。以往的Java Web项目在部署的时候一般是需要将打好的war包放入指定目录，然后让应用服务器例如Tomcat在启动的时候加载，比较好的方式是内嵌的应用服务器，
例如Jetty等，不过还是少不了一大堆配置。现在会简单很多。之前在sbt下，我们使用过run命令来启动应用，现在可以用dist命令来打包应用。进入项目所在目录，用下面的命令完成打包：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sbt ";clean ;project admin ;test ;dist"</span></code></pre></td></tr></table></div></figure>


<p>这里是多条命令放在一起执行，注意其中的test会执行该模块测试目录下所有的测试代码，如果不想在打包前运行测试可以把";test"去掉。
打包成功之后的目标文件路径是admin/target/universal/admin-1.0.0-SNAPSHOT.zip，直接将这个zip包拷贝到部署服务器就可以了。假设这个压缩包解压之后的路径是%PATH%，
那么运行%PATH%/bin/admin就能够在生产模式下启动应用了。部署服务器只需要准备JDK环境。</p>

<p>在启动脚本的时候可以指定一些额外参数，例如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/home/admin/shop/bin/shop -J-server -J-Xms2048M -J-Xmx2048M -Dhttp.port=9001 -Dconfig.file=conf/env/test.conf -Dlogger.file=conf/env/test_logger.xml</span></code></pre></td></tr></table></div></figure>


<p>通过-Dconfig.file和-Dlogger.file可以让你在生产环境和测试环境指定不同的配置文件，这会非常有用。</p>

<h4>8. 总结</h4>

<p>这篇文章我介绍了从零开始搭建一个Play开发环境的过程，大家可以看见使用Play框架的一些优点：配置少，开发调试步骤简单，运维友好。但是也引入了一些复杂性：sbt构建工具，
Scala环境。好在只要项目架构搭建好，这些复杂性可以隐藏起来。但是我相信对一个有追求的程序员来说，永远有对新技术和新知识的渴望。下面的链接可供参考：<br/>
<a href="http://www.ybrikman.com/writing/2014/03/10/the-ultimate-guide-to-getting-started/">The Ultimate Guide to Getting Started with the Play Framework</a><br/>
<a href="http://zh.scala-tour.com/">Scala指南</a><br/>
<a href="http://www.infoq.com/cn/articles/scala-technology">快速了解Scala技术栈</a><br/>
<a href="https://github.com/CSUG/real_world_scala/blob/master/02_sbt.markdown">使用SBT构建Scala应用</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Java开发者的Play Framework(2.4)介绍 Part2：使用Play，Spring，JPA进行开发]]></title>
    <link href="http://skaka.me/blog/2015/08/17/play2/"/>
    <updated>2015-08-17T20:19:50+08:00</updated>
    <id>http://skaka.me/blog/2015/08/17/play2</id>
    <content type="html"><![CDATA[<h3>1. 介绍</h3>

<p>这篇文章会使用Play，Spring，JPA（hibernate）开发一个简单的CRUD功能，主要是为了介绍如何使用Play进行开发。</p>

<h3>2. 界面截图</h3>

<p><img src="http://skaka.me/images/custom/20150818/play2_1.png">
<img src="http://skaka.me/images/custom/20150818/play2_2.png">
很简单的新增和查询功能。我们来看看代码如何实现。</p>

<h3>3. 代码实现</h3>

<h4>1. Model</h4>

<p>代码架构使用典型的MVC，分层为Controller-Service-Dao-Model。首先来看Model。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//省略了部分字段</span>
</span><span class='line'><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;test_object&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestObject</span> <span class="kd">implements</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;,</span> <span class="n">OperableData</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">orderNo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 状态</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">TestObjectStatus</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 下单时间</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DateTime</span> <span class="n">buyTime</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObjectItem</span><span class="o">&gt;</span> <span class="n">testObjectItemList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="n">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">mappedBy</span> <span class="o">=</span> <span class="s">&quot;testObject&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObjectItem</span><span class="o">&gt;</span> <span class="nf">getTestObjectItemList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">testObjectItemList</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestObjectItemList</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">TestObjectItem</span><span class="o">&gt;</span> <span class="n">testObjectItemList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">testObjectItemList</span> <span class="o">=</span> <span class="n">testObjectItemList</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Id</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;status&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Enumerated</span><span class="o">(</span><span class="n">EnumType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">TestObjectStatus</span> <span class="nf">getStatus</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStatus</span><span class="o">(</span><span class="n">TestObjectStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;buy_time&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Type</span><span class="o">(</span><span class="n">type</span><span class="o">=</span><span class="s">&quot;org.jadira.usertype.dateandtime.joda.PersistentDateTime&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DateTime</span> <span class="nf">getBuyTime</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">buyTime</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBuyTime</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">buyTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">buyTime</span> <span class="o">=</span> <span class="n">buyTime</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很普通的Entity，使用JPA注解，唯一需要注意的是在处理枚举类型和Joda DateTime类型的时候用到了不同的类型注解。</p>

<h4>2. Dao</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//省略了部分方法</span>
</span><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GeneralDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PersistenceContext</span>
</span><span class='line'>    <span class="n">EntityManager</span> <span class="n">em</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">GeneralDao</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">GeneralDao</span><span class="o">(</span><span class="n">EntityManager</span> <span class="n">em</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">em</span> <span class="o">=</span> <span class="n">em</span><span class="o">;}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">EntityManager</span> <span class="nf">getEm</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">em</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 使用jpql进行查询</span>
</span><span class='line'><span class="cm">     * @param ql jpql</span>
</span><span class='line'><span class="cm">     * @param page 分页对象,可选</span>
</span><span class='line'><span class="cm">     * @param queryParams 查询参数</span>
</span><span class='line'><span class="cm">     * @param &lt;T&gt;</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">query</span><span class="o">(</span><span class="n">String</span> <span class="n">ql</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">page</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">queryParams</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 使用jpql进行数据更新操作</span>
</span><span class='line'><span class="cm">     * @param ql</span>
</span><span class='line'><span class="cm">     * @param queryParams</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="n">String</span> <span class="n">ql</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">queryParams</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="kt">void</span> <span class="nf">persist</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setOperableDataIfNecessary</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">t</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">t</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">T</span> <span class="nf">merge</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setOperableDataIfNecessary</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">t</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">t</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">t</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">em</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="kt">boolean</span> <span class="nf">removeById</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">t</span> <span class="o">=</span> <span class="n">get</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">remove</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">T</span> <span class="nf">get</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="kt">void</span> <span class="nf">refresh</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">refresh</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="kt">void</span> <span class="nf">detach</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用的是通用Dao，一般的增删改查操作可以直接通过该Dao完成。可以看出这个Dao只是对JPA的EntityManager一个简单封装，
大部分操作还是委派给EntityManager完成。代码中也可以直接取得EntityManager进行操作。</p>

<!-- more -->


<h4>3. Service</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//省略了部分方法</span>
</span><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestObjectService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PersistenceContext</span>
</span><span class='line'>    <span class="n">EntityManager</span> <span class="n">em</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="n">GeneralDao</span> <span class="n">generalDao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="nf">findByKey</span><span class="o">(</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;&gt;</span> <span class="n">page</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">orderNo</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">TestObjectStatus</span><span class="o">&gt;</span> <span class="n">status</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Optional</span><span class="o">&lt;</span><span class="n">DateTime</span><span class="o">&gt;</span> <span class="n">createTimeStart</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">DateTime</span><span class="o">&gt;</span> <span class="n">createTimeEnd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CriteriaBuilder</span> <span class="n">cb</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getCriteriaBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">CriteriaQuery</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">cq</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Root</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">order</span> <span class="o">=</span> <span class="n">cq</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Predicate</span><span class="o">&gt;</span> <span class="n">predicateList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">orderNo</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">predicateList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;orderNo&quot;</span><span class="o">),</span> <span class="n">orderNo</span><span class="o">.</span><span class="na">get</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">createTimeStart</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">predicateList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">greaterThanOrEqualTo</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;createTime&quot;</span><span class="o">),</span> <span class="n">createTimeStart</span><span class="o">.</span><span class="na">get</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">createTimeEnd</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">predicateList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">lessThanOrEqualTo</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;createTime&quot;</span><span class="o">),</span> <span class="n">createTimeEnd</span><span class="o">.</span><span class="na">get</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">predicateList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;status&quot;</span><span class="o">),</span> <span class="n">status</span><span class="o">.</span><span class="na">get</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cq</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">order</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">predicateList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">Predicate</span><span class="o">[</span><span class="n">predicateList</span><span class="o">.</span><span class="na">size</span><span class="o">()])).</span><span class="na">orderBy</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;updateTime&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TypedQuery</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">query</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">cq</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">page</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">CriteriaQuery</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">countCq</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>            <span class="n">countCq</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">count</span><span class="o">(</span><span class="n">countCq</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">))).</span><span class="na">where</span><span class="o">(</span><span class="n">predicateList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">Predicate</span><span class="o">[</span><span class="n">predicateList</span><span class="o">.</span><span class="na">size</span><span class="o">()]));</span>
</span><span class='line'>            <span class="n">Long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">countCq</span><span class="o">).</span><span class="na">getSingleResult</span><span class="o">();</span>
</span><span class='line'>            <span class="n">page</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">setTotalCount</span><span class="o">(</span><span class="n">count</span><span class="o">.</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">query</span><span class="o">.</span><span class="na">setFirstResult</span><span class="o">(</span><span class="n">page</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getStart</span><span class="o">());</span>
</span><span class='line'>            <span class="n">query</span><span class="o">.</span><span class="na">setMaxResults</span><span class="o">(</span><span class="n">page</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getLimit</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">page</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">page</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">setResult</span><span class="o">(</span><span class="n">results</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">results</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">TestObject</span> <span class="nf">get</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">generalDao</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>findByKey方法是一个查询方法，这里使用的是JPA的Criteria查询。Service类没有使用接口，只有实现类。Service就是一个Spring管理的Bean，
事务边界在Service层。</p>

<h4>4. Controller</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//省略了部分方法</span>
</span><span class='line'><span class="nd">@org.springframework.stereotype.Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestObjectController</span> <span class="kd">extends</span> <span class="n">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">TestObjectService</span> <span class="n">testObjectService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Result</span> <span class="nf">list</span><span class="o">(</span><span class="n">String</span> <span class="n">status</span><span class="o">,</span> <span class="n">String</span> <span class="n">orderNo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">testObjectList</span> <span class="o">=</span> <span class="n">testObjectService</span><span class="o">.</span><span class="na">findByKey</span><span class="o">(</span><span class="n">of</span><span class="o">(</span><span class="n">PageFactory</span><span class="o">.</span><span class="na">getPage</span><span class="o">(</span><span class="n">request</span><span class="o">())),</span> <span class="n">ofNullable</span><span class="o">(</span><span class="n">orderNo</span><span class="o">),</span>
</span><span class='line'>                <span class="n">ofNullable</span><span class="o">(</span><span class="n">status</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">TestObjectStatus:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">),</span> <span class="n">empty</span><span class="o">(),</span> <span class="n">empty</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nf">ok</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">testObjectList</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Result</span> <span class="nf">addPage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">ok</span><span class="o">(</span><span class="n">add</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">Form</span><span class="o">.</span><span class="na">form</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Result</span> <span class="nf">updatePage</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">ok</span><span class="o">(</span><span class="n">update</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">Form</span><span class="o">.</span><span class="na">form</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">fill</span><span class="o">(</span><span class="n">testObjectService</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">))));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Controller继承play.mvc.Controller。和SpringMVC一样，在Play中，Controller就是一系列Action的集合。例如我开发用户有关的功能，
那么我就建一个UserController，然后把用户的CRUD方法都放在UserController里，每个方法都有自己的路由规则。这里我们先来看list方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Result</span> <span class="nf">list</span><span class="o">(</span><span class="n">String</span> <span class="n">status</span><span class="o">,</span> <span class="n">String</span> <span class="n">orderNo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">testObjectList</span> <span class="o">=</span> <span class="n">testObjectService</span><span class="o">.</span><span class="na">findByKey</span><span class="o">(</span><span class="n">of</span><span class="o">(</span><span class="n">PageFactory</span><span class="o">.</span><span class="na">getPage</span><span class="o">(</span><span class="n">request</span><span class="o">())),</span> <span class="n">ofNullable</span><span class="o">(</span><span class="n">orderNo</span><span class="o">),</span>
</span><span class='line'>            <span class="n">ofNullable</span><span class="o">(</span><span class="n">status</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">TestObjectStatus:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">),</span> <span class="n">empty</span><span class="o">(),</span> <span class="n">empty</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nf">ok</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">testObjectList</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里list的功能是查询出所有满足条件的测试对象（TestObject对象）。首先来看参数，这里声明了两个查询参数status和orderNo，用来匹配Http请求QueryString中的参数，
这和SpringMVC中声明了RequestParam(&ldquo;status&rdquo;)的参数类似。注意有一点区别，这里的status和orderNo不能捕捉通过Http Body提交的参数，只能匹配QueryString中的参数。</p>

<p>Controller中调用service方法来完成查询，然后将结果返回。方法的返回值声明是play.mvc.Result接口，你可以理解Result的实现类只需要包含两个值：
ResponseHeader和ResponseBody。对于ResponseHeader的设置，这里调用父类的ok方法设置返回的Http状态码为200，对应的还有created 201, notFound 404等方法。
ok方法参数需要传入的就是ResponseBody，参数类型声明为play.twirl.api.Content特质（Scala中的特质类似于Java的接口），你基本上永远不需要去手动构造这个特质的实现，
而是使用Play提供的模板。这里我在views.html.test目录下有一个list.scala.html模板，这个模板文件会被IDE自动编译成views.html.test.list类，类里面有一个render方法来完成模板的渲染，
render方法返回值就是play.twirl.api.Content的子类。所以我在这里可以直接调用list.render(testObjectList)方法来完成模板的渲染。</p>

<p>好了，现在来对照SpringMVC，如果是用SpringMVC的话，这个方法应该是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/test/objects&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">)</span>  <span class="c1">//可省略</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">list</span><span class="o">(</span><span class="n">String</span> <span class="n">status</span><span class="o">,</span> <span class="n">String</span> <span class="n">orderNo</span><span class="o">,</span> <span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">testObjectList</span> <span class="o">=</span> <span class="n">testObjectService</span><span class="o">.</span><span class="na">findByKey</span><span class="o">(</span><span class="n">of</span><span class="o">(</span><span class="n">PageFactory</span><span class="o">.</span><span class="na">getPage</span><span class="o">(</span><span class="n">request</span><span class="o">())),</span> <span class="n">ofNullable</span><span class="o">(</span><span class="n">orderNo</span><span class="o">),</span>
</span><span class='line'>            <span class="n">ofNullable</span><span class="o">(</span><span class="n">status</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">TestObjectStatus:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">),</span> <span class="n">empty</span><span class="o">(),</span> <span class="n">empty</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;testObjectList&quot;</span><span class="o">,</span> <span class="n">testObjectList</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;views/html/test/list&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>细心的你可能已经发现了，Play的版本与SpringMVC的对照，少了一个路由的信息，那么在Play中怎么配置路由呢，请看下节</p>

<h4>5. routes文件（路由）</h4>

<p>在Play中，所有的路由信息都是统一放在一个文件里，即conf/routes文件。上面的list方法路由在routes中对应如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">GET</span>         <span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">objects</span>                     <span class="nd">@controllers.test.TestObjectController.list</span><span class="o">(</span><span class="n">status</span> <span class="o">?=</span> <span class="kc">null</span><span class="o">,</span> <span class="n">orderNo</span> <span class="o">?=</span> <span class="kc">null</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>最左边的GET声明的是Http Method，在Play中每个路由都要明确写出对应的Http Method，中间是路由的URI，最右边是映射的Controller方法。参数<code>status ?= null</code>代表参数是可选的，
如果请求参数中没有status则默认值是null。routes文件的一大好处是在写映射Controller方法的时候IDE能帮助自动补全，并且编译器在编译的时候也能校验声明的参数个数与类型是否一致，
这能有效的帮助开发者减少错误。路由也配好了，剩下的工作就是模板的编写。</p>

<h4>6. 模板</h4>

<p>list.scala.html</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(testObjects: List[ordercenter.models.TestObject])
</span><span class='line'>
</span><span class='line'>@import common.utils.DateUtils._
</span><span class='line'>
</span><span class='line'>@main()() {
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;breadcrumbs&quot;</span> <span class="na">id=</span><span class="s">&quot;breadcrumbs&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">{</span><span class="nx">ace</span><span class="p">.</span><span class="nx">settings</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="s1">&#39;breadcrumbs&#39;</span> <span class="p">,</span> <span class="s1">&#39;fixed&#39;</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){}</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;breadcrumb&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-home home-icon&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>测试对象管理
</span><span class='line'>            <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;@controllers.test.routes.TestObjectController.list()&quot;</span><span class="nt">&gt;</span>测试对象查询<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span><span class="c">&lt;!-- .breadcrumb --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>
</span><span class='line'>                测试对象管理
</span><span class='line'>                <span class="nt">&lt;small&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-double-angle-right&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>测试对象查询
</span><span class='line'>                <span class="nt">&lt;/small&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- /.page-header --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-xs-12&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="c">&lt;!-- PAGE CONTENT BEGINS --&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-xs-12&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;table-responsive&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;table</span> <span class="na">id=</span><span class="s">&quot;sample-table-1&quot;</span> <span class="na">class=</span><span class="s">&quot;table table-striped table-bordered table-hover&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>                                    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;th&gt;</span>状态<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;th&gt;</span>买家<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">&quot;hidden-480&quot;</span><span class="nt">&gt;</span>金额<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;th&gt;</span>下单时间<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;th&gt;&lt;/th&gt;</span>
</span><span class='line'>                                    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>
</span><span class='line'>                                <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>                                @for(testObject <span class="nt">&lt;-</span> <span class="na">testObjects</span><span class="err">)</span> <span class="err">{</span>
</span><span class='line'>                                    <span class="err">&lt;</span><span class="na">tr</span><span class="nt">&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;td&gt;</span>@testObject.getStatus.value<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;td&gt;</span>@testObject.getBuyerId<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;td&gt;</span>@testObject.getActualFee<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;td&gt;</span>@printDateTime(testObject.getCreateTime) <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;td&gt;</span>
</span><span class='line'>                                            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;visible-md visible-lg hidden-sm hidden-xs btn-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                                <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-xs btn-info&quot;</span> <span class="na">onclick=</span><span class="s">&quot;location.href=&#39;@controllers.test.routes.TestObjectController.updatePage(testObject.getId)&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                                    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-edit bigger-120&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>                                                <span class="nt">&lt;/button&gt;</span>
</span><span class='line'>                                                <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-xs btn-success&quot;</span> <span class="na">onclick=</span><span class="s">&quot;location.href=&#39;@controllers.test.routes.TestObjectController.list()&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                                    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-info bigger-120&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>                                                <span class="nt">&lt;/button&gt;</span>
</span><span class='line'>                                            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                                    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>                                }
</span><span class='line'>
</span><span class='line'>                                <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/div&gt;</span><span class="c">&lt;!-- /.table-responsive --&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/div&gt;</span><span class="c">&lt;!-- /span --&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Play的模板引擎是<a href="https://github.com/playframework/twirl">Twirl</a>，关于这个引擎的介绍可以参考<a href="http://skaka.me/blog/2015/07/27/play1/">上一篇文章</a>。</p>

<p><code>@(testObjects: List[ordercenter.models.TestObject])</code>是参数声明，写Play模板的时候，建议参数都通过这种声明的形式传入，而不是使用页面隐藏对象。
因为编译器能够自动帮我们校验类型和个数，重构起来也会更方便。下面一行<code>@import common.utils.DateUtils._</code>引入了定义好的一个工具类，
下面的<code>@printDateTime(testObject.getCreateTime)</code>用来格式化显示时间。</p>

<p><code>@main()() {...}</code>的形式是调用main模板完成渲染，main模板前两个参数可以省略，第三个参数需要传入html代码。在Scala中，方法调用既可以用小括号，比如<code>println("ok")</code>，
也可以用大括号<code>println{"ok"}</code>。而这里第三个参数使用的是大括号。<code>@for(testObject &lt;- testObjects){}</code>是循环的写法，这里循环testObjects，取出每一条记录用来显示。</p>

<p><code>onclick="location.href='@controllers.test.routes.TestObjectController.list()'"</code>绑定了onClick事件，用户在点击的时候会跳转到测试对象的编辑页面。
这里没有硬编码uri，而是使用routes反向路由的写法。之所以能这样写，是因为IDE在编译的时候会根据routes文件自动生成一个routes对象，
对象里面的方法对应的就是我们配置好的controller方法映射。这里写的<code>@controllers.test.routes.TestObjectController.list()</code>在模板渲染的时候就会被替换成<code>/test/objects</code>这个URI。</p>

<h3>4. 总结</h3>

<p>这一篇主要介绍了Play在整合Spring和JPA之后是如何进行开发的。可以看出，开发Play应用与开发SSH应用没有太大区别，只是Controller和模板的写法有所不同，
但是我们能很快享受到Play的便利：简单易用的模板，修改代码无需重启服务器，不需要配置外部服务器，etc。随着业务和技术的扩展，使用Play的项目更容易整合其他服务。
例如整合监控工具<a href="http://skaka.me/blog/2015/07/21/kamon-statsd-graphite-grafana-introduction/">StatsD+Graphite+Grafana+Kamon</a>，Docker化，服务化。</p>

<p>这篇文章我没有介绍如何启动应用，因为这需要一些开发环境的准备，以及了解SBT的基本用法。这些内容我会在下一篇博客介绍。这篇文章相关的代码已经提交到Github，
<a href="https://github.com/sunnykaka/awesome-play">项目地址</a>。
这个项目整合了Play，Spring，JPA，数据存储使用MySQL和Redis，使用Bootstrap作为页面框架，可以作为脚手架项目给有兴趣的朋友进行研究。</p>

<p>除此之外，感兴趣的朋友还可以下载<a href="http://www.typesafe.com/get-started">Typesafe Reactive Platform</a>进行学习。这这上面有很多关于Play，Akka的项目模板，
并且你可以通过浏览器查看编辑这些代码，还可以直接运行。另外要进一步学习可以读<a href="http://www.amazon.com/Play-Java-Covers-2/dp/1617290904">这本书</a>，网上有电子版的。</p>

<p>下篇我会介绍如何搭建开发环境，以及如何调试应用。掌握了之后，你会发现开发和调试过程原来还能这样直观和简单!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Java开发者的Play Framework(2.4)介绍 Part1：Play的优缺点以及适用场景]]></title>
    <link href="http://skaka.me/blog/2015/07/27/play1/"/>
    <updated>2015-07-27T16:46:32+08:00</updated>
    <id>http://skaka.me/blog/2015/07/27/play1</id>
    <content type="html"><![CDATA[<h3>1. 关于这篇系列</h3>

<p>这篇系列不是Play框架的Hello World，因为这样的文章网上已经有很多。</p>

<p>这篇系列会首先结合实际代码介绍Play的特点以及适用场景，然后会有几篇文章介绍Play与Spring，JPA（Hibernate）的集成，以及一些Play应用的最佳实践，
这期间会在Github上提供一个脚手架项目，方便感兴趣的朋友直接动手尝试。最后会简单分析Play的部分源码，帮助大家理解黑盒子的内部机制。</p>

<p>我水平有限，有错误欢迎指出。</p>

<h3>2. Play介绍</h3>

<p>Play Framework是一个开源的Web框架，背后商业公司是Typesafe。要介绍Play之前，首先理清Play的两个不同的分支。
Play 1.x 使用Java开发，最新版本是1.3.1，只支持Java项目。从11年开始就进入了维护阶段，新项目一般不考虑使用Play1。
Play 2.x 使用Scala和Java开发，同时支持Java和Scala项目。
这里主要介绍最新的Play2.4 for Java。有一点需要提前说明，虽然Play2主要由Scala开发，但是对于项目中的一般开发人员而言，
使用Play可以完全不懂Scala，具体情况后面会说明。</p>

<h3>3. 为什么要了解Play</h3>

<p>现在的Web框架或者类库可以说是浩如烟海。近十年来，在Web开发领域，JVM阵营的占有率一直不高，
<img src="http://skaka.me/images/custom/20150728/frameworks.png">
数据来源(<a href="http://hotframeworks.com/#rankings">http://hotframeworks.com/#rankings</a>)<br/>
这是国外开源项目的数据，相对来说国内Java框架的使用率会高一些。而最近几年，Ruby和Python在国内的开发群体也在不断壮大。
Java框架在Web领域不那么受欢迎，主要原因在于开发速度远落后于其他的开发框架。对于初创公司而言，快速开发出产品投入市场试错比花半年打磨出一款功能性能齐备的
应用更加重要，而对于成熟产品，也需要快速响应频繁的需求变化，这方面动态语言又更胜一筹。所以说到Web后端框架的技术选型，除非技术团队有比较深的JVM背景，
否则会倾向于选择RoR，Django这些框架。</p>

<p>JVM阵营在Web领域逐渐落后主要有三个原因：编译的锅，技术栈的锅和语言的锅。</p>

<p>大家都知道Java源代码需要编译之后才能运行，直接结果是每次修改源代码都需要重启Web服务器才能看到效果。如果项目比较小类也少，重启时间还勉强能接受。
我以前参与的一个项目，使用的是WebLogic服务器，Spring容器里大概有上千个Bean，重启一次至少得花5分钟，还是优化后的结果。工作时间至少有20%花在重启上了。
虽然现在有JRebel之类的热加载技术，但是国内使用的相对较少。</p>

<p>Servlet规范在1997年出现，在当时可以说是很先进的技术，加上Tomcat的横空出世，直接促成了JSP的崛起。然而时过境迁，Servlet风光不再，
Web容器存在的必要性也<a href="https://jaxenter.com/java-application-servers-dead-112186.html">被越来越多的人质疑</a>。原因就在于人为的将应用与容器剥离，
虽然这种做法本意是好的，但是结果就是给开发测试部署带来一系列集成的问题，现在越来越多的项目开始使用内嵌的Jetty或Tomcat就是一个现实的例子。
Servlet还带来一个问题，就是有状态的服务器。一旦使用了Session，服务器就无法享受到水平扩展的好处了，由此不得不采用Session复制或者粘性Session(Sticky Session)的
方案来解决这个问题，无论采取哪种方案都会有性能损耗，并且推高了技术成本。Servlet说到底是Java EE家族的一员，由于Sun的领导（Oracle背锅），
从Java EE 5开始，Java EE的角色已经从技术创新者转换为跟随者，这些年基本上可以说是跟着开源社区的步子在走的，除了政府大单和跨国企业，你很难再看见它的身影了。</p>

<!-- more -->


<p>
至于语言，其实从JDK8开始，Java已经很好用了。不过从JDK5到JDK8，十年太长，尤其是在Web。</p>

<p>之前Java阵营受累于没有成熟的快速开发框架，Spring热衷于提供各种集成方案，可是配置和使用还是相当的麻烦，直到Spring Boot的出现才有改善。
不过近几年出现了一些相当优秀的框架，如<a href="http://www.dropwizard.io">Dropwizard</a>，<a href="https://playframework.com">Play</a>，<a href="http://vertx.io/">Vert.x</a>。
这篇系列要介绍的Play，通过ClassLoader在源代码修改的时候动态加载类，解决了修改代码需要重启服务器的问题，完全抛弃了Servlet技术栈，基于Netty实现了自己的
请求响应接口（Request/Result），基于Play的应用就是无状态的，另外Play处理请求的方式是无阻塞的（Non-Blocking）。Play2在设计的时候借鉴了RoR的许多优点，
学习Play能够让你了解一些现代化框架的特点，同时能够为你打开异步编程世界的大门。Promise已经被Scala，JavaScript等语言大量使用，Actor模型也已经遍地开花，
这些你都可以直接在Play中使用，或者你想保持原来的编程风格也完全没有问题。</p>

<h3>4. Play的特性</h3>

<h4>1. Play2的模板引擎</h4>

<p>Play2的模板是很强大并且容易上手的. 相对于Java领域其他模板引擎(Freemarker, Velocity, JSP, Groovy, etc), 主要有三个特点.<br/>
1) 简单易上手, 没有JSP里面繁杂的内置对象和指令, 所有功能都通过方法调用完成.<br/>
2) 主流IDE中都支持Play模板的静态类型检查, 类似JSP.<br/>
3) 支持反向路由.<br/>
举个例子, 一般系统都会有一个固定的页面布局, 比如分出页头页尾。如果用JSP或者Velocity之类的模板，
一般都是通过sitemesh+filter或者在每个页面include来完成布局。使用Play模板, 完成这个功能非常容易。
首先定义一个main页面
main.scala.html：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(title: String = &quot;默认标题&quot;)(staticFile: Html = Html(&quot;&quot;))(content: Html)
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;zh-cmn-Hans&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>@title<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'>@header()  <span class="nt">&lt;--</span> <span class="err">页头</span> <span class="na">--</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>@navigator() <span class="c">&lt;!-- 导航 --&gt;</span>
</span><span class='line'>
</span><span class='line'>@content
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;@routes.Assets.versioned(&quot;</span><span class="na">js</span><span class="err">/</span><span class="na">jquery-1</span><span class="err">.</span><span class="na">11</span><span class="err">.</span><span class="na">2</span><span class="err">.</span><span class="na">min</span><span class="err">.</span><span class="na">js</span><span class="err">&quot;)&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>@staticFile
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(title: String = &quot;默认标题&quot;)(staticFile: Html = Html(&quot;&quot;))(content: Html)
</span></code></pre></td></tr></table></div></figure>


<p>这一部分是参数声明，这里声明了三个参数:title标题, 有默认值；staticFile为html代码块, 可以传js等；content为页面内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@header()  <span class="nt">&lt;--</span> <span class="err">页头</span> <span class="na">--</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>@navigator() <span class="c">&lt;!-- 导航 --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一部分是引用同目录下的另外两个页面：header.scala.html和navigator.scala.html。为什么能这样引用，因为这些页面(main,header,navigator)都会被自动
编译成一个方法（准确地说是一个Scala object，不过这里先当做方法），所以这里相当于方法调用。同样，这个main也会被编译成方法，其他页面可以调用main来完成布局，
例如
login.scala.html</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@main() {
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nx">FG</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">login</span><span class="p">();</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>} {
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;login width1200&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- login --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>这就是一个简单的登录页面。登录页面调用main页面的方法，第一个参数不传使用默认标题，第二个参数传入登录页面的js代码，第三个参数传入登录页面的html代码。
这样就完成了页面布局, 没有随处可见的include, 也没有暗箱操作的filter, 所有的一切都是方法调用, 是不是很简单清晰？</p>

<p>静态类型检查就不说了, 本来Java的一大优点(Que Dian)就是类型检查，所以在Java里用Freemarker或者Velocity这种模板的做法值得商榷。</p>

<p>反向路由的意思是, 在Play中, 所有的Controller url都配置在一个routes文件中, 例如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>GET         /register                           @controllers.user.LoginController.registerPage
</span></code></pre></td></tr></table></div></figure>


<p>之后无论是在Controller里还是模板中, 都不用硬编码url。而是使用routes文件。例如在Controller中使用<code>redirect(routes.LoginController.registerPage())</code>就能实现重定向。
而在模板中使用 <code>&lt;a href="@controllers.routes.LoginController.registerPage()"&gt;</code>来指向链接。这种风格就是REST里的URI模板。</p>

<h4>2. 热部署</h4>

<p>这个上面介绍过，不用重启服务器。</p>

<h4>3. 内置dev/prod环境，内置部署脚本</h4>

<p>平常开发的时候使用run启动Play，是跑在dev模式。 Play会定时扫描源码目录进行热更新，并且类都是访问的时候再加载，提高启动速度。
使用start启动项目就运行在prod模式。Play内置dist命令，可以把所有的文件打包成一个zip，解压之后直接运行bin目录下的可执行文件即可启动项目，除了JDK之外无须任何其他外部依赖。
这大大减轻了运维成本，同时也能够很方便的进行持续集成（CI）。</p>

<h4>4. 使用Play开发的Server大部分能做到Stateless</h4>

<p>这个之前也说过，Play抛弃了Servlet/JSP里Session等概念, 内置没有提供方法将对象与服务器实例进行绑定(你要使用HashMap存的话Play也没办法)。
推荐的做法是使用外部缓存, 比如Redis, Memcached等。可能有人会觉得没有Session是Play的一个缺点（Play里的Session和Servlet Session不是一回事）,
但是只要你开发过流量大一点的应用, 你就会理解这点。</p>

<h4>5. 好用的配置库</h4>

<p>如果你之前开发过Java项目, 肯定写过**.properties或者管理过一大堆的xml。Java内置库对properties文件的处理是很弱的，你不得不自己写一些工具类去进行处理，
而且properties文件还不支持更复杂的语法。Play使用<a href="https://github.com/typesafehub/config">Typesafe Config</a>库，配置文件使用HOCON格式，默认配置文件为application.conf。
你能很容易读取里面的配置, 并且你也可以把自己的配置写在里面。所以项目中基本不需要使用properties或者xml文件了，除了第三方库需要的。</p>

<h4>6. Play插件</h4>

<p>RoR框架之所以好用，主要原因之一就是围绕RoR有相当丰富的插件可供选择，很多业务功能甚至都不需要开发就能实现。Play的插件数量当然相对于RoR还是要少一些，
不过你遇到的需求基本都有现成的插件可以使用。比如发邮件, 授权和验证, sitemap生成，第三方登录等等。自己写一个插件也很简单。</p>

<h4>7. 优秀的测试支持</h4>

<p>因为Play诞生的时候TDD已经很火热，所以Play对测试的支持非常好。
例如下面的几行代码就能对Controller进行测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">Http</span><span class="o">.</span><span class="na">RequestBuilder</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Http</span><span class="o">.</span><span class="na">RequestBuilder</span><span class="o">().</span><span class="na">method</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">uri</span><span class="o">(</span><span class="n">routes</span><span class="o">.</span><span class="na">LoginController</span><span class="o">.</span><span class="na">requestPhoneCode</span><span class="o">(</span><span class="n">phone</span><span class="o">).</span><span class="na">url</span><span class="o">());</span>
</span><span class='line'><span class="n">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="n">route</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">status</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="n">OK</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Play还内置了对 Selenium WebDriver的支持，可以模拟浏览器进行测试。以下是官方的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BrowserFunctionalTest</span> <span class="kd">extends</span> <span class="n">WithBrowser</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runInBrowser</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">browser</span><span class="o">.</span><span class="na">goTo</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">browser</span><span class="o">.</span><span class="na">$</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">).</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>8. 优秀的REST支持</h4>

<p>Play2从诞生起就能很容易的支持RESTful风格的架构（因为Play2在设计的时候REST就已经大行其道），
在Play2中实现RESTful API的示例可以参考Stackoverflow上的这个<a href="http://stackoverflow.com/questions/4379485/restful-on-play-framework">回答</a></p>

<h3>5. 使用Play过程中遇到的坑</h3>

<h4>1. 首次编译速度过慢</h4>

<p>这是Scala的锅。Scala在编译过程中要<a href="http://stackoverflow.com/questions/4527902/what-is-the-order-of-the-scala-compiler-phases">经历至少30个步骤</a>，
导致编译速度相当慢。在我的机器上（Core&trade; i5-4590 CPU @ 3.30GHz，RAM 8GB），编译100多个Scala类大约需要1到2分钟。好在sbt可以增量编译，
即首次编译之后，你再修改代码，编译器只会编译那些它认为需要编译的类，编译几个类的时候速度很快，基本刷新页面就能完成。</p>

<h4>2. IDE的Scala插件偶尔会误报错误</h4>

<p>首先得说明，最适合开发Play项目的IDE是<a href="https://www.jetbrains.com/idea">IntelliJ IDEA</a>。现在IDEA最新的Scala插件相比之前的版本，已经有很大的提升。
不过偶尔还是会出现误报的情况，这个问题随着新版本插件的发布应该会慢慢解决。</p>

<h4>3. Scala和Sbt的学习成本较高</h4>

<p>这可能是初次接触Play的用户遇到的最大障碍。其实对于大多数业务开发人员来说，这不是问题。使用Play for Java版本，项目代码99%都是Java代码，
而Sbt类似于Maven，一旦项目搭建好后不需要过多接触，只要学会几个常用的命令就可以了，例如project root(切换项目), run(启动服务器在dev模式)。
我们团队大部分成员之前都没有接触过Scala和Play，经过一两周的磨合期之后都能很顺利的使用Play进行开发了。</p>

<h4>4. Play的API变化速度比较快</h4>

<p>Play的版本号遵循<a href="http://semver.org/">Semantic Versioning</a>，不同主版本的API变化非常大，比如Play1和Play2就是两个不同的框架。
而副版本之间API也会有一些变化，而且不一定完全向后兼容。例如使用Play2.3.x的项目在升级到2.4的时候，需要按照官方提供的迁移手册进行代码修改，
不然是运行不了的。这对于其他背景的开发者来说可能比较容易理解，但是如果是一直习惯于使用Spring MVC或Struts2的话，可能会对这点感到不适。</p>

<h3>6.总结</h3>

<p>Play2可以算是一个现代化的框架，吸收了RoR诸多优点，同时又解决了Java开发中的一些痛点，在国外已经被大量使用。参见
<img src="http://skaka.me/images/custom/20150728/playframework2.png">
数据来源(<a href="http://www.infoq.com/research/jvm-web-frameworks">http://www.infoq.com/research/jvm-web-frameworks</a>)</p>

<p>Play和Spring MVC的定位有些相似，但是比Spring MVC提供更丰富的功能，和Web有关的项目都可以使用Play。但是如果要用好Play，对团队有一定的要求。</p>

<p>首先，你的团队应该不是墨守成规的团队。大部分人都害怕变化，这是不争的事实。JDK的发展缓慢加上国内的技术氛围，着实让Java开发人员过了几年的舒服日子。
你如果是05年学会了ibatis和Spring，然后这十年去环游世界了，在15年你照样能轻松找到一份待遇还算可以的工作。然而事情已经开始发生变化，不会学习可能会被淘汰。</p>

<p>其次，你的团队应该重视工作效率和质量，并且有时间做出改进。国内很多团队信奉的是人海战术。以低薪聘请大量不合格的开发人员来开发业务功能，
而不是注重单人的工作效率和质量，很多项目的加班和延期都源于此。这样的团队就不适合用Play。很难想象每天都要加班去应付工作的团队有时间打磨升级自己的工具和技能。
但是反过来低效率的工具和技能又拖累了自己的工作效率，这是一个恶性循环。</p>

<p>最后，团队中需要有人对Scala和Sbt有一定的了解。虽然Play有Java版本可以使用，但是如果不会Scala和Sbt，在搭建环境，使用一些高级功能（如Filter）的时候可能会遇到麻烦。</p>

<p>下篇我会介绍Play和Spring还有JPA（Hibernate）的集成，毕竟Spring在大部分Java项目还是主流。有问题和建议欢迎指出。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用StatsD, Graphite, Grafana, Kamon搭建可用于JVM项目的可视化性能监控系统]]></title>
    <link href="http://skaka.me/blog/2015/07/21/kamon-statsd-graphite-grafana-introduction/"/>
    <updated>2015-07-21T16:12:13+08:00</updated>
    <id>http://skaka.me/blog/2015/07/21/kamon-statsd-graphite-grafana-introduction</id>
    <content type="html"><![CDATA[<h3>1. 什么是性能监控系统</h3>

<p>这里说的性能监控系统，主要侧重点是监控应用系统的性能。
说直白点就是每个业务（例如注册，登录）的请求响应时间，请求次数等信息。
操作系统的监控不是这里的重点，因为业界已经有许多相当成熟的基于Linux的运维系统。
操作系统的运维和应用系统的运维是两码事，应用系统的运维相对来说没有这么多选择。
而对于任何线上系统来说，运维监控系统又是必不可少的。
如果你是在大公司，一般会选择开发自己的运维系统，而对于中小团队，因为人力有限，大多会采用开源的解决方案。</p>

<p>我在这里要介绍的就是使用StatsD，Graphite, Grafana, Kamon搭建监控系统的方案。
这里的Kamon只适用于基于JVM的项目，另外，如果你的项目是基于Play或Akka或Spray，可以做到不写代码实现监控。
因为Kamon对这几个框架提供了AspectJ支持，在类加载的时候插入代码为你完成记录。
其他情况你需要调用Kamon API来进行数据记录，这也非常的简单。</p>

<h3>2. 监控系统UI</h3>

<p>介绍搭建步骤之前，先来看一看搭好后的界面。
<img src="http://skaka.me/images/custom/20150721/grafana1.png">
<img src="http://skaka.me/images/custom/20150721/grafana2.png">
转自(<a href="https://github.com/kamon-io/docker-grafana-graphite">https://github.com/kamon-io/docker-grafana-graphite</a>)<br/>
这里包含4部分的图表。<br/>
- Actor Metrics是Akka Actor的统计图表。因为我的项目中没有直接使用Akka，所以暂时忽略这一部分内容。<br/>
- Trace Metrics是业务请求的统计图表。例如每个请求的响应时间，以及某个时间段内各请求数量的统计对比。<br/>
- OS Metrics一看就知道是操作系统的统计图表了。<br/>
- JVM Metrics是JVM的统计图表。</p>

<!-- more -->


<h3>3. StatsD, Graphite, Grafana, Kamon简介</h3>

<p>简单介绍一下这四个开源项目，因为都在Github上就不贴链接了，<br/>
已经对这几个项目很熟悉的可以略过。</p>

<h4>1. StatsD</h4>

<p>StatsD是一个用于记录统计信息的守护进程。使用NodeJS开发，提供各种语言的客户端API。</p>

<h4>2. Graphite</h4>

<p>使用Python开发，分为三个子项目<br/>
- carbon 守护进程，接收StatsD发送过来的原始统计数据。<br/>
- whisper 用来存储统计数据的库。<br/>
- graphite webapp 用来图形化展示统计数据的web项目。</p>

<h4>3. Grafana</h4>

<p>使用Go开发，可以直接在界面上设计统计图表。<br/>
之前看到就是使用Grafana制作的界面。</p>

<h4>4. Kamon</h4>

<p>一套类库用来记录统计数据，使用Scala开发，提供Java和Scala API。<br/>
除了提供API，还结合AspectJ对一些框架提供自动记录的功能，当然性能上会有损耗。</p>

<p>整体流程：业务系统调用Kamon的Api记录数据，Kamon将数据发送给StatsD，<br/>
StatsD定期（默认10s）将数据汇总发送到Graphite，<br/>
当用户访问Grafana界面的时候，Grafana调用Graphite接口读取数据绘制成图形展示给用户。</p>

<h3>4.搭建环境</h3>

<p>因为用到了多个项目，并且每个项目都基于不同语言，所以安装过程肯定不会很简单。<br/>
使用docker的朋友直接参考这个项目(<a href="https://github.com/kamon-io/docker-grafana-graphite">https://github.com/kamon-io/docker-grafana-graphite</a>)<br/>
用docker镜像会方便很多。</p>

<p>如果不用docker，可以参考我的安装步骤。<br/>
以下安装是基于Ubuntu14.04，如果是CentOS或其他系统可能某些步骤会不一样。<br/>
另外因为测试的时候是在开发机上，所以下面安装的时候没有使用独立用户和权限。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.安装需要的软件
</span><span class='line'>
</span><span class='line'>sudo apt-get -y install software-properties-common
</span><span class='line'>
</span><span class='line'>sudo add-apt-repository -y ppa:chris-lea/node.js
</span><span class='line'>
</span><span class='line'>sudo apt-get -y update
</span><span class='line'>
</span><span class='line'>sudo apt-get -y install python-django-tagging python-simplejson python-memcache python-ldap python-cairo python-pysqlite2 python-support \
</span><span class='line'>
</span><span class='line'>                           python-pip gunicorn nginx-light nodejs wget curl build-essential python-dev
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>sudo pip install Twisted==11.1.0
</span><span class='line'>
</span><span class='line'>sudo pip install Django==1.5
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Install Elasticsearch
</span><span class='line'>
</span><span class='line'>cd ~ && wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.3.2.deb
</span><span class='line'>
</span><span class='line'>cd ~ && sudo dpkg -i elasticsearch-1.3.2.deb && rm elasticsearch-1.3.2.deb
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>2.从源码安装StatsD, Graphite, Grafana
</span><span class='line'>
</span><span class='line'># Checkout the stable branches of Graphite, Carbon and Whisper and install from there
</span><span class='line'>
</span><span class='line'>mkdir ~/src
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>git clone https://github.com/kamon-io/docker-grafana-graphite.git ~/src/docker-grafana-graphite
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>git clone https://github.com/graphite-project/whisper.git ~/src/whisper &&\
</span><span class='line'>
</span><span class='line'>cd ~/src/whisper                                                                   &&\
</span><span class='line'>
</span><span class='line'>git checkout 0.9.x                                                                &&\
</span><span class='line'>
</span><span class='line'>sudo python setup.py install
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>git clone https://github.com/graphite-project/carbon.git ~/src/carbon              &&\
</span><span class='line'>
</span><span class='line'>cd ~/src/carbon                                                                    &&\
</span><span class='line'>
</span><span class='line'>git checkout 0.9.x                                                                &&\
</span><span class='line'>
</span><span class='line'>sudo python setup.py install
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>git clone https://github.com/graphite-project/graphite-web.git ~/src/graphite-web  &&\
</span><span class='line'>
</span><span class='line'>cd ~/src/graphite-web                                                              &&\
</span><span class='line'>
</span><span class='line'>git checkout 0.9.x                                                                &&\
</span><span class='line'>
</span><span class='line'>sudo python setup.py install
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Install StatsD
</span><span class='line'>
</span><span class='line'>git clone https://github.com/etsy/statsd.git ~/src/statsd                                                                        &&\
</span><span class='line'>
</span><span class='line'>cd ~/src/statsd                                                                                                                  &&\
</span><span class='line'>
</span><span class='line'>git checkout v0.7.2
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Install Grafana
</span><span class='line'>
</span><span class='line'>mkdir ~/src/grafana
</span><span class='line'>
</span><span class='line'>wget http://grafanarel.s3.amazonaws.com/grafana-1.9.1.tar.gz -O ~/src/grafana.tar.gz                   &&\
</span><span class='line'>
</span><span class='line'>        cd ~/src/ && tar -xzf ~/src/grafana.tar.gz && mv ~/src/grafana-1.9.1 ~/src/grafana && cd - &&\
</span><span class='line'>
</span><span class='line'>        rm ~/src/grafana.tar.gz
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>3.修改配置
</span><span class='line'>
</span><span class='line'># Configure Elasticsearch
</span><span class='line'>
</span><span class='line'>sudo mkdir -p /tmp/elasticsearch
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Confiure StatsD
</span><span class='line'>
</span><span class='line'>cp ~/src/docker-grafana-graphite/statsd/config.js ~/src/statsd/config.js
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Configure Whisper, Carbon and Graphite-Web
</span><span class='line'>
</span><span class='line'>sudo cp ~/src/docker-grafana-graphite/graphite/initial_data.json /opt/graphite/webapp/graphite/
</span><span class='line'>
</span><span class='line'>sudo cp ~/src/docker-grafana-graphite/graphite/local_settings.py /opt/graphite/webapp/graphite/
</span><span class='line'>
</span><span class='line'># 此时要 sudo vi /opt/graphite/webapp/graphite/local_settings.py, 把TimeZone改为Asia/Shanghai
</span><span class='line'>
</span><span class='line'>sudo cp ~/src/docker-grafana-graphite/graphite/carbon.conf /opt/graphite/conf
</span><span class='line'>
</span><span class='line'>sudo cp ~/src/docker-grafana-graphite/graphite/storage-aggregation.conf /opt/graphite/conf
</span><span class='line'>
</span><span class='line'>sudo cp ~/src/docker-grafana-graphite/graphite/storage-schemas.conf /opt/graphite/conf
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>sudo mkdir -p /opt/graphite/storage/whisper
</span><span class='line'>
</span><span class='line'>sudo touch /opt/graphite/storage/graphite.db /opt/graphite/storage/index
</span><span class='line'>
</span><span class='line'>sudo chmod 0775 /opt/graphite/storage /opt/graphite/storage/whisper
</span><span class='line'>
</span><span class='line'>sudo chmod 0664 /opt/graphite/storage/graphite.db
</span><span class='line'>
</span><span class='line'>cd /opt/graphite/webapp/graphite && sudo python manage.py syncdb --noinput
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Configure Grafana
</span><span class='line'>
</span><span class='line'>cp ~/src/docker-grafana-graphite/grafana/config.js ~/src/grafana/config.js
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Add the default dashboards
</span><span class='line'>
</span><span class='line'>mkdir ~/src/dashboards
</span><span class='line'>
</span><span class='line'>cp ~/src/docker-grafana-graphite/grafana/dashboards/* ~/src/dashboards/
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Configure nginx
</span><span class='line'>
</span><span class='line'>将下面的内容加入nginx.conf
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>
</span><span class='line'>    listen 80 default_server;
</span><span class='line'>
</span><span class='line'>    server_name _;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>
</span><span class='line'>     # !!! change me 这里改成你的目录 !!!
</span><span class='line'>
</span><span class='line'>      root /home/liubin/src/grafana;
</span><span class='line'>
</span><span class='line'>      index index.html;
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location /graphite/ {
</span><span class='line'>
</span><span class='line'>        proxy_pass                 http://127.0.0.1:8000/;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Real-IP   $remote_addr;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Proto  $scheme;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Server  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Host  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           Host  $host;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        client_max_body_size       10m;
</span><span class='line'>
</span><span class='line'>        client_body_buffer_size    128k;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_connect_timeout      90;
</span><span class='line'>
</span><span class='line'>        proxy_send_timeout         90;
</span><span class='line'>
</span><span class='line'>        proxy_read_timeout         90;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_buffer_size          4k;
</span><span class='line'>
</span><span class='line'>        proxy_buffers              4 32k;
</span><span class='line'>
</span><span class='line'>        proxy_busy_buffers_size    64k;
</span><span class='line'>
</span><span class='line'>        proxy_temp_file_write_size 64k;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        add_header Access-Control-Allow-Origin "*";
</span><span class='line'>
</span><span class='line'>        add_header Access-Control-Allow-Methods "GET, OPTIONS";
</span><span class='line'>
</span><span class='line'>        add_header Access-Control-Allow-Headers "origin, authorization, accept";
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    location /elasticsearch/ {
</span><span class='line'>
</span><span class='line'>        proxy_pass                 http://127.0.0.1:9200/;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Real-IP   $remote_addr;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Proto  $scheme;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Server  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Host  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           Host  $host;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        client_max_body_size       10m;
</span><span class='line'>
</span><span class='line'>        client_body_buffer_size    128k;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_connect_timeout      90;
</span><span class='line'>
</span><span class='line'>        proxy_send_timeout         90;
</span><span class='line'>
</span><span class='line'>        proxy_read_timeout         90;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_buffer_size          4k;
</span><span class='line'>
</span><span class='line'>        proxy_buffers              4 32k;
</span><span class='line'>
</span><span class='line'>        proxy_busy_buffers_size    64k;
</span><span class='line'>
</span><span class='line'>        proxy_temp_file_write_size 64k;
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>
</span><span class='line'>    listen 81 default_server;
</span><span class='line'>
</span><span class='line'>    server_name _;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    open_log_file_cache max=1000 inactive=20s min_uses=2 valid=1m;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>
</span><span class='line'>        proxy_pass                 http://127.0.0.1:8000;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Real-IP   $remote_addr;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Proto  $scheme;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Server  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Host  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           Host  $host;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        client_max_body_size       10m;
</span><span class='line'>
</span><span class='line'>        client_body_buffer_size    128k;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_connect_timeout      90;
</span><span class='line'>
</span><span class='line'>        proxy_send_timeout         90;
</span><span class='line'>
</span><span class='line'>        proxy_read_timeout         90;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_buffer_size          4k;
</span><span class='line'>
</span><span class='line'>        proxy_buffers              4 32k;
</span><span class='line'>
</span><span class='line'>        proxy_busy_buffers_size    64k;
</span><span class='line'>
</span><span class='line'>        proxy_temp_file_write_size 64k;
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    add_header Access-Control-Allow-Origin "*";
</span><span class='line'>
</span><span class='line'>    add_header Access-Control-Allow-Methods "GET, OPTIONS";
</span><span class='line'>
</span><span class='line'>    add_header Access-Control-Allow-Headers "origin, authorization, accept";
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    location /content {
</span><span class='line'>
</span><span class='line'>      alias /opt/graphite/webapp/content;
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    location /media {
</span><span class='line'>
</span><span class='line'>      alias /usr/share/pyshared/django/contrib/admin/media;
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>4.启动
</span><span class='line'>
</span><span class='line'>export GRAPHITE_STORAGE_DIR='/opt/graphite/storage'
</span><span class='line'>
</span><span class='line'>export GRAPHITE_CONF_DIR='/opt/graphite/conf'
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run nginx
</span><span class='line'>
</span><span class='line'>sudo /etc/init.d/nginx restart
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run carbon
</span><span class='line'>
</span><span class='line'>sudo /opt/graphite/bin/carbon-cache.py --debug start
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run graphite-web
</span><span class='line'>
</span><span class='line'>export PYTHONPATH='/opt/graphite/webapp'
</span><span class='line'>
</span><span class='line'>cd /opt/graphite/webapp
</span><span class='line'>
</span><span class='line'>sudo /usr/bin/gunicorn_django -b127.0.0.1:8000 -w2 graphite/settings.py
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run StatsD
</span><span class='line'>
</span><span class='line'>sudo /usr/bin/node ~/src/statsd/stats.js ~/src/statsd/config.js
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run elasticsearch
</span><span class='line'>
</span><span class='line'>sudo /etc/init.d/elasticsearch start
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run grafana
</span><span class='line'>
</span><span class='line'>cd ~/src/dashboards
</span><span class='line'>
</span><span class='line'>sudo /usr/bin/node dashboard-loader.js system-metrics.json welcome.json</span></code></pre></td></tr></table></div></figure>


<p>安装完成后，可以尝试访问(<a href="http://127.0.0.1">http://127.0.0.1</a>)，如果出现之前的界面并且没有报错，就代表安装成功了。</p>

<h3>5. 配置项目</h3>

<p>主要是引入Kamon依赖。<br/>
因为我们的项目基于Play，所以直接使用了Kamon-Play依赖。</p>

<h4>1.修改build.sbt</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="k">val</span> <span class="n">kamonVersion</span> <span class="k">=</span> <span class="s">&quot;0.4.0&quot;</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="k">val</span> <span class="n">dependencies</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;io.kamon&quot;</span> <span class="o">%%</span> <span class="s">&quot;kamon-core&quot;</span> <span class="o">%</span> <span class="n">kamonVersion</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;io.kamon&quot;</span> <span class="o">%%</span> <span class="s">&quot;kamon-statsd&quot;</span> <span class="o">%</span> <span class="n">kamonVersion</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;io.kamon&quot;</span> <span class="o">%%</span> <span class="s">&quot;kamon-play&quot;</span> <span class="o">%</span> <span class="n">kamonVersion</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;io.kamon&quot;</span> <span class="o">%%</span> <span class="s">&quot;kamon-system-metrics&quot;</span> <span class="o">%</span> <span class="n">kamonVersion</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;org.aspectj&quot;</span> <span class="o">%</span> <span class="s">&quot;aspectjweaver&quot;</span> <span class="o">%</span> <span class="s">&quot;1.8.1&quot;</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.修改application.conf</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="n">akka</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">extensions</span> <span class="k">=</span> <span class="o">[</span><span class="err">&quot;</span><span class="kt">kamon.statsd.StatsD</span><span class="err">&quot;</span>, <span class="err">&quot;</span><span class="kt">kamon.system.SystemMetrics</span><span class="err">&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">kamon</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">metric</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">tick</span><span class="o">-</span><span class="n">interval</span> <span class="k">=</span> <span class="mi">1</span> <span class="n">second</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">statsd</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">#</span> <span class="nc">Hostname</span> <span class="n">and</span> <span class="n">port</span> <span class="n">in</span> <span class="n">which</span> <span class="n">your</span> <span class="nc">StatsD</span> <span class="n">is</span> <span class="n">running</span><span class="o">.</span> <span class="nc">Remember</span> <span class="n">that</span> <span class="nc">StatsD</span> <span class="n">packets</span> <span class="n">are</span> <span class="n">sent</span> <span class="n">using</span> <span class="nc">UDP</span> <span class="n">and</span>
</span><span class='line'>    <span class="k">#</span> <span class="n">setting</span> <span class="n">unreachable</span> <span class="n">hosts</span> <span class="n">and</span><span class="o">/</span><span class="n">or</span> <span class="n">not</span> <span class="n">open</span> <span class="n">ports</span> <span class="n">wont</span> <span class="n">be</span> <span class="n">warned</span> <span class="n">by</span> <span class="n">the</span> <span class="nc">Kamon</span><span class="o">,</span> <span class="n">your</span> <span class="n">data</span> <span class="n">wont</span> <span class="n">go</span> <span class="n">anywhere</span><span class="o">.</span>
</span><span class='line'>    <span class="n">hostname</span> <span class="k">=</span> <span class="s">&quot;127.0.0.1&quot;</span>
</span><span class='line'>    <span class="n">port</span> <span class="k">=</span> <span class="mi">8125</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">#</span> <span class="nc">Interval</span> <span class="n">between</span> <span class="n">metrics</span> <span class="n">data</span> <span class="n">flushes</span> <span class="n">to</span> <span class="nc">StatsD</span><span class="o">.</span> <span class="nc">It</span><span class="-Symbol">&#39;s</span> <span class="n">value</span> <span class="n">must</span> <span class="n">be</span> <span class="n">equal</span> <span class="n">or</span> <span class="n">greater</span> <span class="n">than</span> <span class="n">the</span>
</span><span class='line'>    <span class="k">#</span> <span class="n">kamon</span><span class="o">.</span><span class="n">metrics</span><span class="o">.</span><span class="n">tick</span><span class="o">-</span><span class="n">interval</span> <span class="n">setting</span><span class="o">.</span>
</span><span class='line'>    <span class="n">flush</span><span class="o">-</span><span class="n">interval</span> <span class="k">=</span> <span class="mi">1</span> <span class="n">second</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">#</span> <span class="nc">Max</span> <span class="n">packet</span> <span class="n">size</span> <span class="k">for</span> <span class="nc">UDP</span> <span class="n">metrics</span> <span class="n">data</span> <span class="n">sent</span> <span class="n">to</span> <span class="nc">StatsD</span><span class="o">.</span>
</span><span class='line'>    <span class="n">max</span><span class="o">-</span><span class="n">packet</span><span class="o">-</span><span class="n">size</span> <span class="k">=</span> <span class="mi">1024</span> <span class="n">bytes</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">#</span> <span class="nc">Subscription</span> <span class="n">patterns</span> <span class="n">used</span> <span class="n">to</span> <span class="n">select</span> <span class="n">which</span> <span class="n">metrics</span> <span class="n">will</span> <span class="n">be</span> <span class="n">pushed</span> <span class="n">to</span> <span class="nc">StatsD</span><span class="o">.</span> <span class="nc">Note</span> <span class="n">that</span> <span class="n">first</span><span class="o">,</span> <span class="n">metrics</span>
</span><span class='line'>    <span class="k">#</span> <span class="n">collection</span> <span class="k">for</span> <span class="n">your</span> <span class="n">desired</span> <span class="n">entities</span> <span class="n">must</span> <span class="n">be</span> <span class="n">activated</span> <span class="n">under</span> <span class="n">the</span> <span class="n">kamon</span><span class="o">.</span><span class="n">metrics</span><span class="o">.</span><span class="n">filters</span> <span class="n">settings</span><span class="o">.</span>
</span><span class='line'>    <span class="n">includes</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">actor</span>      <span class="k">=</span>  <span class="o">[</span> <span class="err">&quot;</span><span class="kt">*</span><span class="err">&quot;</span> <span class="o">]</span>
</span><span class='line'>      <span class="n">trace</span>      <span class="k">=</span>  <span class="o">[</span> <span class="err">&quot;</span><span class="kt">*</span><span class="err">&quot;</span> <span class="o">]</span>
</span><span class='line'>      <span class="n">dispatcher</span> <span class="k">=</span>  <span class="o">[</span> <span class="err">&quot;</span><span class="kt">*</span><span class="err">&quot;</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">simple</span><span class="o">-</span><span class="n">metric</span><span class="o">-</span><span class="n">key</span><span class="o">-</span><span class="n">generator</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">#</span> <span class="nc">Application</span> <span class="n">prefix</span> <span class="k">for</span> <span class="n">all</span> <span class="n">metrics</span> <span class="n">pushed</span> <span class="n">to</span> <span class="nc">StatsD</span><span class="o">.</span> <span class="nc">The</span> <span class="n">default</span> <span class="n">namespacing</span> <span class="n">scheme</span> <span class="k">for</span> <span class="n">metrics</span> <span class="n">follows</span>
</span><span class='line'>      <span class="k">#</span> <span class="k">this</span> <span class="n">pattern</span><span class="k">:</span>
</span><span class='line'>      <span class="k">#</span>    <span class="kt">application.host.entity.entity-name.metric-name</span>
</span><span class='line'>      <span class="k">#</span> <span class="o">!!!</span> <span class="n">这里改成项目名</span> <span class="o">!!!</span>
</span><span class='line'>      <span class="n">application</span> <span class="k">=</span> <span class="s">&quot;sk-shop&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">play</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">include</span><span class="o">-</span><span class="n">trace</span><span class="o">-</span><span class="n">token</span><span class="o">-</span><span class="n">header</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="n">trace</span><span class="o">-</span><span class="n">token</span><span class="o">-</span><span class="n">header</span><span class="o">-</span><span class="n">name</span> <span class="k">=</span> <span class="s">&quot;X-Trace-Token&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3.启动项目</h4>

<p>play运行时环境分为dev环境和prod环境。
因为Kamon-Play使用AspectJ在类加载加载的时候进行织入，AspectJ会使用自己的类加载器，
而运行在dev环境的Play项目因为要实现热加载，所以dev环境不能使用AspectJ。
prod一般会会使用dist命令将项目打包，可用以下方式启动（假设项目名是shop，并且已cd进入打包后的目录）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="o">./</span><span class="n">bin</span><span class="o">/</span><span class="n">shop</span> <span class="o">-</span><span class="n">J</span><span class="o">-</span><span class="n">javaagent</span><span class="k">:</span><span class="kt">lib/org.aspectj.aspectjweaver-</span><span class="err">1</span><span class="kt">.</span><span class="err">8</span><span class="kt">.</span><span class="err">1</span><span class="kt">.jar</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动之后随便访问你项目几个页面，然后访问127.0.0.1，如果一切正常就可以看到数据了。</p>

<h3>6.总结</h3>

<p>恭喜，如果做到这一步，你就已经初步的搭好你们运维系统的架子了。
如果你的应用比较简单，对性能要求也不高，到这一步就可以结束了。
不过，大多数的应用都对统计数据有更进一步的分析需求，例如绘制响应时间超过某一阀值（例如100ms）的饼状图，
或者绘制日注册人数的直方图。
这就需要你手动调用Kamon的API来记录数据了，不过这相当的简单。
如果需要设计其他的Grafana图表，需要对Graphite的函数比较熟悉。</p>

<p>另外，如果应用对性能很敏感，不推荐使用AspectJ。因为LTW（Load Time Weaving）会有一些性能损耗。
我们的项目最开始是使用的Kamon-Play和Kamon-Akka，不过后来测试发现响应时间平均要增加10%-20%，
现在已经改成直接调用Kamon API完成记录。</p>

<p>Enjoy!</p>

<h3>7.附启动和停止脚本</h3>

<h4>1.启动脚本 start_stats.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="o">#!/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span>
</span><span class='line'>
</span><span class='line'><span class="n">export</span> <span class="nc">GRAPHITE_STORAGE_DIR</span><span class="o">=</span><span class="err">&#39;</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">graphite</span><span class="o">/</span><span class="n">storage</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">export</span> <span class="nc">GRAPHITE_CONF_DIR</span><span class="o">=</span><span class="err">&#39;</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">graphite</span><span class="o">/</span><span class="n">conf</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">nohup</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">graphite</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">carbon</span><span class="o">-</span><span class="n">cache</span><span class="o">.</span><span class="n">py</span> <span class="o">--</span><span class="n">debug</span> <span class="n">start</span> <span class="o">&gt;</span> <span class="o">~/</span><span class="n">logs</span><span class="o">/</span><span class="n">kamon</span><span class="o">/</span><span class="n">carbon</span><span class="o">.</span><span class="n">out</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span> <span class="o">&amp;</span>
</span><span class='line'><span class="n">export</span> <span class="nc">PYTHONPATH</span><span class="o">=</span><span class="err">&#39;</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">graphite</span><span class="o">/</span><span class="n">webapp</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">nohup</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">gunicorn_django</span> <span class="o">-</span><span class="n">b127</span><span class="o">.</span><span class="mf">0.0</span><span class="o">.</span><span class="mi">1</span><span class="k">:</span><span class="err">8000</span> <span class="kt">-w2</span> <span class="kt">/opt/graphite/webapp/graphite/settings.py</span>  <span class="kt">&gt;</span> <span class="kt">~/logs/kamon/graphite.out</span> <span class="err">2</span><span class="kt">&gt;&amp;</span><span class="err">1</span> <span class="kt">&amp;</span>
</span><span class='line'><span class="n">nohup</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">node</span> <span class="o">~/</span><span class="n">src</span><span class="o">/</span><span class="n">statsd</span><span class="o">/</span><span class="n">stats</span><span class="o">.</span><span class="n">js</span> <span class="o">~/</span><span class="n">src</span><span class="o">/</span><span class="n">statsd</span><span class="o">/</span><span class="n">config</span><span class="o">.</span><span class="n">js</span>  <span class="o">&gt;</span> <span class="o">~/</span><span class="n">logs</span><span class="o">/</span><span class="n">kamon</span><span class="o">/</span><span class="n">graphite</span><span class="o">.</span><span class="n">out</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span> <span class="o">&amp;</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">init</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">elasticsearch</span> <span class="n">start</span>
</span><span class='line'><span class="n">cd</span> <span class="o">~/</span><span class="n">src</span><span class="o">/</span><span class="n">dashboards</span>
</span><span class='line'><span class="n">nohup</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">node</span> <span class="n">dashboard</span><span class="o">-</span><span class="n">loader</span><span class="o">.</span><span class="n">js</span> <span class="n">system</span><span class="o">-</span><span class="n">metrics</span><span class="o">.</span><span class="n">json</span>  <span class="n">welcome</span><span class="o">.</span><span class="n">json</span>   <span class="o">&gt;</span> <span class="o">~/</span><span class="n">logs</span><span class="o">/</span><span class="n">kamon</span><span class="o">/</span><span class="n">grafana</span><span class="o">.</span><span class="n">out</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span> <span class="o">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.停止脚本 stop_stats.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="o">#!/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span>
</span><span class='line'>
</span><span class='line'><span class="n">pkill</span> <span class="n">carbon</span>
</span><span class='line'><span class="n">pkill</span> <span class="n">gunicorn_django</span>
</span><span class='line'><span class="n">pkill</span> <span class="n">statsd</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">init</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">elasticsearch</span> <span class="n">stop</span>
</span><span class='line'><span class="n">kill</span> <span class="n">$</span><span class="o">(</span><span class="n">ps</span> <span class="n">aux</span> <span class="o">|</span> <span class="n">grep</span> <span class="-Symbol">&#39;node</span> <span class="n">dashboard</span><span class="o">-</span><span class="n">loader</span><span class="o">.</span><span class="n">js</span><span class="err">&#39;</span> <span class="o">|</span> <span class="n">awk</span> <span class="err">&#39;</span><span class="o">{</span><span class="n">print</span> <span class="n">$2</span><span class="o">}</span><span class="err">&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
