<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[skaka的博客]]></title>
  <link href="http://skaka.me/atom.xml" rel="self"/>
  <link href="http://skaka.me/"/>
  <updated>2016-09-01T01:10:22+08:00</updated>
  <id>http://skaka.me/</id>
  <author>
    <name><![CDATA[skaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[微服务框架Spring Cloud介绍 Part4: 使用Eureka, Ribbon, Feign实现REST服务客户端]]></title>
    <link href="http://skaka.me/blog/2016/08/25/springcloud4/"/>
    <updated>2016-08-25T19:52:31+08:00</updated>
    <id>http://skaka.me/blog/2016/08/25/springcloud4</id>
    <content type="html"><![CDATA[<p>在<a href="http://skaka.me/blog/2016/08/10/springcloud3/">上一篇文章</a>中我们开发了一个用户注册服务. 这篇文章我将介绍如何开发mysteam订单服务中的下单功能,
下单功能会涉及服务之间的交互与事件的处理, 并且我会对开发过程中用到的框架和类库进行简单地讲解. 开始写代码之前, 我们先来看看下单的处理流程:
<img src="http://skaka.me/images/custom/20160825/place_order.png"></p>

<p>其中1,2,3,4,11步的黑色箭头代表是同步操作, 5,6,7,8,9,10步是异步操作.
下单接口接收要订购的产品ID, 数量和要使用的优惠券ID, 然后调用产品服务的接口查询产品信息, 调用优惠券接口校验优惠券是否有效,
以及调用账户接口判断账户金额是否足够(mysteam是一个虚拟物品商城, 采用先充值后购买的形式). 如果这些校验都成功, 订单服务会发送账户扣款事件和优惠券使用事件到MQ,
账户服务和优惠券服务会从MQ读取事件进行处理, 如果处理成功, 订单服务将能接收到结果, 并且将订单状态置为<code>下单成功</code>, 如果处理失败或超时, 订单状态会被置为<code>下单失败</code>.</p>

<h4>1. 实现Model</h4>

<p>流程清楚了, 现在我们来看代码. 订单类是<code>$YOUR_PATH/mysteam/order/core/src/main/java/com/akkafun/order/domain/Order.java</code>, 订单类和前面的用户类类似, 其中有两个字段需要注意一下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Column</span>
</span><span class='line'><span class="nd">@Enumerated</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">EnumType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="n">OrderStatus</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@OneToMany</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="n">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">mappedBy</span> <span class="o">=</span> <span class="s">&quot;order&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OrderItem</span><span class="o">&gt;</span> <span class="n">orderItemList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>OrderStatus是一个枚举, 表示订单状态. OrderItem是订单项.</p>

<!-- more -->


<h4>2. 实现DAO</h4>

<p>DAO层基本没有实际的代码, 就不贴了.</p>

<h4>3. 实现Service</h4>

<p>下单的业务逻辑都在service内, 打开<code>$YOUR_PATH/mysteam/order/core/src/main/java/com/akkafun/order/service/OrderService.java</code>, 找到<code>placeOrder</code>方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 下订单</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param placeOrderDto</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Order</span> <span class="nf">placeOrder</span><span class="o">(</span><span class="n">PlaceOrderDto</span> <span class="n">placeOrderDto</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//#1</span>
</span><span class='line'>    <span class="c1">//查询产品信息</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">productIds</span> <span class="o">=</span> <span class="n">placeOrderDto</span><span class="o">.</span><span class="na">getPlaceOrderItemList</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">PlaceOrderItemDto:</span><span class="o">:</span><span class="n">getProductId</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">ProductDto</span><span class="o">&gt;</span> <span class="n">productDtoList</span> <span class="o">=</span> <span class="n">productGateway</span><span class="o">.</span><span class="na">findProducts</span><span class="o">(</span><span class="n">productIds</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//#2</span>
</span><span class='line'>    <span class="c1">//查询优惠券信息</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">OrderCoupon</span><span class="o">&gt;</span> <span class="n">orderCouponList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">couponIdSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">placeOrderDto</span><span class="o">.</span><span class="na">getCouponIdList</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">couponIdSet</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//#2</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">CouponDto</span><span class="o">&gt;</span> <span class="n">couponDtoList</span> <span class="o">=</span> <span class="n">couponGateway</span><span class="o">.</span><span class="na">findCoupons</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">couponIdSet</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">orderCouponList</span> <span class="o">=</span> <span class="n">couponDtoList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">couponDto</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">OrderCoupon</span> <span class="n">orderCoupon</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">OrderCoupon</span><span class="o">();</span>
</span><span class='line'>            <span class="n">orderCoupon</span><span class="o">.</span><span class="na">setCouponAmount</span><span class="o">(</span><span class="n">couponDto</span><span class="o">.</span><span class="na">getAmount</span><span class="o">());</span>
</span><span class='line'>            <span class="n">orderCoupon</span><span class="o">.</span><span class="na">setCouponCode</span><span class="o">(</span><span class="n">couponDto</span><span class="o">.</span><span class="na">getCode</span><span class="o">());</span>
</span><span class='line'>            <span class="n">orderCoupon</span><span class="o">.</span><span class="na">setCouponId</span><span class="o">(</span><span class="n">couponDto</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">orderCoupon</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//#3</span>
</span><span class='line'>    <span class="c1">//计算订单金额</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">couponAmount</span> <span class="o">=</span> <span class="n">orderCouponList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToLong</span><span class="o">(</span><span class="nl">OrderCoupon:</span><span class="o">:</span><span class="n">getCouponAmount</span><span class="o">).</span><span class="na">sum</span><span class="o">();</span>
</span><span class='line'>    <span class="n">order</span><span class="o">.</span><span class="na">setPayAmount</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">calcPayAmount</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getTotalAmount</span><span class="o">(),</span> <span class="n">couponAmount</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//检验账户余额是否足够</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getPayAmount</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0L</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">balanceEnough</span> <span class="o">=</span> <span class="n">accountGateway</span><span class="o">.</span><span class="na">isBalanceEnough</span><span class="o">(</span><span class="n">placeOrderDto</span><span class="o">.</span><span class="na">getUserId</span><span class="o">(),</span> <span class="n">order</span><span class="o">.</span><span class="na">getPayAmount</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(!</span><span class="n">balanceEnough</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">AppBusinessException</span><span class="o">(</span><span class="n">CommonErrorCode</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">,</span> <span class="s">&quot;下单失败, 账户余额不足&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//#4</span>
</span><span class='line'>    <span class="n">eventBus</span><span class="o">.</span><span class="na">ask</span><span class="o">(</span>
</span><span class='line'>            <span class="n">AskParameterBuilder</span><span class="o">.</span><span class="na">askOptional</span><span class="o">(</span><span class="n">askReduceBalance</span><span class="o">,</span> <span class="n">askUseCoupon</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">callbackClass</span><span class="o">(</span><span class="n">OrderCreateCallback</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">addParam</span><span class="o">(</span><span class="s">&quot;orderId&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getId</span><span class="o">()))</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">build</span><span class="o">()</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">order</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码略长, 我略过了其中一部分代码. <code>placeOrder</code>方法主要做的事情有:<br/>
1.根据订购的产品ID, 向产品服务查询产品信息, 并计算订单金额.<br/>
2.如果有使用优惠券, 向优惠券服务查询优惠券是否有效(请求REST接口).<br/>
3.根据订单金额, 向账户服务查询用户余额是否足够(请求REST接口).<br/>
4.如果上述步骤都成功完成, 发送账户扣款事件以及优惠券使用事件(如果有优惠券), 并注册回调方法等待事件结果.<br/>
如果事件处理成功会调用<code>markCreateSuccess</code>方法, 处理失败会调用<code>markCreateFail</code>, <code>markCreateSuccess</code>方法的代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">markCreateSuccess</span><span class="o">(</span><span class="n">Long</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">checkOrderBeforeMarkSuccessOrFail</span><span class="o">(</span><span class="n">orderId</span><span class="o">);</span>
</span><span class='line'>    <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">OrderStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法只是将订单状态置为<code>下单成功</code>, 流程就完成了. <code>markCreateFail</code>处理过程类似, 只不过是将订单状态改为<code>下单失败</code>.</p>

<p>看到这里, 先不去管服务调用的实现细节, 细心的你可能会产生一些疑问:<br/>
1.第4步为什么要使用事件的形式去扣款和处理优惠券, 不能和前面的查询操作一样使用REST接口来处理吗?<br/>
2.为什么要先查询用户余额是否足够, 再发送扣款事件, 直接发送扣款事件不好吗? 如果查询余额返回成功之后, 其他业务修改了余额, 处理扣款事件的时候余额不足怎么办?<br/>
3.第4步同时发送了扣款事件和优惠券使用事件, 如果扣款成功了, 但是优惠券使用失败了怎么处理?</p>

<p>其实这些问题都指向同一个问题域: 分布式事务. 分布式事务是开发微服务首先要解决的问题.
分布式事务是一个很大的话题, 这里我只简单介绍一下eBay的Dan Pritchard提出的BASE原则:<br/>
基本可用(Basically Available)<br/>
软状态(Soft state)<br/>
最终一致(Eventually consistent)</p>

<p>BASE其实和传统数据库的ACID是两个不同的思想, 以我们上面的订单系统为例. 订单服务向账户服务发送扣款事件, 账户服务接收到事件并且处理成功, 但是还没有将处理结果发送到订单服务,
这时候系统数据就处于短暂的不一致状态: 用户的账户余额已经被扣减掉了, 但是订单状态还是<code>正在下单</code>. 过了一段时间, 订单服务获取到扣款事件的处理结果并且将订单状态置为<code>下单成功</code>.
这个时候系统才达到最终一致的状态. 这种事务处理方法并不是适用于所有业务, 如果需要强一致性, 还是得使用2PC或者3PC来完成.</p>

<p>了解了mysteam的事务处理原则, 我们回头看看刚才提出的3个问题:<br/>
1.mysteam是使用事件的方式来进行事务处理的, REST接口一般只用来实现查询或者其他不需要事务的操作. 所以只要涉及到数据修改, 一般都通过事件来完成.<br/>
2.发送扣款之前先查询余额是为了减少不必要的事件操作, 因为如果事件处理失败会涉及到事件撤销, 是比较耗时的操作, 先进行余额查询, 余额不足直接流程就中止了.
根据我们的经验, 一般来说查询余额成功后续扣款失败的几率比较小, 所以收益大于付出.
3.这涉及到事件的撤销处理. 在mysteam的订单服务中, 如果接收到了扣款成功和优惠券使用失败这两个事件结果, 订单服务会启动事件撤销流程, 向账户服务发送扣款撤销事件, 并且将订单状态置为下单失败.</p>

<p>综上, mysteam的事务处理遵循BASE, 实现方式是使用事件. 关于事务的其他细节以及事件如何实现, 我后面会用单独的文章来介绍.
这里我们先回到本篇的主题, 如何调用REST接口. 在这里, 我先简单介绍一下Eureka, Ribbon和Feign这三个组件.<br/>
<strong><a href="https://github.com/Netflix/eureka">Eureka</a></strong>: 服务注册中心. 我们的REST服务在启动的时候会将自己的地址注册到Eureka,
其他需要该服务的应用会请求Eureka进行服务寻址, 得到目标服务的ip地址之后就会使用该地址直连目标服务.<br/>
<strong><a href="https://github.com/Netflix/ribbon">Ribbon</a></strong>: 客户端负载均衡类库. 当客户端请求的目标服务存在多个实例时, Ribbon会将请求分散到各个实例. 一般会结合Eureka一起使用.<br/>
<strong><a href="https://github.com/OpenFeign/feign">Feign</a></strong>: HTTP客户端类库. 我们使用Feign提供的注解编写HTTP接口的客户端代码非常简单, 只需要声明一个Java接口加上少量注解就完成了.</p>

<p>接下来我们看代码实例. 以账户服务的接口为例, 之前我们在<code>placeOrder</code>方法内查询账户余额的代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">boolean</span> <span class="n">balanceEnough</span> <span class="o">=</span> <span class="n">accountGateway</span><span class="o">.</span><span class="na">isBalanceEnough</span><span class="o">(</span><span class="n">placeOrderDto</span><span class="o">.</span><span class="na">getUserId</span><span class="o">(),</span> <span class="n">order</span><span class="o">.</span><span class="na">getPayAmount</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开<code>$YOUR_PATH/mysteam/order/core/src/main/java/com/akkafun/order/service/gateway/AccountGateway.java</code>, 代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AccountGateway</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">AccountGateway</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="n">AccountClient</span> <span class="n">accountClient</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@HystrixCommand</span><span class="o">(</span><span class="n">ignoreExceptions</span> <span class="o">=</span> <span class="n">RemoteCallException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBalanceEnough</span><span class="o">(</span><span class="n">Long</span> <span class="n">userId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">accountClient</span><span class="o">.</span><span class="na">checkEnoughBalance</span><span class="o">(</span><span class="n">userId</span><span class="o">,</span> <span class="n">amount</span><span class="o">).</span><span class="na">isSuccess</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>AccountClient是一个加了Feign注解的接口:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">AccountUrl</span><span class="o">.</span><span class="na">SERVICE_HOSTNAME</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AccountClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">AccountUrl</span><span class="o">.</span><span class="na">CHECK_ENOUGH_BALANCE</span><span class="o">)</span>
</span><span class='line'>    <span class="n">BooleanWrapper</span> <span class="nf">checkEnoughBalance</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&quot;userId&quot;</span><span class="o">)</span> <span class="n">Long</span> <span class="n">userId</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;balance&quot;</span><span class="o">)</span> <span class="n">Long</span> <span class="n">balance</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@FeignClient</code>注解需要声明一个service id, 这个service id就是我们在YAML配置文件中配的<code>spring.application.name</code>的值, 比如<code>account.yml</code>中的<code>spring.application.name</code>值是<code>account</code>.
我们请求的REST接口需要一个url路径参数userId, 以及一个查询参数balance. 我们在代码中不需要直接调用Ribbon的代码, Feign会帮我们处理好一切.
根据我们的<code>AccountClient</code>接口声明, Feign会在Spring容器启动之后, 将生成的代理类注入<code>AccountGateway</code>,
所以我们不需要写HTTP调用的实现代码就能完成REST接口的调用.</p>

<p>到这里下单的逻辑就完成了. 我们知道在分布式环境下, 服务之间的依赖都是脆弱而且不稳定的, 极有可能因为一个服务实例的延迟或宕机造成所有服务不可用.
所以mysteam中引入了hystrix. 细心的同学可能已经在<code>AccountGateway</code>中发现<code>@HystrixCommand</code>注解了, 下篇文章我将介绍hystrix的基本用法, 以及如何使用hystrix board和turbine来监控hystrix服务.</p>

<p>对这篇博客或者这个系列有问题的同学欢迎留言讨论: )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Spring Cloud介绍 Part3: Mysteam项目结构与开发用户注册服务]]></title>
    <link href="http://skaka.me/blog/2016/08/10/springcloud3/"/>
    <updated>2016-08-10T10:06:10+08:00</updated>
    <id>http://skaka.me/blog/2016/08/10/springcloud3</id>
    <content type="html"><![CDATA[<p>在<a href="http://skaka.me/blog/2016/08/04/springcloud2/">上一篇文章</a>中我们简单的了解了一下Spring Cloud.
因为Spring Cloud相关的内容较多, 所以我建了一个项目mysteam来演示Spring Cloud的使用, <a href="https://github.com/sunnykaka/mysteam">GitHub地址</a>.</p>

<h4>1. 项目结构</h4>

<p>这是一个Maven项目, 下载下来之后直接导入IDE, 你会看到如下的项目结构(我用的是Intellij IDEA):
<img src="http://skaka.me/images/custom/20160810/mysteam_structure.png"></p>

<p>普通目录:<br/>
docs: 存放文档资料, 例如数据库脚本, astah文件(UML工具)等.<br/>
logs: 运行日志存放目录.<br/>
公共模块:<br/>
apiutils: api模块公共父模块.<br/>
common: 服务模块公共父模块, 存放微服务共同依赖的逻辑, 例如事件处理, 定时任务等.<br/>
utils: 工具类模块.<br/>
基础服务模块:<br/>
eureka: eureka服务. 提供服务注册与服务发现. 这个服务之后会有专门的文章来介绍.<br/>
config: config服务. 提供配置管理服务. 这个服务之后会有专门的文章来介绍.<br/>
turbine: hystrix服务监控. 这个服务之后会有专门的文章来介绍.<br/>
服务模块:<br/>
account: 账户服务.<br/>
coupon: 优惠券服务.<br/>
order: 订单服务.<br/>
product: 产品服务.<br/>
user: 用户服务.<br/>
其他模块:<br/>
integration-test: 集成测试模块.</p>

<p>这些模块内部的项目结构大多类似, 以服务模块user为例.<br/>
api: api接口模块. 其他依赖user服务的服务会依赖这个模块.<br/>
core: user服务实现模块.<br/>
api和core模块内容都是标准的maven项目结构, 其中core模块主要有这么一些子目录:<br/>
context: 存放Spring Boot启动类.<br/>
dao: DAO层.<br/>
domain: Model层.
service: Service层.<br/>
web: 存放Spring MVC Controller.</p>

<p>值得特别说明的是, 在真实的项目中, 一般每个服务都是一个独立的项目, 彼此之间只是通过pom引用. 如果代码都放到一个项目中,
过一段时间你会发现每次打开IDE都是件痛苦的事情, 而且IDE运行速度会奇慢无比. 这样做也违背了微服务开发的本意: 各个服务之间相对独立.
mysteam把所有的服务都放到一个项目中只是为了方便演示和运行. 如果你想将mysteam的模块都拆到独立项目中去也是相当的简单, 只要修改pom文件即可.</p>

<p>好了, 项目结构介绍完, 接下来我们要做点正事了: ) 实现用户注册服务.</p>

<h4>2. 实现Model</h4>

<p>用户表的结构相当简单, 只有三个字段. sql文件在<code>$YOUR_PATH/mysteam/user/docs/user-service.sql</code>. 我们首先创建实体类.
文件位置在<code>$YOUR_PATH/mysteam/user/core/src/main/java/com/akkafun/user/domain/User.java</code>.</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;user&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="n">VersionEntity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Id</span>
</span><span class='line'>    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Column</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Column</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实体类很简单, 使用的是JPA注解, 继承抽象基类VersionEntity来获得乐观锁控制功能.</p>

<h4>3. 实现DAO</h4>

<p>DAO层使用的是<a href="http://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/">Spring Data JPA</a>,<br/>
目录在<code>$YOUR_PATH/mysteam/user/core/src/main/java/com/akkafun/user/dao</code>, DAO相对简单也不是重点, 这里就不介绍了.</p>

<h4>4. 实现Service</h4>

<p>Service类是<code>$YOUR_PATH/mysteam/user/core/src/main/java/com/akkafun/user/service/UserService.java</code>, 我们看一下用户注册的业务逻辑:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="n">User</span> <span class="nf">register</span><span class="o">(</span><span class="n">RegisterDto</span> <span class="n">registerDto</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">isUsernameExist</span><span class="o">(</span><span class="n">registerDto</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()))</span> <span class="o">{</span>                         <span class="c1">//1</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AppBusinessException</span><span class="o">(</span><span class="n">UserErrorCode</span><span class="o">.</span><span class="na">UsernameExist</span><span class="o">,</span>
</span><span class='line'>                <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;用户名%s已存在&quot;</span><span class="o">,</span> <span class="n">registerDto</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">();</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">registerDto</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">PasswordHash</span><span class="o">.</span><span class="na">createHash</span><span class="o">(</span><span class="n">registerDto</span><span class="o">.</span><span class="na">getPassword</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">GeneralSecurityException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;创建哈希密码的时候发生错误&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AppBusinessException</span><span class="o">(</span><span class="s">&quot;用户注册失败&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">userRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>                                                                  <span class="c1">//2</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//用户创建事件</span>
</span><span class='line'>    <span class="n">eventBus</span><span class="o">.</span><span class="na">publish</span><span class="o">(</span><span class="k">new</span> <span class="nf">UserCreated</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getCreateTime</span><span class="o">()));</span>  <span class="c1">//3</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isUsernameExist</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">isUsernameExist</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1.注册之前首先判断用户名是否存在, 判断逻辑在UserRepositoryImpl类里. 如果用户名重复就抛出异常.<br/>
2.调用DAO的save方法持久化用户到数据库.<br/>
3.发送用户创建事件.</p>

<p>注意register方法上有<code>@Transactional</code>注解, 代表事务边界是在service层. register方法构成一个事务, 包括事件发送.
关于事件处理后续有专门的文章介绍, 这里先略过.</p>

<h4>5. 实现Controller</h4>

<p>现在来看下Controller层的处理. 打开<code>$YOUR_PATH/mysteam/user/core/src/main/java/com/akkafun/user/web/UserController.java</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">produces</span> <span class="o">=</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>                  <span class="c1">//1</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">USER_REGISTER_URL</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">UserDto</span> <span class="nf">register</span><span class="o">(</span><span class="nd">@Valid</span> <span class="nd">@RequestBody</span> <span class="n">RegisterDto</span> <span class="n">registerDto</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">//2</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">registerDto</span><span class="o">);</span>                        <span class="c1">//3</span>
</span><span class='line'>        <span class="n">UserDto</span> <span class="n">userDto</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UserDto</span><span class="o">();</span>
</span><span class='line'>        <span class="n">userDto</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>        <span class="n">userDto</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">userDto</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是一个很普通的Spring MVC Controller.<br/>
1. 我们的Rest服务暂且只提供json数据的请求和响应, 所以在class级别加了一个注解<code>@RequestMapping(produces = MediaType.APPLICATION_JSON_VALUE)</code>.<br/>
2. 注册是POST请求, 我们使用DTO对象RegisterDto来收集数据. 注意RegisterDto是user服务的api模块提供的, 意味着其他依赖了user服务的模块可以直接使用RegisterDto.
RequestBody类使用了<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html">Java Validation</a>注解来校验参数的合法性.<br/>
3. 调用UserService的register方法完成注册, 然后将User实体对象转化成UserDto对象返回.</p>

<h4>6. 运行</h4>

<p>到此就开发完了. 现在我们可以启动user服务来看一下效果(user服务运行在23101端口).<br/>
(<strong>提示: 运行下面的UserApplication之前, 需要先启动Eureka服务和Config服务, 启动方法请参考<a href="http://skaka.me/blog/2016/08/04/springcloud2/">上一篇文章</a>.</strong>)<br/>
打开<code>$YOUR_PATH/mysteam/user/core/src/main/java/com/akkafun/context/web/UserApplication.java</code>, 直接运行main方法.
项目启动之后, 在浏览器访问<a href="http://localhost:23101/swagger-ui.html,">http://localhost:23101/swagger-ui.html,</a> 你应该能看见如下的页面:
<img src="http://skaka.me/images/custom/20160810/user_swagger_ui.png"></p>

<p>这个页面是<a href="http://springfox.github.io/springfox">SpringFox</a>根据我们的Controller类, 自动生成的swagger ui页面.
关于swagger和SpringFox, 之后会有专门的文章来介绍. 这个页面列出了user服务下所有的api信息(暂时只有一个register), 包括url链接, 请求参数, 返回值等,
你也可以在Controller类中加入<code>@ApiOperation</code>这种Swagger注解来对接口进行更详细的描述. 此外, 在这个页面你还可以直接对api进行测试, 例如在registerDto参数栏填入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s">&quot;password&quot;</span><span class="o">:</span> <span class="s">&quot;123456&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;username&quot;</span><span class="o">:</span> <span class="s">&quot;aaa&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后点击下面的Try it out!按钮, 你就能看见服务器的返回结果了.</p>

<p>大功告成. 整个过程除去实体类的话, 真正的业务代码只有几十行. 代码量虽少, 但是我们已经开发了一个完整的注册服务,
服务不但自动生成了完整的API文档, 同时已经能通过Eureka被其他服务调用了(下一篇文章演示).
当然, 这一切都仰仗于Spring Cloud, Netflix OSS, SpringFox, Swagger等一系列开源软件的帮助, 程序员的生产力也因此越来越高.
看着上面的步骤, 你也许会觉得, 开发一个微服务也是相当简单的嘛. 事实上, 我们还没有接触到真正的难点, 因为服务之间还没有交互.
下篇文章我会通过下单服务, 介绍如何进行服务之间的相互调用以及如何处理事件来保证事务完整性.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Spring Cloud介绍 Part2: Spring Cloud与微服务]]></title>
    <link href="http://skaka.me/blog/2016/08/03/springcloud2/"/>
    <updated>2016-08-03T22:09:25+08:00</updated>
    <id>http://skaka.me/blog/2016/08/03/springcloud2</id>
    <content type="html"><![CDATA[<p>之前介绍过<a href="http://skaka.me/blog/2016/03/19/finagle1/">微服务的概念与Finagle框架</a>, 这个系列介绍Spring Cloud.</p>

<p>Spring Cloud还是一个相对较新的框架, 今年(2016)才推出1.0的release版本. 虽然Spring Cloud时间最短, 但是相比我之前用过的Dubbo和Finagle, Spring Cloud提供的功能最齐全.</p>

<p>Spring Cloud完全依赖于Spring Boot, 我先简单介绍下Spring Boot.
<a href="http://projects.spring.io/spring-boot/">Spring Boot</a>是Pivotal在Spring基础上推出的一个支持快速开发的框架. 如果是新项目, 建议基于Spring Boot而不是Spring.
以前使用Spring的项目, 需要自己指定一大堆项目依赖, 例如依赖Spring Core, Spring MVC, Mybatis等等, Spring Boot将这些依赖都模块化好了, 你不再需要自己手动去添加多个依赖项.
另外Spring Boot默认内嵌了一个Servlet容器, 你的页面可以直接通过main方法启动访问了, 不再需要部署到单独的应用服务器中, 这样应用的开发调试都会方便很多.
Spring Boot的这些特点使得它比较适合用来做微服务的基础框架, 但是要开发一个完整的微服务系统可不仅仅是从命令行启动一个web系统这么简单. Pivotal看到了这点, 推出了Spring Cloud.</p>

<p><a href="http://projects.spring.io/spring-cloud/">Spring Cloud</a>基于Spring Boot, 由众多的子项目组成. 例如<a href="http://cloud.spring.io/spring-cloud-config">Spring Cloud Config</a>是一个中心化的配置管理服务,
用来解决微服务环境下配置文件分散管理的难题, <a href="http://cloud.spring.io/spring-cloud-stream">Spring Cloud Stream</a>是一个消息中间件抽象层, 目前支持Redis, Rabbit MQ和Kafka,
<a href="http://cloud.spring.io/spring-cloud-netflix">Spring Cloud Netflix</a>整合了<a href="https://netflix.github.io/">Netflix OSS</a>, 可以直接在项目中使用Netflix OSS.
目前Spring Cloud的子项目有接近20个, 如果要使用Spring Cloud, 务必先将子项目都了解一遍, 得知道哪些功能Spring Cloud已经提供了, 避免团队花费大量时间重复造轮子.</p>

<p>Spring Cloud是伴随着微服务的概念诞生的. 毫无疑问, 微服务真正落地是一项艰巨的任务. 不但是技术的变革, 也是开发方式的转变. 仅仅依靠Dubbo或Spring Cloud开发几个互相调用的服务不能算做是微服务.
一个合格的微服务系统必然包括从设计(从业务层面划分服务, 独立数据库), 到开发(选用合适的架构和工具, 解决CAP问题), 到测试(持续集成, 自动化测试), 到运维(容器化, 服务监控, 服务容错)的一系列解决方案.</p>

<p>我这个系列的博客就是介绍如何借助Spring Cloud和Netflix OSS, 来解决上面提到的问题.
之后的博客主要会涉及下面这些技术:<br/>
<strong>使用eureka和Netflix Ribbon进行服务注册和服务发现</strong><br/>
<strong>使用Spring Cloud Stream, zookeeper和kafka实现分布式事务</strong><br/>
<strong>使用hystrix实现服务隔离, 并且用hystrix dashboard和turbine监控hystrix服务</strong><br/>
<strong>使用Spring MVC和Swagger实现REST API</strong><br/>
<strong>使用Spring Cloud Config实现配置集中管理</strong><br/>
<strong>使用Spring Cloud Sleuth与Zipkin实现服务监控</strong><br/>
&hellip;</p>

<p>内容比较多, 我会分成多篇博客. 我不想泛泛地谈概念, 这样有点无趣, 对实际工作也起不到什么帮助.
我为演示这些技术的使用, 搭建了一个项目: mysteam.
我选择了一个简单的问题域, 电商系统里最基础的下单功能. 围绕下单功能, 系统拆分成了五个服务:<br/>
<strong>用户服务(user service)</strong><br/>
<strong>账户服务(account service)</strong><br/>
<strong>产品服务(product service)</strong><br/>
<strong>优惠券服务(coupon service)</strong><br/>
<strong>订单服务(order service)</strong><br/>
下面是mysteam的架构示意图:
<img src="http://skaka.me/images/custom/20160804/mysteam_arch.png">
我们的关注点主要在Backend Services和MQ, MySQL这一部分. 服务之间通过Rest API和事件进行通信. Rest API主要用来进行一些只读等不需要事务的操作,
涉及事务的操作一般使用事件来完成. 具体怎么做后面有专门的博客来介绍.</p>

<p>首先, 让我们来个Hello World, 先介绍如何将mysteam下载下来并启动.
一旦涉及微服务, 项目结构和环境都会比较复杂, 我已经尽量简化了, 请系好安全带: )</p>

<h4>1. 环境准备</h4>

<p><strong>JDK 8+</strong><br/>
<strong>MySQL</strong><br/>
<strong><a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/0.8.2.2/kafka_2.11-0.8.2.2.tgz">kafka 0.8.22</a></strong><br/>
<strong>zookeeper</strong> (可以下载, 也可以直接使用kafka自带的zookeeper)<br/>
<strong>Intellij IDEA或Eclipse</strong> (这个项目结构比较复杂, IDE能起到很大帮助)</p>

<!-- more -->


<h4>2. 从GitHub上下载项目</h4>

<p>需要下载两个项目:<br/>
<strong><a href="https://github.com/sunnykaka/mysteam">mysteam</a></strong><br/>
<strong><a href="https://github.com/sunnykaka/mysteam-config-repo">mysteam-config-repo</a></strong><br/>
mysteam是主项目, mysteam-config-repo是配置文件存放仓库, 后面讲Spring Cloud Config的时候会用到.</p>

<h4>3. 修改配置文件</h4>

<h6>1. 修改配置文件读取路径</h6>

<p>假设你的mysteam-config-repo项目存放路径是<code>D:/mysteam-config-repo</code>,
打开<code>$YOUR_PATH/mysteam/config/src/main/resources/application.yml</code>, 找到<code>uri: https://github.com/sunnykaka/mysteam-config-repo</code>这一行,
替换为<code>uri: file:///D:/mysteam-config-repo</code>.(如果你是linux系统, 并且mysteam-config-repo项目存放路径是<code>/home/my/mysteam-config-repo</code>,
则改为<code>uri: file:///home/my/mysteam-config-repo</code>).</p>

<h6>2. 修改kafka和zookeeper地址</h6>

<p>打开<code>$YOUR_PATH/mysteam/config/src/main/resources/application.yml</code>, 将<code>brokers: 192.168.239.129:9092,192.168.239.129:9093,192.168.239.129:9094</code>修改成你的
kafka地址, 将<code>zkNodes: 192.168.239.129:2181</code>修改成你的zookeeper地址.
打开<code>$YOUR_PATH/mysteam-config-repo/application.yml</code>, 同样, 将<code>brokers: 192.168.239.129:9092,192.168.239.129:9093,192.168.239.129:9094</code>修改成你的
kafka地址, 将<code>zkNodes: 192.168.239.129:2181</code>修改成你的zookeeper地址.</p>

<h6>3. 修改MySQL数据库地址</h6>

<p>进入<code>$YOUR_PATH/mysteam-config-repo</code>目录, 打开<code>account.yml</code>, <code>coupon.yml</code>, <code>order.yml</code>, <code>product.yml</code>, <code>user.yml</code>这几个文件,
找到<code>datasource</code>的配置, 将数据库的ip地址和端口, 以及用户名和密码修改成你的配置.</p>

<h6>4. 初始化数据库</h6>

<p>数据库初始化文件是<code>$YOUR_PATH/mysteam/docs/init_database.sql</code>. 执行方法(假设你的mysteam目录是<code>D:/mysteam</code>, 数据库在本机3306, 用户名密码都是root):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd D:/mysteam
</span><span class='line'>mysql -uroot -proot &lt; docs/init_database.sql</span></code></pre></td></tr></table></div></figure>


<p>执行完成之后, 进入数据库应该可以看见5个数据库已经初始化好了.</p>

<h4>5. 启动Eureka服务, Config服务, 并运行测试.</h4>

<p>主要介绍如何在IDE中启动服务.
因为Eureka和Config服务被其他服务使用, 所以要首先启动这两个服务. 其中Eureka服务要最先启动.</p>

<h6>1. 启动Eureka服务, 运行在1111端口</h6>

<p>打开<code>$YOUR_PATH/mysteam/eureka/src/main/java/com/akkafun/eureka/EurekaApplication.java</code>, 直接运行main方法.</p>

<h6>2. 启动Config服务, 运行在8888端口.</h6>

<p>打开<code>$YOUR_PATH/mysteam/config/src/main/java/com/akkafun/config/ConfigApplication.java</code>, 直接运行main方法.</p>

<h6>3. 运行EventBusTest测试.</h6>

<p>打开<code>$YOUR_PATH/mysteam/user/core/src/test/java/com/akkafun/common/event/service/EventBusTest.java</code>, 运行junit测试.</p>

<p>这个测试的运行时间稍长, 在我机器上需要3分钟左右. 如果测试全部通过, 代表环境OK了.
如果运行报错, 则检查下前面的步骤看看问题出在哪儿. 特别关注下kafka和zookeeper的服务是不是启动了, 并且ip是否正确.</p>

<p>下一篇我会介绍mysteam的maven项目结构, 以及实现用户注册功能.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Finagle介绍 Part3: 在Finagle中开发基于Thrift协议的应用]]></title>
    <link href="http://skaka.me/blog/2016/05/02/finagle3/"/>
    <updated>2016-05-02T21:32:55+08:00</updated>
    <id>http://skaka.me/blog/2016/05/02/finagle3</id>
    <content type="html"><![CDATA[<p>在<a href="http://skaka.me/blog/2016/05/01/finagle2/">上篇文章</a>中我们开发了一个基于Http协议的echo服务端和客户端.
这篇文章我们将开发一个基于Thrift协议的客户端和服务端.
这两篇文章对应的源代码地址在<a href="https://github.com/sunnykaka/java-finagle-example">Github</a>.
代码中有Java和Scala版本两套版本的实现, 但是这里我只会介绍Java版本.</p>

<p><a href="http://thrift.apache.org/">Thrift</a>最早由Facebook开源, 后被Apache收录成为顶级项目. Thrift严格来说不只是一种协议,
而是一个RPC框架. 使用Thrift, 我们只需要定义好使用的类型和接口声明, Thrift的代码生成工具能够自动为我们生成客户端和服务端代码.
我们现在来看如何在Finagle中使用Thrift.</p>

<p>首先定义一个Thrift的IDL文件, 文件位置在<code>java-finagle-example/src/main/thrift/DemoService.thrift</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>namespace java com.akkafun.service.thrift
</span><span class='line'>
</span><span class='line'>service DemoService {
</span><span class='line'>  string method1();
</span><span class='line'>
</span><span class='line'>  i32 method2(1: i32 a, 2: i32 b);
</span><span class='line'>
</span><span class='line'>  void method3();
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>定义了一个DemoService服务, 这个服务有三个示例方法. <code>namespace</code>的语法是为接口定义一个命名空间(对应Java里的包).
method1没有参数, 方法的返回值类型是字符串. method2有两个参数, a和b, 参数和返回值类型都是int32类型.
method3无参数, 无返回值.</p>

<!--more-->


<p>现在我们来生成代码. Twitter提供了一个开源的工具<a href="https://github.com/twitter/scrooge">Scrooge</a>用来生成Finagle + Thrift的代码.
我们使用Scrooge提供的maven插件用来生成代码. 这个插件的配置可以查看<code>pom.xml</code>, 这里不做介绍.
运行maven命令: <code>mvn clean compile</code>, 生成的代码在<code>java-finagle-example/target/classes/thrift</code>目录下.
这里我们生成的是Scala代码. 虽然Scrooge提供Java代码的生成, 但是实际使用存在bug.
我们需要将这些代码手动拷贝到源代码目录下. 将这些代码拷贝到<code>java-finagle-example/src/main/scala/thrift</code>目录下.</p>

<p>现在我们来实现Thrift服务端代码. 打开<code>java-finagle-example/src/main/java/com/akkafun/finagle/thrift/ThriftServer.java</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThriftServer</span> <span class="kd">implements</span> <span class="n">DemoService</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ListeningServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">Thrift</span><span class="o">.</span><span class="na">serveIface</span><span class="o">(</span><span class="s">&quot;127.0.0.1:8081&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">ThriftServer</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">result</span><span class="o">(</span><span class="n">server</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">method1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;implement method1&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="s">&quot;abc&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">method2</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;implement method2&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">BoxedUnit</span><span class="o">&gt;</span> <span class="nf">method3</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;implement method3&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们使用maven命令生成的Scala代码, 里面有一个DemoService接口. 我们现在要做的事情就是实现这个接口.
我们需要实现DemoService接口声明的三个方法. 上面的实现都只是打印内容和返回简单的值.
实现了这个接口, 接下来我们就可以写启动服务的代码了.
上篇文章中我们启动Http服务器的时候使用的是<code>Http.server</code>相关的方法. 现在启动Thrift服务端可以使用<code>Thrift.serveIface</code>方法.
第一个参数传入监听的ip和端口, 第二个参数传入接口的实现类. 这样服务端的代码就完成了.</p>

<p>Thrift的客户端代码也相当简单. 打开<code>java-finagle-example/src/main/java/com/akkafun/finagle/thrift/ThriftClient.java</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThriftClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">Function1</span><span class="o">&lt;</span><span class="n">Throwable</span><span class="o">,</span> <span class="n">BoxedUnit</span><span class="o">&gt;</span> <span class="n">errorFunc</span> <span class="o">=</span> <span class="n">func</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;error: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DemoService</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&gt;</span> <span class="n">demoService</span> <span class="o">=</span> <span class="n">Thrift</span><span class="o">.</span><span class="na">newIface</span><span class="o">(</span><span class="s">&quot;127.0.0.1:8081&quot;</span><span class="o">,</span> <span class="n">DemoService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">future1</span> <span class="o">=</span> <span class="n">demoService</span><span class="o">.</span><span class="na">method1</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">future2</span> <span class="o">=</span> <span class="n">demoService</span><span class="o">.</span><span class="na">method2</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">BoxedUnit</span><span class="o">&gt;</span> <span class="n">future3</span> <span class="o">=</span> <span class="n">demoService</span><span class="o">.</span><span class="na">method3</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">future1</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">future1</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">errorFunc</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">future2</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">future2</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">errorFunc</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">future3</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">future3</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">errorFunc</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">ready</span><span class="o">(</span><span class="n">future1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">ready</span><span class="o">(</span><span class="n">future2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">ready</span><span class="o">(</span><span class="n">future3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>客户端代码中, 通过调用<code>Thrift.newIface</code>我们构造了一个DemoService的stub.
之后即可对DemoService的方法进行调用. 虽然调用方式看起来很像是本地调用, 实际上还是RPC.
DemoService的服务端实现只是很简单的返回了几个值, 客户端实现只是把返回值打印了出来.现在我们来运行看看.
首先启动ThriftServer类, 然后启动ThriftClient. ThriftClient运行完毕自动结束, 你应该能在ThriftClient的控制台看到如下输出:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">implement</span> <span class="n">method2</span>
</span><span class='line'><span class="n">implement</span> <span class="n">method3</span>
</span><span class='line'><span class="n">implement</span> <span class="n">method1</span>
</span></code></pre></td></tr></table></div></figure>


<p>ThriftServer控制台的输出:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="o">()</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="n">abc</span>
</span></code></pre></td></tr></table></div></figure>


<p>无论是客户端还是服务端, 方法被调用的顺序都是不固定的. 因为客户端的RPC调用是异步执行.</p>

<p>Finagle的开发实战就暂时介绍到这里. 通过前面的介绍你应该能了解到, 使用Finagle开发一个服务是非常的简单.
但是实际的多服务项目中, 几乎不会直接通过ip和端口来访问服务,
而是使用<a href="http://zookeeper.apache.org/">zookeeper</a>或<a href="https://github.com/coreos/etcd">etcd</a>这种注册中心来完成.
下篇文章我会介绍如何将Finagle服务注册到zookeeper中以及如何使用<a href="https://github.com/twitter/zipkin">zipkin</a>来监控Finagle服务.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Finagle介绍 Part2: 在Finagle中开发基于Http协议的应用]]></title>
    <link href="http://skaka.me/blog/2016/05/01/finagle2/"/>
    <updated>2016-05-01T10:17:35+08:00</updated>
    <id>http://skaka.me/blog/2016/05/01/finagle2</id>
    <content type="html"><![CDATA[<p>在<a href="http://skaka.me/blog/2016/03/19/finagle1/">上篇文章</a>中我介绍了Finagle中的Future/Service/Filter.
这篇文章里, 我们将构建一个基于Http协议的echo服务端和客户端, 下篇文章将构建一个基于thrift协议的客户端和服务端.
这两篇文章对应的源代码地址在<a href="https://github.com/sunnykaka/java-finagle-example">Github</a>.
代码中有Java和Scala版本两套版本的实现, 但是这里我只会介绍Java版本.</p>

<p>首先来看echo应用的Server端代码, 打开<code>java-finagle-example/src/main/java/com/akkafun/finagle/Server.java</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="kd">extends</span> <span class="n">Service</span><span class="o">&lt;</span><span class="n">Request</span><span class="o">,</span> <span class="n">Response</span><span class="o">&gt;</span> <span class="o">{</span>                             <span class="c1">//1</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>                                 <span class="c1">//2</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;request: &quot;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getContentString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Response</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">Http11$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span> <span class="n">Status</span><span class="o">.</span><span class="na">Ok</span><span class="o">());</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">setContentString</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getContentString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Server</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Server</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ListeningServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">Http</span><span class="o">.</span><span class="na">server</span><span class="o">().</span>                                      <span class="c1">//3</span>
</span><span class='line'>                <span class="n">withLabel</span><span class="o">(</span><span class="s">&quot;echo-server&quot;</span><span class="o">).</span>
</span><span class='line'>                <span class="n">withTracer</span><span class="o">(</span><span class="n">ZipkinTracer</span><span class="o">.</span><span class="na">mk</span><span class="o">(</span><span class="s">&quot;192.168.99.100&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="mi">9410</span><span class="o">,</span> <span class="n">DefaultStatsReceiver$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">)).</span>
</span><span class='line'>                <span class="n">serve</span><span class="o">(</span><span class="k">new</span> <span class="nf">InetSocketAddress</span><span class="o">(</span><span class="mi">8081</span><span class="o">),</span> <span class="n">service</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">result</span><span class="o">(</span><span class="n">server</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<ol>
<li><p>在Finagle中, 实现一个RPC服务非常简单. 只需要继承Service抽象类, 实现它的apply方法.
Service抽象类有两个类型参数, 第一个类型参数代表的是请求对象, 第二个类型参数代表的是返回对象.
这两个对象的具体类型与Service实现类使用的具体协议有关.
例如我们在echo服务中使用Http协议, 对应的Request类就是<code>com.twitter.finagle.http.Request</code>,
对应的Response类是<code>com.twitter.finagle.http.Response</code>.
如果是thrift协议, 则这两个类型参数在Service实现类中都是<code>scala.Array&lt;scala.Byte&gt;</code>(Array和Byte都是scala中的类, 对应Java中的数组与byte).</p></li>
<li><p>apply方法中, 我们首先使用Response的工厂方法构造一个Response对象. 然后将Request中的请求内容原封不动的设置到Response中,
再将Response设置到Future中返回. 需要最后一步的原因是apply方法的返回值类型是<code>Future&lt;Response&gt;</code>, 但是我们在这个方法中不需要进行异步操作,
所以可以直接使用<code>Future.value(response)</code>将对象包装成Future返回.
另外, 细心的你应该发现了一行比较碍眼的代码: <code>Response.apply(Version.Http11$.MODULE$, Status.Ok())</code>, 其中Version的用法很古怪.
这是Java调用Scala伴生对象的副作用, Scala有一些语法和特性在Java中没有对应的概念, 这种情况下Java调用Scala的代码就会比较晦涩.</p></li>
<li><p>为了启动Service实例, 我们需要构造一个<code>com.twitter.finagle.ListeningServer</code>. <code>withLabel</code>设置服务名称,
<code>withTracer</code>设置监控信息, 这个等后面介绍zipkin的时候在解释. 最后指定端口启动服务.</p></li>
</ol>


<p>现在来看echo应用的Client端代码, 打开<code>java-finagle-example/src/main/java/com/akkafun/finagle/Client.java</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">scala</span><span class="o">.</span><span class="na">compat</span><span class="o">.</span><span class="na">java8</span><span class="o">.</span><span class="na">JFunction</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TimeoutException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Service</span><span class="o">&lt;</span><span class="n">Request</span><span class="o">,</span> <span class="n">Response</span><span class="o">&gt;</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Http</span><span class="o">.</span><span class="na">client</span><span class="o">().</span>                             <span class="c1">//1</span>
</span><span class='line'>                <span class="n">withLabel</span><span class="o">(</span><span class="s">&quot;echo-client&quot;</span><span class="o">).</span>
</span><span class='line'>                <span class="n">withTracer</span><span class="o">(</span><span class="n">ZipkinTracer</span><span class="o">.</span><span class="na">mk</span><span class="o">(</span><span class="s">&quot;192.168.99.100&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="mi">9410</span><span class="o">,</span> <span class="n">DefaultStatsReceiver$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">)).</span>
</span><span class='line'>                <span class="n">newService</span><span class="o">(</span><span class="s">&quot;127.0.0.1:8081&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//create a &quot;Greetings!&quot; request.</span>
</span><span class='line'>        <span class="n">Reader</span> <span class="n">data</span> <span class="o">=</span> <span class="n">Reader$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">.</span><span class="na">fromStream</span><span class="o">(</span>                                       <span class="c1">//2</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ByteArrayInputStream</span><span class="o">(</span><span class="s">&quot;Greetings!&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)));</span>
</span><span class='line'>        <span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">Http11$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Method</span><span class="o">.</span><span class="na">Post$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span> <span class="s">&quot;/&quot;</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="n">responseFuture</span> <span class="o">=</span> <span class="n">Await</span><span class="o">.</span><span class="na">ready</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">request</span><span class="o">));</span>          <span class="c1">//3</span>
</span><span class='line'>        <span class="n">responseFuture</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">response</span> <span class="o">-&gt;</span> <span class="o">{</span>                                     <span class="c1">//4</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;response status: %s, response string: %s&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">response</span><span class="o">.</span><span class="na">status</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">contentString</span><span class="o">()));</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">responseFuture</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;error: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">responseFuture</span><span class="o">.</span><span class="na">ensure</span><span class="o">(</span><span class="n">func</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">service</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="c1">//IDE may complain here, just ignore</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>这部分代码和我们之前的Server类代码很像. 在Server类中, 我们创建了一个Service实例并监听了8081端口,
现在客户端通过newService创建了一个Service的stub.</p></li>
<li><p>这部分代码用来构造一个消息内容为Greetings的Http请求.</p></li>
<li><p><code>service.apply(request)</code>就是一次客户端到服务端的RPC调用. 这个调用的返回值是<code>Future&lt;Response&gt;</code>.<br/>
而<code>service.apply(request)</code>是一个异步操作, 主线程调用这个方法并不会阻塞, 有可能主线程退出了实际调用还没有完成.
所以这里就要用到<code>Await.ready</code>了. <code>Await.ready</code>的作用是等待一个Future执行完成再返回, 是一个同步操作.
通过调用<code>Await.ready</code>我们就能将一个异步操作转化成一个同步操作.</p></li>
<li><p>接下来我们在Future上注册请求成功与失败的回调函数. 请求成功的回调函数中只是简单的打印出响应的消息内容.<br/>
这里有个细节需要说明一下. Future的onSuccess方法需要传入一个Scala的函数特质: <code>scala.Function1[Response, BoxedUnit]</code>.
如果是Java6或7, 我们可以这样实现这个特质:</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">responseFuture</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="k">new</span> <span class="n">AbstractFunction1</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">,</span> <span class="n">BoxedUnit</span><span class="o">&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BoxedUnit</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;response status: %s, response string: %s&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">status</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">contentString</span><span class="o">()));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Java8中, 这种匿名类我们一般会使用Lambda代替, 理想情况下写法是这样:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">responseFuture</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">response</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;response status: %s, response string: %s&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">status</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">contentString</span><span class="o">()));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>可惜的是这种写法编译不会通过, 因为只有符合<code>FunctionalInterface</code>定义的接口才能使用Lambda表达式(什么是<code>FunctionalInterface</code>, 请参考<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html">Javadoc</a>), 而在Scala2.11中, <code>scala.Function1</code>不是一个<code>FunctionalInterface</code>(Scala2.12会兼容Java8). 为了在这里使用Lambda, 我们使用了<a href="https://github.com/scala/scala-java8-compat">scala-java8-compat</a>这个库, 调用<code>scala.compat.java8.JFunction.func</code>方法将一个<code>FunctionalInterface</code>转化成<code>scala.Function1</code>.</p>

<p>可以看出, 在Java中调用Finagle的API不是很方便. 所以Finagle适合以Scala为主, Java为辅的项目. 如果项目全是Java,
则值得为Finagle主要的API写一层Java的适配层, 来屏蔽Java调用Scala代码会出现的一些晦涩代码.</p>

<p>现在我们启动服务端和客户端来看看运行结果.
首先启动Server类, 然后启动Client. Client运行完毕自动结束, 你应该能在Client的控制台看到如下输出:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">response</span> <span class="nl">status:</span> <span class="n">Status</span><span class="o">(</span><span class="mi">200</span><span class="o">),</span> <span class="n">response</span> <span class="nl">string:</span> <span class="n">Greetings</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Server控制台的输出:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="nl">request:</span> <span class="n">Greetings</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Http协议比较适合用于对外提供服务, 并且一般会使用REST. 在Finagle中使用REST可以使用<a href="https://github.com/finagle/finch">Finch</a>库.
这个库轻量小巧, API简单, 提供了一套很方便的对Http消息进行操作的DSL.
如果是内网服务调用, 一般推荐使用结构紧凑, 传输效率高的协议. 比如protocol buffer, thrift或Avro.
Finagle对thrift有很好的支持, 下篇文章我将介绍在Finagle中如何开发thrift应用.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Spring Cloud介绍 Part1: 使用事件和消息队列实现分布式事务]]></title>
    <link href="http://skaka.me/blog/2016/04/21/springcloud1/"/>
    <updated>2016-04-21T11:21:45+08:00</updated>
    <id>http://skaka.me/blog/2016/04/21/springcloud1</id>
    <content type="html"><![CDATA[<p>不同于单一架构应用(Monolith), 分布式环境下, 进行事务操作将变得困难, 因为分布式环境通常会有多个数据源,
只用本地数据库事务难以保证多个数据源数据的一致性.
这种情况下, 可以使用两阶段或者三阶段提交协议来完成分布式事务.但是使用这种方式一般来说性能较差,
因为事务管理器需要在多个数据源之间进行多次等待.
有一种方法同样可以解决分布式事务问题, 并且性能较好, 这就是我这篇文章要介绍的使用事件,本地事务以及消息队列来实现分布式事务.</p>

<p>我们从一个简单的实例入手. 基本所有互联网应用都会有用户注册的功能. 在这个例子中, 我们对于用户注册有两步操作: <br/>
1. 注册成功, 保存用户信息.<br/>
2. 需要给用户发放一张代金券, 目的是鼓励用户进行消费.<br/>
如果是一个单一架构应用, 实现这个功能非常简单: 在一个本地事务里, 往用户表插一条记录, 并且在代金券表里插一条记录, 提交事务就完成了.
但是如果我们的应用是用微服务实现的, 可能用户和代金券是两个独立的服务, 他们有各自的应用和数据库,
那么就没有办法简单的使用本地事务来保证操作的原子性了.
现在来看看如何使用事件机制和消息队列来实现这个需求.(我在这里使用的消息队列是kafka, 原理同样适用于ActiveMQ/RabbitMQ等其他队列)</p>

<p>我们会为用户注册这个操作创建一个事件, 该事件就叫做用户创建事件(USER_CREATED). 用户服务成功保存用户记录后, 会发送用户创建事件到消息队列,
代金券服务会监听用户创建事件, 一旦接收到该事件, 代金券服务就会在自己的数据库中为该用户创建一张代金券.
好了, 这些步骤看起来都相当的简单直观, 但是怎么保证事务的原子性呢? 考虑下面这两个场景:<br/>
1. 用户服务在保存用户记录, 还没来得及向消息队列发送消息之前就宕机了. 怎么保证用户创建事件一定发送到消息队列了?<br/>
2. 代金券服务接收到用户创建事件, 还没来得及处理事件就宕机了. 重新启动之后如何消费之前的用户创建事件?<br/>
这两个问题的本质是: 如何让操作数据库和操作消息队列这两个操作成为一个原子操作.
不考虑2PC, 这里我们可以通过事件表来解决这个问题. 下面是类图.
<img src="http://skaka.me/images/custom/20160421/event_class.png"></p>

<p>EventPublish是记录待发布事件的表. 其中:<br/>
id: 每个事件在创建的时候都会生成一个全局唯一ID, 例如UUID.<br/>
status: 事件状态, 枚举类型. 现在只有两个状态: 待发布(NEW), 已发布(PUBLISHED).<br/>
payload: 事件内容. 这里我们会将事件内容转成json存到这个字段里.<br/>
eventType: 事件类型, 枚举类型. 每个事件都会有一个类型, 比如我们之前提到的创建用户USER_CREATED就是一个事件类型.<br/>
EventProcess是用来记录待处理的事件. 字段与EventPublish基本相同.</p>

<!--more-->


<p>我们首先看看事件的发布过程. 下面是用户服务发布用户创建事件的顺序图.
<img src="http://skaka.me/images/custom/20160421/event_sequence1.png"><br/>
1. 用户服务在接收到用户请求后开启事务, 在用户表创建一条用户记录, 并且在EventPublish表创建一条status为NEW的记录, payload记录的是事件内容, 提交事务.<br/>
2. 用户服务中的定时器首先开启事务, 然后查询EventPublish是否有status为NEW的记录, 查询到记录之后, 拿到payload信息, 将消息发布到kafka中对应的topic.<br/>
发送成功之后, 修改数据库中EventPublish的status为PUBLISHED, 提交事务.</p>

<p>下面是代金券服务处理用户创建事件的顺序图.
<img src="http://skaka.me/images/custom/20160421/event_sequence2.png"><br/>
1. 代金券服务接收到kafka传来的用户创建事件(实际上是代金券服务主动拉取的消息, 先忽略消息队列的实现),
在EventProcess表创建一条status为NEW的记录, payload记录的是事件内容, 如果保存成功, 向kafka返回接收成功的消息.<br/>
2. 代金券服务中的定时器首先开启事务, 然后查询EventProcess是否有status为NEW的记录, 查询到记录之后, 拿到payload信息, 交给事件回调处理器处理, 这里是直接创建代金券记录. 处理成功之后修改数据库中EventProcess的status为PROCESSED, 最后提交事务.</p>

<p>回过头来看我们之前提出的两个问题:<br/>
1. 用户服务在保存用户记录, 还没来得及向消息队列发送消息之前就宕机了. 怎么保证用户创建事件一定发送到消息队列了?<br/>
根据事件发布的顺序图, 我们把创建事件和发布事件分成了两步操作.
如果事件创建成功, 但是在发布的时候宕机了. 启动之后定时器会重新对之前没有发布成功的事件进行发布.
如果事件在创建的时候就宕机了, 因为事件创建和业务操作在一个数据库事务里, 所以对应的业务操作也失败了, 数据库状态的一致性得到了保证.<br/>
2. 代金券服务接收到用户创建事件, 还没来得及处理事件就宕机了. 重新启动之后如何消费之前的用户创建事件?<br/>
根据事件处理的顺序图, 我们把接收事件和处理事件分成了两步操作.
如果事件接收成功, 但是在处理的时候宕机了. 启动之后定时器会重新对之前没有处理成功的事件进行处理.
如果事件在接收的时候就宕机了, kafka会重新将事件发送给对应服务.</p>

<p>通过这种方式, 我们不用2PC, 也保证了多个数据源之间状态的最终一致性.<br/>
和2PC/3PC这种同步事务处理的方式相比, 这种异步事务处理方式具有异步系统通常都有的优点:<br/>
1. 事务吞吐量大. 因为不需要等待其他数据源响应.<br/>
2. 容错性好. A服务在发布事件的时候, B服务甚至可以不在线.<br/>
缺点:<br/>
1. 编程与调试较复杂.<br/>
2. 容易出现较多的中间状态. 比如上面的例子, 在用户服务已经保存了用户并发布了事件, 但是代金券服务还没来得及处理之前,
用户如果登录系统, 会发现自己是没有代金券的. 这种情况可能在有些业务中是能够容忍的, 但是有些业务却不行. 所以开发之前要考虑好.</p>

<p>另外, 上面的流程在实现的过程中还有一些可以改进的地方:<br/>
1. 定时器在更新EventPublish状态为PUBLISHED的时候, 可以一次批量更新多个EventProcess的状态.<br/>
2. 定时器查询EventProcess并交给事件回调处理器处理的时候, 可以使用线程池异步处理, 加快EventProcess处理周期.<br/>
3. 在保存EventPublish和EventProcess的时候同时保存到Redis, 之后的操作可以对Redis中的数据进行, 但是要小心处理缓存和数据库可能状态不一致问题.<br/>
4. 针对Kafka, 因为Kafka的特点是可能重发消息, 所以在接收事件并且保存到EventProcess的时候可能报主键冲突的错误(因为重复消息id是相同的), 这个时候可以直接丢弃该消息.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Finagle介绍 Part1: Future, Service, Filter]]></title>
    <link href="http://skaka.me/blog/2016/03/19/finagle1/"/>
    <updated>2016-03-19T21:33:12+08:00</updated>
    <id>http://skaka.me/blog/2016/03/19/finagle1</id>
    <content type="html"><![CDATA[<p>微服务架构可能是时下最热的一种架构模式了. 这篇系列里, 我想介绍一些常用的微服务框架. 通过学习这些框架,
我们将会了解实现微服务的过程中会遇到哪些问题, 以及这些微服务框架是如何帮助我们解决这些问题的.
所以这是一篇关于微服务实践的系列, 我不会讨论太多概念性的东西. 系列末尾我会给出一些微服务架构相关的链接, 感兴趣的可以参考.</p>

<p>微服务不同于单一架构应用, 是典型的分布式场景, 各服务之间通过IPC进行通信. 实现微服务的过程中, 我们需要解决以下问题:<br/>
1. <strong>服务注册和服务发现.</strong><br/>
2. <strong>根据应用选择合适的通信协议和数据协议.</strong> 例如可以选用thrift, protocol buffer或REST.<br/>
3. <strong>服务负载均衡.</strong> 一个服务一般会部署多个实例. 如果使压力均匀分布是需要考虑的问题.<br/>
4. <strong>服务路由与限流.</strong><br/>
5. <strong>容错处理.</strong> 相对于单机应用, 分布式环境下错误发生的概率会大大提高, 服务宕机, 网络不可用的情况时常发生.<br/>
6. <strong>服务监控.</strong> 各服务实例的性能指标, 例如请求响应时间, 请求并发数量, 以及服务实例的部署数量等.<br/>
7. <strong>事务一致性.</strong> 一般来说这个问题需要我们结合业务自己处理, 框架不会给我们太多帮助.</p>

<p>好的微服务框架应该能帮助我们解决上面的全部或者大部分问题. 这里我选择JVM上比较热门的三个微服务框架: Finagle,
  Spring Cloud(NetflixOSS), Dubbox. 我会从实例入手, 介绍这些框架的使用方式, 特点和适用场景.</p>

<p>首先来看Finagle.
<a href="http://twitter.github.io/finagle">Finagle</a>是Twitter在2011年开源的一款RPC框架, 在国外使用较多,
例如Pinterest, Nest, Tumblr, 感兴趣的可以Google. Finagle有着较为丰富的生态圈, 例如可以使用<a href="https://github.com/finagle/finch">Finch</a>很方便的实现REST, 使用<a href="https://github.com/finagle/finagle-oauth2">Finagle OAuth2</a>实现OAuth认证, 使用<a href="http://twitter.github.io/zipkin/">zipkin</a>实现服务监控. Finagle使用Scala开发, 官方宣称同时支持Scala和Java语言.</p>

<p>学习Finagle的使用之前, 首先要了解Finagle中的三个核心概念: Future, Service, Filter.</p>

<!--more-->


<h3>1. Future</h3>

<p>Finagle使用的Future是<code>com.twitter.util.Future</code>. 由于Future非常实用, 从Scala2.10开始被加入到官方库<code>scala.concureent.Future</code>. Java8中也引入了一个类似的接口<code>java.util.concurrent.CompletableFuture</code>.
Future是对异步操作的抽象, 你可以将Future理解为一个容器, 这个容器包含一个异步操作. 一个Future容器可能处于三个状态中的一种: 异步操作还没有完成, 操作已经完成了并包含了成功结果, 操作失败并包含了异常结果. Future一种很常用的用法是可以注册成功或失败的回调函数, 例如下面的Java代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">responseFuture</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">response</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;response status: %s, response string: %s&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">status</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">contentString</span><span class="o">()));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'><span class="o">}));</span>
</span><span class='line'><span class="n">responseFuture</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;error: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'><span class="o">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>我在<code>responseFuture</code>上注册了一个成功的回调函数和失败的回调函数, 当Future对应的操作完成时, 会简单的打印出结果或异常信息.
Future另外一个十分强大的用法是组合.例如下面的Java代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">Future</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">authenticatedUser</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">authenticate</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
</span><span class='line'> 
</span><span class='line'><span class="n">Future</span><span class="o">&lt;</span><span class="n">Seq</span><span class="o">&lt;</span><span class="n">Tweet</span><span class="o">&gt;&gt;</span> <span class="n">lookupTweets</span> <span class="o">=</span> <span class="n">authenticatedUser</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">user</span> <span class="o">-&gt;</span> <span class="n">Tweet</span><span class="o">.</span><span class="na">findAllByUser</span><span class="o">(</span><span class="n">user</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//#1</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码首先根据email和password获取user对象, 然后获取user对应的所有微博. 我解释下这段代码的执行逻辑.
首先调用<code>User.authenticate(email, password)</code>方法进行用户认证, 返回的对象是Future<User>, 代表这是一个异步操作.
注意我们拿到的是Future<User>, 这个时候我们还没有真正的拿到user对象.
接下来flatMap方法就派上用场了. 在上面代码中, flatMap函数签名应该是这样的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">//Java8中并没有这个函数, 这里只是用来解释概念.</span>
</span><span class='line'><span class="c1">//Java8中CompletableFuture的thenCompose方法类似于flatMap</span>
</span><span class='line'><span class="n">Future</span><span class="o">&lt;</span><span class="n">Seq</span><span class="o">&lt;</span><span class="n">Tweet</span><span class="o">&gt;&gt;</span> <span class="nf">flatMap</span><span class="o">(</span><span class="n">Function</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Seq</span><span class="o">&lt;</span><span class="n">Tweet</span><span class="o">&gt;&gt;)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单来说, flatMap的作用是将<code>Future&lt;A&gt;</code>转换成<code>Future&lt;B&gt;</code>, 在这个例子里, 是将<code>Future&lt;User&gt;</code>转换成<code>Future&lt;Seq&lt;Tweet&gt;&gt;</code>.
通过flatMap这种方式, 我们的代码写起来很像是同步执行的, 但是实际上Future中的操作是由一个叫做Scheduler的组件去执行的,
你可以将Scheduler理解为一个ExecutorService, 即我们的代码是由其他线程异步执行的. 上面的代码中, 当代码执行到<code>#1</code>位置的时候, 其实认证用户和获取微博这两个操作可能并没有真正被执行.</p>

<p>Future与flatMap的概念都来源于函数式编程. 在Haskell中, flatMap叫做绑定(bind), 而Future可以近似看作Monad(单子). 对函数式编程中的Monad感兴趣的朋友可以参考<a href="http://skaka.me/blog/2015/12/19/functor-applicative-monad-scala-haskell/">我之前的文章</a>.</p>

<p>Future还有其他一些很有用的方法, 例如从异常中恢复的rescue方法, 连接多个Future的join方法等, 这里就不展开了.
Future在Finagle中无处不在, Finagle的设计哲理之一就是能异步的尽量异步, 大部分操作都不会阻塞.
例如下面我们要说的Service和Filter, 返回的结果都是Future. 如果你之前主要使用Spring或者Servlet这种技术, 可能刚学习Finagle的时候觉得有些难以理解. 这很正常, 在后面的文章我会详细介绍如何使用Future编程, 你会发现其实这种异步编程习惯与之前相比没有太大的不同.只是ThreadLocal在这种环境下失效了, 不过好在我们有替代品 ：）</p>

<h3>2. Service</h3>

<p>Service是Finagle中的核心概念. Service可以被理解为接收一个Request参数, 返回一个Future对象的函数.
如果定义为Java的抽象类, 原型如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">//Service在Finagle中是用Scala代码定义的, 这里只是用来解释概念.</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Service</span><span class="o">&lt;</span><span class="n">Request</span><span class="o">,</span> <span class="n">Response</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Request</span> <span class="n">r</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果用Spring MVC类比, Finagle的Service就类似于Controller的方法, 可以用来处理客户端的请求.
例如要在Finagle中实现一个Echo服务器, 代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="kd">extends</span> <span class="n">Service</span><span class="o">&lt;</span><span class="n">Request</span><span class="o">,</span> <span class="n">Response</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Response</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">Http11$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span> <span class="n">Status</span><span class="o">.</span><span class="na">Ok</span><span class="o">());</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">setContentString</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getContentString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Server</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Server</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ListeningServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">Http</span><span class="o">.</span><span class="na">server</span><span class="o">().</span>
</span><span class='line'>                <span class="n">withLabel</span><span class="o">(</span><span class="s">&quot;echo-server&quot;</span><span class="o">).</span>
</span><span class='line'>                <span class="n">serve</span><span class="o">(</span><span class="k">new</span> <span class="nf">InetSocketAddress</span><span class="o">(</span><span class="mi">8081</span><span class="o">),</span> <span class="n">service</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">result</span><span class="o">(</span><span class="n">server</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意Service的返回值是Future, 代表操作可以是异步完成的.</p>

<h3>3. Filter</h3>

<p>Finagle Filter类似于Servlet Filter, 可以对Service的请求和响应进行过滤. 不过Finagle Filter使用类型参数明确定义了
输入输出的参数类型, Finagle Filter如果定义为Java的抽象类, 原型如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">//Filter在Finagle中是用Scala代码定义的, 这里只是用来解释概念.</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Filter</span><span class="o">&lt;</span><span class="n">ReqIn</span><span class="o">,</span> <span class="n">RepOut</span><span class="o">,</span> <span class="n">ReqOut</span><span class="o">,</span> <span class="n">RepIn</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>     <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">RepOut</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="n">ReqIn</span> <span class="n">request</span><span class="o">,</span> <span class="n">Service</span><span class="o">&lt;</span><span class="n">ReqOut</span><span class="o">,</span> <span class="n">RepIn</span><span class="o">&gt;</span> <span class="n">service</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于ReqIn, RepOut, ReqOut, RepIn这四个类型参数的定义, 可以参考下图.
<img src="http://skaka.me/images/custom/20160404/finagle_filter.png"></p>

<p>ReqIn和ReqOut分别是Filter的入参和出参, 而RepIn和RepOut则是Service的入参和出参.
我们来看看Filter在代码中的实际用法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="k">val</span> <span class="n">baseService</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Service</span><span class="o">[</span><span class="kt">HttpRequest</span>, <span class="kt">HttpResponse</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'><span class="err">  </span><span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">request</span><span class="k">:</span> <span class="kt">HttpRequest</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'><span class="err">    </span><span class="nc">Future</span><span class="o">(</span><span class="k">new</span> <span class="nc">DefaultHttpResponse</span><span class="o">(</span><span class="nc">HTTP_1_1</span><span class="o">,</span> <span class="nc">OK</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">val</span> <span class="n">authorize</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">RequireAuthorization</span><span class="o">(</span><span class="err">…</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">handleExceptions</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">HandleExceptions</span><span class="o">(...)</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">val</span> <span class="n">decoratedService</span><span class="k">:</span> <span class="kt">Service</span><span class="o">[</span><span class="kt">HttpRequest</span>, <span class="kt">HttpResponse</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'><span class="err">  </span><span class="n">handleExceptions</span> <span class="n">andThen</span> <span class="n">authorize</span> <span class="n">andThen</span> <span class="n">baseService</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们定义了一个Service对象baseService, 两个Filter对象authorize和handleExceptions.
通过filter的andThen方法, 我们能够很简单的将Filter和Service组装到一起,
这有点类似于在web.xml中定义了一个Servlet, 以及两个Filter来拦截针对Servlet的请求.
不过毫无疑问Finagle这种使用方式更加直观, 并且不容易出错.</p>

<p>现在我们已经了解了Finagle的基本概念, 下一篇我将结合实例介绍如何使用Finagle进行开发.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单介绍函数式编程中的Functor(函子)，Applicative(加强版函子)，Monad(单子)]]></title>
    <link href="http://skaka.me/blog/2015/12/19/functor-applicative-monad-scala-haskell/"/>
    <updated>2015-12-19T20:22:10+08:00</updated>
    <id>http://skaka.me/blog/2015/12/19/functor-applicative-monad-scala-haskell</id>
    <content type="html"><![CDATA[<p>如果你是刚接触函数式编程，可能很容易被下面这些术语弄迷惑：Functor(函子)，Applicative(加强版函子)，Monad(单子)。
这些概念不是空穴来风，它们出自范畴论，如果你上网去搜范畴论，可能会找到大篇的术语定义，学术资料，这些资料大多都不是入门友好的。
这里我不会探讨定义，只会介绍这些概念在代码中到底起了什么样的作用，以及怎么样运用它们。</p>

<p>下面的示例代码大部分是Haskell，有一小部分是Java8，不会Haskell完全没关系，你可以把它们看作伪代码，我会对每一段代码进行解释。
这篇文章适合刚刚接触函数式编程的同学。我在刚接触这些概念的时候一头雾水，网上找的资料要么level太高看不懂，
要么直接就blabla给你介绍一大片背景知识了。后来经过长时间的摸爬滚打加实践，我发现这些概念理解起来也不是很困难，所以就想写一篇入门级的介绍。
如果你想要对函数式编程有一定的了解，这些概念你是绕不过去的，特别是Monad，当你发现你理解了Monad的机制，很多看起来不可思议的代码就能理解了。</p>

<p>开始之前，我简单介绍一下类型类(typeclass)和类型构造器的概念。函数式编程中的类型类是定义行为的接口。
如果一个类型是某个类型类的实例，那么这个类型必须实现所有该类型类所定义的行为。不要因为有“类”这个词就把类型类与面向对象中的类混淆，
他们是完全不同的概念。类型构造器能够接收其他类型为参数，创建出新的类型。举个例子，Scala的List即为接收一个类型参数的类型构造器，
当类型参数为Int时，List类型构造器的返回类型为List[Int]，当类型参数为String时，返回类型为List[String]。
与类型构造器相对的概念是值构造器，比如Int(2)。</p>

<h3>1. Functor</h3>

<p>首先看看函子的类型类用代码怎么表示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Haskell中一个函数如果有两个参数一个返回值，写法是这样: a(第一个参数) -&gt; b(第二个参数) -&gt; c(返回值)</span>
</span><span class='line'><span class="kr">class</span> <span class="kt">Functor</span> <span class="n">f</span> <span class="kr">where</span>
</span><span class='line'>  <span class="n">fmap</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>函子的类型类只定义了一个fmap函数: fmap函数接收两个参数，第一个参数是以a为参数，b为返回值的函数；第二个参数类型为f a，fmap的返回值类型为f b.
注意这里的a, b可以为任意类型, f为接收一个类型参数的类型构造器。这样说可能有点抽象，来看一个具体的例子。
已知[]（列表）是一个functor实例，他的fmap函数声明为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">fmap</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>接收一个以a为参数，b为返回值的函数以及元素类型为a的列表，返回元素类型为b的列表。
至此，你能看出functor所抽象的行为吗？你可以从下面两个角度思考fmap:
1. 接受函数和函子值，返回在函子值上映射函数的结果（返回也是函子值）。
2. 接受函数，把该函数从操作普通类型的函数<strong>提升</strong>(lift)为操作函子值的函数。
这就是函子，不难吧？</p>

<!--more-->


<h3>2. Applicative</h3>

<p>Applicative，俗称加强版函子，先来看Applicative类型类的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">class</span> <span class="p">(</span><span class="kt">Functor</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="kt">Applicative</span> <span class="n">f</span> <span class="kr">where</span>
</span><span class='line'>  <span class="n">pure</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">a</span>
</span><span class='line'>  <span class="p">(</span><span class="o">&lt;*&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="n">f</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>多了一个新的元素，先解释下。
<code>class (Functor f) =&gt; Applicative f</code>的意思是约束f类型必须首先是一个Functor(函子)，即如果一个类型是Applicative的实例，
则肯定是Functor的实例。Applicative类型类定义了两个函数：pure和<code>&lt;*&gt;</code>(其实还有一个fmap，
因为Applicative实例肯定是Functor的实例，所以fmap免费提供了)。pure是一个很简单的函数，接收任意类型的值为参数，返回包裹了该值的Applicative值。
<code>&lt;*&gt;</code>函数看起来和fmap有些像，唯一的区别是fmap的第一个参数接收一个普通函数(a -> b)，而<code>&lt;*&gt;</code>的第一个参数为f(a -> b)，
即把普通的函数用Applicative包裹。我们看看列表作为Applicative实例的实现:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="c1">-- Haskell中，列表的写法为[], 例如[1,2,3]是一个元素都为Int的列表</span>
</span><span class='line'><span class="nf">pure</span> <span class="n">x</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;*&gt;</span><span class="p">)</span> <span class="n">fs</span> <span class="n">xs</span> <span class="ow">=</span> <span class="p">[</span><span class="n">f</span> <span class="n">x</span> <span class="o">|</span> <span class="n">f</span> <span class="ow">&lt;-</span> <span class="n">fs</span><span class="p">,</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>pure的实现很简单，把接收的参数值放入列表并返回。<code>&lt;*&gt;</code>的实现稍微复杂点，使用了列表生成式的语法。如果你接触过Python，对这种语法不会陌生，
这段代码如果用命令式语言风格翻译，会是这样:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">f</span> <span class="k">in</span> <span class="nx">fs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="nx">x</span> <span class="k">in</span> <span class="nx">xs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="nx">x</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到此为止，我们应该已经了解Applicative实例的作用了，主要定义了两个行为，第一个行为是接收一个任意值为参数，返回一个函子值，
第二个行为是从一个函子值里取出函数，应用到第二个函子里面的值。那么Applicative有什么实际用处呢，看下面的应用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">[(</span><span class="o">*</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="o">+</span><span class="mi">100</span><span class="p">),</span> <span class="p">(</span><span class="o">+</span><span class="mi">200</span><span class="p">)]</span> <span class="o">&lt;*&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- 输出结果: 0,0,0,101,102,103,201,202,203</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>(*0)</code>是对<code>*</code>函数的部分应用，<code>*</code>是一个二元函数，接收两个参数，返回这两个参数的乘积。<code>(*0)</code>是一个一元函数，接收一个参数，
返回这个参数与0的乘积。第一个列表里面是三个一元函数，分别应用到第二个列表的元素，参照我们之前对列表<code>&lt;*&gt;</code>函数的定义，很容易得出上面的结果。
这种把<code>&lt;*&gt;</code>串起来用的用法叫做Applicative风格，下面是另外几个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">[(</span><span class="o">+</span><span class="p">),</span> <span class="p">(</span><span class="o">*</span><span class="p">)]</span> <span class="o">&lt;*&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&lt;*&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- 输出结果: [4,5,5,6,3,4,6,8]</span>
</span><span class='line'><span class="nf">pure</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="o">&lt;*&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&lt;*&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- 输出结果: [4,5,5,6]</span>
</span></code></pre></td></tr></table></div></figure>


<p>非常好，现在我们能够把应用到普通值的函数应用到函子值上面了。</p>

<h3>3. Monad</h3>

<p>相比Functor和Applicative，Monad的应用更加广泛，Monad可以看作加强版的Applicative，引用&lt;&lt;Haskell趣学指南>>中的句子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="nf">monad是对applicative函子概念的延伸</span><span class="err">，它们提供了下面这个问题的一种解决方案：如果我们有一个带有上下文的值</span><span class="n">m</span> <span class="n">a</span><span class="err">，如何对它应用这样一个函数——取</span>
</span><span class='line'><span class="err">类型为</span><span class="n">a的参数</span><span class="err">，返回带上下文的值？换句话说，怎么对</span><span class="n">m</span> <span class="n">a应用类型为a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b的函数</span><span class="err">？</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种场景非常常见，我们来看Java8的Stream API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">BaseStream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="nf">flatMap</span><span class="o">(</span><span class="n">Function</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">,</span> <span class="o">?</span> <span class="kd">extends</span> <span class="n">Stream</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">R</span><span class="o">&gt;&gt;</span> <span class="n">mapper</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>flatMap方法接收一个函数（这个函数接收T类型的入参，返回Stream<R>）然后在Stream<T>上应用这个函数，返回Stream<R>(暂时不考虑子类问题)。
我们来看看Haskell中的"flatMap"（Haskell中叫做绑定）:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">(</span><span class="o">&gt;&gt;=</span><span class="p">)</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Monad</span> <span class="n">m</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>&gt;&gt;=</code>函数接收两个参数：一个Monad值m a，一个函数（入参为类型a，返回值为Monad值m b），返回值类型为Monad值m b。
这和Java8的flatMap形式上非常相似，其实它们要解决的是相同的问题。
Monad在函数式编程中无处不在，来看看具体的例子。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span> <span class="o">&gt;&gt;=</span> <span class="nf">\</span><span class="n">x</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="o">-</span><span class="n">x</span><span class="p">]</span>
</span><span class='line'><span class="c1">-- 输出结果: [-3,-4,-5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先，列表是一个Monad，对照<code>&gt;&gt;=</code>函数的定义，这里的m就是列表，a就是Int，a -> m b对应的类型就是Int -> [Int]。
上面的逻辑用Java8的flatMap实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Lists来自Guava库</span>
</span><span class='line'><span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">).</span><span class="na">stream</span><span class="o">().</span><span class="na">flatMap</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(-</span><span class="n">x</span><span class="o">).</span><span class="na">stream</span><span class="o">()).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，这里我简单介绍了Functor，Applicative，Monad的概念以及实际应用。如果对这些概念想更进一步了解，可以看看下面的书：<br/>
1. <a href="http://book.douban.com/subject/25803388/">Haskell趣学指南</a><br/>
2. <a href="http://book.douban.com/subject/20488750/">Functional Programming in Scala</a><br/>
3. <a href="http://book.douban.com/subject/1894611/">范畴论</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Java开发者的Play Framework(2.4)介绍 Part3：搭建Play的开发环境]]></title>
    <link href="http://skaka.me/blog/2015/09/13/play3/"/>
    <updated>2015-09-13T10:22:10+08:00</updated>
    <id>http://skaka.me/blog/2015/09/13/play3</id>
    <content type="html"><![CDATA[<h3>1. 开始前的准备</h3>

<p>这篇文章会介绍Play项目开发环境的搭建，以及日常开发的常用命令。进行之前，首先得准备下面的工具：</p>

<p>1.JDK8+<br/>
2.<a href="http://www.scala-lang.org/">Scala 2.11.6+</a><br/>
3.<a href="http://www.scala-sbt.org/">sbt 0.13.7+</a><br/>
4.<a href="https://www.jetbrains.com/idea/">IntelliJ IDEA 14+</a><br/>
5.<a href="http://www.mysql.com/">MySQL 5.5+</a> 或 <a href="https://mariadb.org/">MariaDB 10+</a><br/>
6.<a href="http://redis.io/">Redis 2.7+</a><br/>
7.科学上网工具</p>

<p>这些软件安装都可以参照官方的文档，这里就不介绍了。</p>

<p>推荐使用的IDE是IntelliJ IDEA，如果对Eclipse有执念的也可以考虑用Typesafe维护的<a href="http://scala-ide.org/">ScalaIDE</a>。<br/>
但是在目前看来，IDEA对Scala的支持最好，另外IDEA相比Eclipse也有很多优点，没有尝试过的朋友可以试一下，保证你不会想切回Eclipse了：）</p>

<p>MySQL和Redis是这篇文章的demo项目启动需要的，如果不打算运行项目可以忽略。</p>

<p>另外科学上网工具也是需要的, demo项目的一些包需要连接Google Code仓库获取，而且没有科学上网的话下载速度会奇慢无比，相信我，你没有那么多时间用来浪费的。</p>

<h3>2. 搭建开发环境</h3>

<p>我的操作系统是Ubuntu 14.04，所以下面涉及到命令或文件路径地方，可能都是Linux风格的。如果你的操作系统是Windows或OS X，需要做相应替换。</p>

<!-- more -->


<h4>1. 安装IDEA插件</h4>

<p>打开IDEA之后的第一件事就是要安装Scala插件，这个插件包含了对Scala, sbt, Play的支持。
插件安装方法是点击左上角的Files->Settings->在弹出框的左上角输入plugins->点击弹出框底部靠中间位置的Install Jetbrains Plugins->输入Scala->点击Install。
然后等待下载结束重启即可。注意如果没有翻墙的话下载速度会很慢。</p>

<h4>2. 从Github签出Demo项目</h4>

<p>之前我在Github上创建了一个使用了Play，Spring，JPA的<a href="https://github.com/sunnykaka/awesome-play">脚手架项目</a>，这个项目数据存储使用MySQL和Redis，
使用Bootstrap作为页面框架。我们之后的操作都以这个项目为基础。现在先从Github把项目拿下来，直接使用IDEA的Checkout From Github即可，等待下载完成。下载完成之后，
如果之前的Scala插件安装成功，应该会出现下面这个界面：
<img src="http://skaka.me/images/custom/20150914/play3_1.png">
这里选中sbt，然后点击next，选择合适的路径和JDK8，点击完成即可。之后就是等待IDEA导入项目并且下载依赖就行了。再次提示，需要准备梯子。</p>

<h4>3. 项目结构</h4>

<p><img src="http://skaka.me/images/custom/20150914/play3_2.png"></p>

<ul>
<li>admin：web模块，这个模块是一个标准的Play项目</li>
<li>common：公共模块，存放一些工具类，公用的实体类和服务类</li>
<li>order-center：领域模块，订单中心。系统可以按照限界上下文拆分出来多个领域模块</li>
</ul>


<p>这里演示了sbt多模块项目的使用。我们在划分模块的时候，按照DDD的思想，每一个确定的限界上下文划分为一个领域模块，领域层和服务层的代码都放在领域模块中。
领域模块之间会有依赖关系，而具体的应用会依赖这些领域模块。比如admin是一个Play应用，用来实现管理界面，会依赖order-center这个领域模块。以后如果需要构建其他应用，
比如需要对外提供API服务，只需要再增加一个web模块并且引用需要的领域模块就可以了。这种架构在一定程度上可以减少大泥球带来的维护困难，因此比较适合没有复杂到需要划分
微服务的项目采用。</p>

<ul>
<li>project：sbt构建目录</li>
</ul>


<p>sbt在构建项目的时候会依赖这个目录下面的文件。现在不需要做太多了解，只需要知道这个目录的作用类似于maven的pom.xml即可。</p>

<ul>
<li>admin/app：存放源代码，这个项目中app目录下主要存放Controller代码</li>
<li>admin/conf：存放项目配置文件</li>
<li>admin/public：存放静态资源，比如js和css，图片</li>
<li>admin/test：存放测试代码</li>
</ul>


<p>admin项目结构是一个标准是Play项目结构，因为我们把领域层和服务层的代码都放在了领域模块，所以这个模块中基本上只有展现层的代码，即Controller。</p>

<h4>4. 修改配置与初始化数据库</h4>

<p>这个项目用到了MySQL数据库，所以我们需要初始化数据库，数据库初始化文件位置是docs/test-object.sql。进入MySQL终端（或者你喜欢的MySQL客户端工具），输入下面命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drop database play;
</span><span class='line'>create database play;
</span><span class='line'>source /path/to/docs/test-object.sql -- 换成你自己的路径</span></code></pre></td></tr></table></div></figure>


<p>接下来需要修改项目配置，将MySQL连接信息替换成你自己的。打开admin/conf/application.conf，替换下面的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.default {
</span><span class='line'>  driver = com.mysql.jdbc.Driver
</span><span class='line'>  url = "jdbc:mysql://localhost:3306/play?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull"
</span><span class='line'>  username = root
</span><span class='line'>  password = "root"
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>redis {
</span><span class='line'>  host = 127.0.0.1
</span><span class='line'>  port = 6379
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h4>5. 项目启动</h4>

<p>好了，废话了这么多，现在我们要来启动我们的第一个Play应用了！<br/>
打开命令行，你可以使用操作系统默认的命令行工具或者IDEA的terminal，更好的选择是Ubuntu的Guake或OS X的iTerm2。首先切换到当前项目所在目录，然后输入下面的命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sbt
</span><span class='line'>project admin
</span><span class='line'>run</span></code></pre></td></tr></table></div></figure>


<p>如果一切顺利，你在命令行将看到下面的结果：
<img src="http://skaka.me/images/custom/20150914/play3_3.png"></p>

<p>解释每个命令：<br/>
<strong>sbt</strong>：在项目目录下使用这个命令，sbt会读取项目的配置（主要是项目下的project文件夹和build.sbt文件），然后进入sbt交互模式，之后的命令都是在sbt交互模式下输入的。<br/>
<strong>project admin</strong>：切换到admin子项目。这是一个多模块项目，在sbt中，使用"project 模块名"来切换到对应的模块。<br/>
<strong>run</strong>：Play项目启动有两种模式，开发模式启动(run)和生产模式启动(start)。启动的时候可以指定端口，比如run 9001，默认端口为9000。</p>

<p>现在我们可以打开浏览器访问了。访问<a href="http://localhost:9000/">http://localhost:9000/</a>，看到下面的界面就代表启动成功了。
<img src="http://skaka.me/images/custom/20150914/play3_4.png"></p>

<p>如果访问不了，请查看之前的步骤是否都正确完成。这里要注意，第一次访问页面的时候会很慢，这时你观察命令行可能会看见代码正在进行编译，或者正在打出大量的log。
出现这种情况是因为如果通过run启动（开发模式），启动的时候并不会真正启动应用，而只是监听端口，当发现有第一个请求过来的时候，才会编译业务代码，开始处理流程。</p>

<p>如果你坚持做到这里，恭喜你，你已经准备好了开发环境。接下来我会介绍一些开发和运维过程中会经常使用的命令。</p>

<h4>6. 对项目进行Debug</h4>

<p>如果你之前一直都使用IDE启动项目，你可能会觉得奇怪，为什么要在命令行用sbt启动项目。这是因为IDEA的Scala插件还不能支持多模块项目的Play应用启动，而且通过命令行的方式
也让我们能够对项目的启动有更多控制，比如Debug。因为我们是在命令行通过sbt启动的项目，所以需要用到Java的远程调试功能，即JDWP。我们会在IDEA中启动调试器，
连接被调试的sbt进程。我们首先需要为sbt设置启动参数，如果你的机器是Linux或OS X，可以在~/.bashrc中加入下面的环境变量（Windows可以右键我的电脑添加环境变量）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export SBT_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999"</span></code></pre></td></tr></table></div></figure>


<p>这样sbt每次启动的时候都会监听调试端口9999。这里要注意，加了这个配置后，你不能同时启动多个sbt进程，因为端口会发生冲突。如果需要同时启动多个sbt进程，
就不能加到环境变量里，而是在每次启动的时候指定SBT_OPTS参数。</p>

<p>修改~/.bashrc之后，打开一个新的命令行，启动sbt，你会发现sbt在启动之后会输出一行
<img src="http://skaka.me/images/custom/20150914/play3_5.png"></p>

<p>这样就代表配置成功了。</p>

<p>然后就是在IDEA中启动远程调试，这和远程调试其他Java应用并无不同。在IDEA中点击菜单中的Run->Edit Configurations，在弹出框中点击左上角的“+”号，选择Remote，
在port中输入9999，输入一个你喜欢的名字，点击OK就行了。然后如下图，点击Debug按钮启动就可以了。
<img src="http://skaka.me/images/custom/20150914/play3_6.png"></p>

<p>现在应用可以正确的在断点处停下来。</p>

<h4>7. 部署应用</h4>

<p>现在，我们要谈谈项目部署。以往的Java Web项目在部署的时候一般是需要将打好的war包放入指定目录，然后让应用服务器例如Tomcat在启动的时候加载，比较好的方式是内嵌的应用服务器，
例如Jetty等，不过还是少不了一大堆配置。现在会简单很多。之前在sbt下，我们使用过run命令来启动应用，现在可以用dist命令来打包应用。进入项目所在目录，用下面的命令完成打包：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sbt ";clean ;project admin ;test ;dist"</span></code></pre></td></tr></table></div></figure>


<p>这里是多条命令放在一起执行，注意其中的test会执行该模块测试目录下所有的测试代码，如果不想在打包前运行测试可以把";test"去掉。
打包成功之后的目标文件路径是admin/target/universal/admin-1.0.0-SNAPSHOT.zip，直接将这个zip包拷贝到部署服务器就可以了。假设这个压缩包解压之后的路径是%PATH%，
那么运行%PATH%/bin/admin就能够在生产模式下启动应用了。部署服务器只需要准备JDK环境。</p>

<p>在启动脚本的时候可以指定一些额外参数，例如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/home/admin/shop/bin/shop -J-server -J-Xms2048M -J-Xmx2048M -Dhttp.port=9001 -Dconfig.file=conf/env/test.conf -Dlogger.file=conf/env/test_logger.xml</span></code></pre></td></tr></table></div></figure>


<p>通过-Dconfig.file和-Dlogger.file可以让你在生产环境和测试环境指定不同的配置文件，这会非常有用。</p>

<h4>8. 总结</h4>

<p>这篇文章我介绍了从零开始搭建一个Play开发环境的过程，大家可以看见使用Play框架的一些优点：配置少，开发调试步骤简单，运维友好。但是也引入了一些复杂性：sbt构建工具，
Scala环境。好在只要项目架构搭建好，这些复杂性可以隐藏起来。但是我相信对一个有追求的程序员来说，永远有对新技术和新知识的渴望。下面的链接可供参考：<br/>
<a href="http://www.ybrikman.com/writing/2014/03/10/the-ultimate-guide-to-getting-started/">The Ultimate Guide to Getting Started with the Play Framework</a><br/>
<a href="http://zh.scala-tour.com/">Scala指南</a><br/>
<a href="http://www.infoq.com/cn/articles/scala-technology">快速了解Scala技术栈</a><br/>
<a href="https://github.com/CSUG/real_world_scala/blob/master/02_sbt.markdown">使用SBT构建Scala应用</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Java开发者的Play Framework(2.4)介绍 Part2：使用Play，Spring，JPA进行开发]]></title>
    <link href="http://skaka.me/blog/2015/08/17/play2/"/>
    <updated>2015-08-17T20:19:50+08:00</updated>
    <id>http://skaka.me/blog/2015/08/17/play2</id>
    <content type="html"><![CDATA[<h3>1. 介绍</h3>

<p>这篇文章会使用Play，Spring，JPA（hibernate）开发一个简单的CRUD功能，主要是为了介绍如何使用Play进行开发。</p>

<h3>2. 界面截图</h3>

<p><img src="http://skaka.me/images/custom/20150818/play2_1.png">
<img src="http://skaka.me/images/custom/20150818/play2_2.png">
很简单的新增和查询功能。我们来看看代码如何实现。</p>

<h3>3. 代码实现</h3>

<h4>1. Model</h4>

<p>代码架构使用典型的MVC，分层为Controller-Service-Dao-Model。首先来看Model。</p>

<!-- more -->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//省略了部分字段</span>
</span><span class='line'><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;test_object&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestObject</span> <span class="kd">implements</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;,</span> <span class="n">OperableData</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">orderNo</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 状态</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">TestObjectStatus</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 下单时间</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DateTime</span> <span class="n">buyTime</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObjectItem</span><span class="o">&gt;</span> <span class="n">testObjectItemList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="n">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">mappedBy</span> <span class="o">=</span> <span class="s">&quot;testObject&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObjectItem</span><span class="o">&gt;</span> <span class="nf">getTestObjectItemList</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">testObjectItemList</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTestObjectItemList</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">TestObjectItem</span><span class="o">&gt;</span> <span class="n">testObjectItemList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">testObjectItemList</span> <span class="o">=</span> <span class="n">testObjectItemList</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Id</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;status&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Enumerated</span><span class="o">(</span><span class="n">EnumType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">TestObjectStatus</span> <span class="nf">getStatus</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStatus</span><span class="o">(</span><span class="n">TestObjectStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;buy_time&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Type</span><span class="o">(</span><span class="n">type</span><span class="o">=</span><span class="s">&quot;org.jadira.usertype.dateandtime.joda.PersistentDateTime&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">DateTime</span> <span class="nf">getBuyTime</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">buyTime</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBuyTime</span><span class="o">(</span><span class="n">DateTime</span> <span class="n">buyTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">buyTime</span> <span class="o">=</span> <span class="n">buyTime</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>很普通的Entity，使用JPA注解，唯一需要注意的是在处理枚举类型和Joda DateTime类型的时候用到了不同的类型注解。</p>

<h4>2. Dao</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//省略了部分方法</span>
</span><span class='line'><span class="nd">@Repository</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GeneralDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PersistenceContext</span>
</span><span class='line'>    <span class="n">EntityManager</span> <span class="n">em</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">GeneralDao</span><span class="o">(){}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">GeneralDao</span><span class="o">(</span><span class="n">EntityManager</span> <span class="n">em</span><span class="o">)</span> <span class="o">{</span><span class="k">this</span><span class="o">.</span><span class="na">em</span> <span class="o">=</span> <span class="n">em</span><span class="o">;}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">EntityManager</span> <span class="nf">getEm</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">em</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 使用jpql进行查询</span>
</span><span class='line'><span class="cm">     * @param ql jpql</span>
</span><span class='line'><span class="cm">     * @param page 分页对象,可选</span>
</span><span class='line'><span class="cm">     * @param queryParams 查询参数</span>
</span><span class='line'><span class="cm">     * @param &lt;T&gt;</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">query</span><span class="o">(</span><span class="n">String</span> <span class="n">ql</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">page</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">queryParams</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 使用jpql进行数据更新操作</span>
</span><span class='line'><span class="cm">     * @param ql</span>
</span><span class='line'><span class="cm">     * @param queryParams</span>
</span><span class='line'><span class="cm">     * @return</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="n">String</span> <span class="n">ql</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">queryParams</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="kt">void</span> <span class="nf">persist</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setOperableDataIfNecessary</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">t</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">t</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">T</span> <span class="nf">merge</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">setOperableDataIfNecessary</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">t</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">t</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">t</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">em</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="kt">boolean</span> <span class="nf">removeById</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">t</span> <span class="o">=</span> <span class="n">get</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">remove</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">T</span> <span class="nf">get</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="kt">void</span> <span class="nf">refresh</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">refresh</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">EntityClass</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="kt">void</span> <span class="nf">detach</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里使用的是通用Dao，一般的增删改查操作可以直接通过该Dao完成。可以看出这个Dao只是对JPA的EntityManager一个简单封装，
大部分操作还是委派给EntityManager完成。代码中也可以直接取得EntityManager进行操作。</p>

<h4>3. Service</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//省略了部分方法</span>
</span><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestObjectService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PersistenceContext</span>
</span><span class='line'>    <span class="n">EntityManager</span> <span class="n">em</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="n">GeneralDao</span> <span class="n">generalDao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="nf">findByKey</span><span class="o">(</span><span class="n">Optional</span><span class="o">&lt;</span><span class="n">Page</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;&gt;</span> <span class="n">page</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">orderNo</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">TestObjectStatus</span><span class="o">&gt;</span> <span class="n">status</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Optional</span><span class="o">&lt;</span><span class="n">DateTime</span><span class="o">&gt;</span> <span class="n">createTimeStart</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">DateTime</span><span class="o">&gt;</span> <span class="n">createTimeEnd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CriteriaBuilder</span> <span class="n">cb</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">getCriteriaBuilder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">CriteriaQuery</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">cq</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Root</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">order</span> <span class="o">=</span> <span class="n">cq</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Predicate</span><span class="o">&gt;</span> <span class="n">predicateList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">orderNo</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">predicateList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;orderNo&quot;</span><span class="o">),</span> <span class="n">orderNo</span><span class="o">.</span><span class="na">get</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">createTimeStart</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">predicateList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">greaterThanOrEqualTo</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;createTime&quot;</span><span class="o">),</span> <span class="n">createTimeStart</span><span class="o">.</span><span class="na">get</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">createTimeEnd</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">predicateList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">lessThanOrEqualTo</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;createTime&quot;</span><span class="o">),</span> <span class="n">createTimeEnd</span><span class="o">.</span><span class="na">get</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">predicateList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;status&quot;</span><span class="o">),</span> <span class="n">status</span><span class="o">.</span><span class="na">get</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cq</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">order</span><span class="o">).</span><span class="na">where</span><span class="o">(</span><span class="n">predicateList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">Predicate</span><span class="o">[</span><span class="n">predicateList</span><span class="o">.</span><span class="na">size</span><span class="o">()])).</span><span class="na">orderBy</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;updateTime&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">TypedQuery</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">query</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">cq</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">page</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">CriteriaQuery</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">countCq</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>            <span class="n">countCq</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">count</span><span class="o">(</span><span class="n">countCq</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">))).</span><span class="na">where</span><span class="o">(</span><span class="n">predicateList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">Predicate</span><span class="o">[</span><span class="n">predicateList</span><span class="o">.</span><span class="na">size</span><span class="o">()]));</span>
</span><span class='line'>            <span class="n">Long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="n">countCq</span><span class="o">).</span><span class="na">getSingleResult</span><span class="o">();</span>
</span><span class='line'>            <span class="n">page</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">setTotalCount</span><span class="o">(</span><span class="n">count</span><span class="o">.</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">query</span><span class="o">.</span><span class="na">setFirstResult</span><span class="o">(</span><span class="n">page</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getStart</span><span class="o">());</span>
</span><span class='line'>            <span class="n">query</span><span class="o">.</span><span class="na">setMaxResults</span><span class="o">(</span><span class="n">page</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getLimit</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">page</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">page</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">setResult</span><span class="o">(</span><span class="n">results</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">results</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">TestObject</span> <span class="nf">get</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">generalDao</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>findByKey方法是一个查询方法，这里使用的是JPA的Criteria查询。Service类没有使用接口，只有实现类。Service就是一个Spring管理的Bean，
事务边界在Service层。</p>

<h4>4. Controller</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//省略了部分方法</span>
</span><span class='line'><span class="nd">@org.springframework.stereotype.Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestObjectController</span> <span class="kd">extends</span> <span class="n">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">TestObjectService</span> <span class="n">testObjectService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Result</span> <span class="nf">list</span><span class="o">(</span><span class="n">String</span> <span class="n">status</span><span class="o">,</span> <span class="n">String</span> <span class="n">orderNo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">testObjectList</span> <span class="o">=</span> <span class="n">testObjectService</span><span class="o">.</span><span class="na">findByKey</span><span class="o">(</span><span class="n">of</span><span class="o">(</span><span class="n">PageFactory</span><span class="o">.</span><span class="na">getPage</span><span class="o">(</span><span class="n">request</span><span class="o">())),</span> <span class="n">ofNullable</span><span class="o">(</span><span class="n">orderNo</span><span class="o">),</span>
</span><span class='line'>                <span class="n">ofNullable</span><span class="o">(</span><span class="n">status</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">TestObjectStatus:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">),</span> <span class="n">empty</span><span class="o">(),</span> <span class="n">empty</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nf">ok</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">testObjectList</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Result</span> <span class="nf">addPage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">ok</span><span class="o">(</span><span class="n">add</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">Form</span><span class="o">.</span><span class="na">form</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Result</span> <span class="nf">updatePage</span><span class="o">(</span><span class="n">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">ok</span><span class="o">(</span><span class="n">update</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">Form</span><span class="o">.</span><span class="na">form</span><span class="o">(</span><span class="n">TestObject</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">fill</span><span class="o">(</span><span class="n">testObjectService</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">))));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Controller继承play.mvc.Controller。和SpringMVC一样，在Play中，Controller就是一系列Action的集合。例如我开发用户有关的功能，
那么我就建一个UserController，然后把用户的CRUD方法都放在UserController里，每个方法都有自己的路由规则。这里我们先来看list方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Result</span> <span class="nf">list</span><span class="o">(</span><span class="n">String</span> <span class="n">status</span><span class="o">,</span> <span class="n">String</span> <span class="n">orderNo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">testObjectList</span> <span class="o">=</span> <span class="n">testObjectService</span><span class="o">.</span><span class="na">findByKey</span><span class="o">(</span><span class="n">of</span><span class="o">(</span><span class="n">PageFactory</span><span class="o">.</span><span class="na">getPage</span><span class="o">(</span><span class="n">request</span><span class="o">())),</span> <span class="n">ofNullable</span><span class="o">(</span><span class="n">orderNo</span><span class="o">),</span>
</span><span class='line'>            <span class="n">ofNullable</span><span class="o">(</span><span class="n">status</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">TestObjectStatus:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">),</span> <span class="n">empty</span><span class="o">(),</span> <span class="n">empty</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nf">ok</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">render</span><span class="o">(</span><span class="n">testObjectList</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里list的功能是查询出所有满足条件的测试对象（TestObject对象）。首先来看参数，这里声明了两个查询参数status和orderNo，用来匹配Http请求QueryString中的参数，
这和SpringMVC中声明了RequestParam(&ldquo;status&rdquo;)的参数类似。注意有一点区别，这里的status和orderNo不能捕捉通过Http Body提交的参数，只能匹配QueryString中的参数。</p>

<p>Controller中调用service方法来完成查询，然后将结果返回。方法的返回值声明是play.mvc.Result接口，你可以理解Result的实现类只需要包含两个值：
ResponseHeader和ResponseBody。对于ResponseHeader的设置，这里调用父类的ok方法设置返回的Http状态码为200，对应的还有created 201, notFound 404等方法。
ok方法参数需要传入的就是ResponseBody，参数类型声明为play.twirl.api.Content特质（Scala中的特质类似于Java的接口），你基本上永远不需要去手动构造这个特质的实现，
而是使用Play提供的模板。这里我在views.html.test目录下有一个list.scala.html模板，这个模板文件会被IDE自动编译成views.html.test.list类，类里面有一个render方法来完成模板的渲染，
render方法返回值就是play.twirl.api.Content的子类。所以我在这里可以直接调用list.render(testObjectList)方法来完成模板的渲染。</p>

<p>好了，现在来对照SpringMVC，如果是用SpringMVC的话，这个方法应该是这样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/test/objects&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">)</span>  <span class="c1">//可省略</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">list</span><span class="o">(</span><span class="n">String</span> <span class="n">status</span><span class="o">,</span> <span class="n">String</span> <span class="n">orderNo</span><span class="o">,</span> <span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">TestObject</span><span class="o">&gt;</span> <span class="n">testObjectList</span> <span class="o">=</span> <span class="n">testObjectService</span><span class="o">.</span><span class="na">findByKey</span><span class="o">(</span><span class="n">of</span><span class="o">(</span><span class="n">PageFactory</span><span class="o">.</span><span class="na">getPage</span><span class="o">(</span><span class="n">request</span><span class="o">())),</span> <span class="n">ofNullable</span><span class="o">(</span><span class="n">orderNo</span><span class="o">),</span>
</span><span class='line'>            <span class="n">ofNullable</span><span class="o">(</span><span class="n">status</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">TestObjectStatus:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">),</span> <span class="n">empty</span><span class="o">(),</span> <span class="n">empty</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;testObjectList&quot;</span><span class="o">,</span> <span class="n">testObjectList</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;views/html/test/list&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>细心的你可能已经发现了，Play的版本与SpringMVC的对照，少了一个路由的信息，那么在Play中怎么配置路由呢，请看下节</p>

<h4>5. routes文件（路由）</h4>

<p>在Play中，所有的路由信息都是统一放在一个文件里，即conf/routes文件。上面的list方法路由在routes中对应如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">GET</span>         <span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">objects</span>                     <span class="nd">@controllers.test.TestObjectController.list</span><span class="o">(</span><span class="n">status</span> <span class="o">?=</span> <span class="kc">null</span><span class="o">,</span> <span class="n">orderNo</span> <span class="o">?=</span> <span class="kc">null</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>最左边的GET声明的是Http Method，在Play中每个路由都要明确写出对应的Http Method，中间是路由的URI，最右边是映射的Controller方法。参数<code>status ?= null</code>代表参数是可选的，
如果请求参数中没有status则默认值是null。routes文件的一大好处是在写映射Controller方法的时候IDE能帮助自动补全，并且编译器在编译的时候也能校验声明的参数个数与类型是否一致，
这能有效的帮助开发者减少错误。路由也配好了，剩下的工作就是模板的编写。</p>

<h4>6. 模板</h4>

<p>list.scala.html</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(testObjects: List[ordercenter.models.TestObject])
</span><span class='line'>
</span><span class='line'>@import common.utils.DateUtils._
</span><span class='line'>
</span><span class='line'>@main()() {
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;breadcrumbs&quot;</span> <span class="na">id=</span><span class="s">&quot;breadcrumbs&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">{</span><span class="nx">ace</span><span class="p">.</span><span class="nx">settings</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="s1">&#39;breadcrumbs&#39;</span> <span class="p">,</span> <span class="s1">&#39;fixed&#39;</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){}</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;breadcrumb&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-home home-icon&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>测试对象管理
</span><span class='line'>            <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;@controllers.test.routes.TestObjectController.list()&quot;</span><span class="nt">&gt;</span>测试对象查询<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span><span class="c">&lt;!-- .breadcrumb --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>
</span><span class='line'>                测试对象管理
</span><span class='line'>                <span class="nt">&lt;small&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-double-angle-right&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>测试对象查询
</span><span class='line'>                <span class="nt">&lt;/small&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- /.page-header --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-xs-12&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="c">&lt;!-- PAGE CONTENT BEGINS --&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-xs-12&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;table-responsive&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;table</span> <span class="na">id=</span><span class="s">&quot;sample-table-1&quot;</span> <span class="na">class=</span><span class="s">&quot;table table-striped table-bordered table-hover&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>                                    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;th&gt;</span>状态<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;th&gt;</span>买家<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;th</span> <span class="na">class=</span><span class="s">&quot;hidden-480&quot;</span><span class="nt">&gt;</span>金额<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;th&gt;</span>下单时间<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;th&gt;&lt;/th&gt;</span>
</span><span class='line'>                                    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>                                <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>
</span><span class='line'>                                <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>                                @for(testObject <span class="nt">&lt;-</span> <span class="na">testObjects</span><span class="err">)</span> <span class="err">{</span>
</span><span class='line'>                                    <span class="err">&lt;</span><span class="na">tr</span><span class="nt">&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;td&gt;</span>@testObject.getStatus.value<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;td&gt;</span>@testObject.getBuyerId<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;td&gt;</span>@testObject.getActualFee<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;td&gt;</span>@printDateTime(testObject.getCreateTime) <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;td&gt;</span>
</span><span class='line'>                                            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;visible-md visible-lg hidden-sm hidden-xs btn-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                                <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-xs btn-info&quot;</span> <span class="na">onclick=</span><span class="s">&quot;location.href=&#39;@controllers.test.routes.TestObjectController.updatePage(testObject.getId)&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                                    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-edit bigger-120&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>                                                <span class="nt">&lt;/button&gt;</span>
</span><span class='line'>                                                <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-xs btn-success&quot;</span> <span class="na">onclick=</span><span class="s">&quot;location.href=&#39;@controllers.test.routes.TestObjectController.list()&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                                                    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-info bigger-120&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>                                                <span class="nt">&lt;/button&gt;</span>
</span><span class='line'>                                            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>                                        <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>                                    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>                                }
</span><span class='line'>
</span><span class='line'>                                <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'>                            <span class="nt">&lt;/table&gt;</span>
</span><span class='line'>                        <span class="nt">&lt;/div&gt;</span><span class="c">&lt;!-- /.table-responsive --&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;/div&gt;</span><span class="c">&lt;!-- /span --&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Play的模板引擎是<a href="https://github.com/playframework/twirl">Twirl</a>，关于这个引擎的介绍可以参考<a href="http://skaka.me/blog/2015/07/27/play1/">上一篇文章</a>。</p>

<p><code>@(testObjects: List[ordercenter.models.TestObject])</code>是参数声明，写Play模板的时候，建议参数都通过这种声明的形式传入，而不是使用页面隐藏对象。
因为编译器能够自动帮我们校验类型和个数，重构起来也会更方便。下面一行<code>@import common.utils.DateUtils._</code>引入了定义好的一个工具类，
下面的<code>@printDateTime(testObject.getCreateTime)</code>用来格式化显示时间。</p>

<p><code>@main()() {...}</code>的形式是调用main模板完成渲染，main模板前两个参数可以省略，第三个参数需要传入html代码。在Scala中，方法调用既可以用小括号，比如<code>println("ok")</code>，
也可以用大括号<code>println{"ok"}</code>。而这里第三个参数使用的是大括号。<code>@for(testObject &lt;- testObjects){}</code>是循环的写法，这里循环testObjects，取出每一条记录用来显示。</p>

<p><code>onclick="location.href='@controllers.test.routes.TestObjectController.list()'"</code>绑定了onClick事件，用户在点击的时候会跳转到测试对象的编辑页面。
这里没有硬编码uri，而是使用routes反向路由的写法。之所以能这样写，是因为IDE在编译的时候会根据routes文件自动生成一个routes对象，
对象里面的方法对应的就是我们配置好的controller方法映射。这里写的<code>@controllers.test.routes.TestObjectController.list()</code>在模板渲染的时候就会被替换成<code>/test/objects</code>这个URI。</p>

<h3>4. 总结</h3>

<p>这一篇主要介绍了Play在整合Spring和JPA之后是如何进行开发的。可以看出，开发Play应用与开发SSH应用没有太大区别，只是Controller和模板的写法有所不同，
但是我们能很快享受到Play的便利：简单易用的模板，修改代码无需重启服务器，不需要配置外部服务器，etc。随着业务和技术的扩展，使用Play的项目更容易整合其他服务。
例如整合监控工具<a href="http://skaka.me/blog/2015/07/21/kamon-statsd-graphite-grafana-introduction/">StatsD+Graphite+Grafana+Kamon</a>，Docker化，服务化。</p>

<p>这篇文章我没有介绍如何启动应用，因为这需要一些开发环境的准备，以及了解SBT的基本用法。这些内容我会在下一篇博客介绍。这篇文章相关的代码已经提交到Github，
<a href="https://github.com/sunnykaka/awesome-play">项目地址</a>。
这个项目整合了Play，Spring，JPA，数据存储使用MySQL和Redis，使用Bootstrap作为页面框架，可以作为脚手架项目给有兴趣的朋友进行研究。</p>

<p>除此之外，感兴趣的朋友还可以下载<a href="http://www.typesafe.com/get-started">Typesafe Reactive Platform</a>进行学习。这这上面有很多关于Play，Akka的项目模板，
并且你可以通过浏览器查看编辑这些代码，还可以直接运行。另外要进一步学习可以读<a href="http://www.amazon.com/Play-Java-Covers-2/dp/1617290904">这本书</a>，网上有电子版的。</p>

<p>下篇我会介绍如何搭建开发环境，以及如何调试应用。掌握了之后，你会发现开发和调试过程原来还能这样直观和简单!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Java开发者的Play Framework(2.4)介绍 Part1：Play的优缺点以及适用场景]]></title>
    <link href="http://skaka.me/blog/2015/07/27/play1/"/>
    <updated>2015-07-27T16:46:32+08:00</updated>
    <id>http://skaka.me/blog/2015/07/27/play1</id>
    <content type="html"><![CDATA[<h3>1. 关于这篇系列</h3>

<p>这篇系列不是Play框架的Hello World，因为这样的文章网上已经有很多。</p>

<p>这篇系列会首先结合实际代码介绍Play的特点以及适用场景，然后会有几篇文章介绍Play与Spring，JPA（Hibernate）的集成，以及一些Play应用的最佳实践，
这期间会在Github上提供一个脚手架项目，方便感兴趣的朋友直接动手尝试。最后会简单分析Play的部分源码，帮助大家理解黑盒子的内部机制。</p>

<p>我水平有限，有错误欢迎指出。</p>

<h3>2. Play介绍</h3>

<p>Play Framework是一个开源的Web框架，背后商业公司是Typesafe。要介绍Play之前，首先理清Play的两个不同的分支。
Play 1.x 使用Java开发，最新版本是1.3.1，只支持Java项目。从11年开始就进入了维护阶段，新项目一般不考虑使用Play1。
Play 2.x 使用Scala和Java开发，同时支持Java和Scala项目。
这里主要介绍最新的Play2.4 for Java。有一点需要提前说明，虽然Play2主要由Scala开发，但是对于项目中的一般开发人员而言，
使用Play可以完全不懂Scala，具体情况后面会说明。</p>

<!-- more -->


<h3>3. 为什么要了解Play</h3>

<p>现在的Web框架或者类库可以说是浩如烟海。近十年来，在Web开发领域，JVM阵营的占有率一直不高，
<img src="http://skaka.me/images/custom/20150728/frameworks.png">
数据来源(<a href="http://hotframeworks.com/#rankings">http://hotframeworks.com/#rankings</a>)<br/>
这是国外开源项目的数据，相对来说国内Java框架的使用率会高一些。而最近几年，Ruby和Python在国内的开发群体也在不断壮大。
Java框架在Web领域不那么受欢迎，主要原因在于开发速度远落后于其他的开发框架。对于初创公司而言，快速开发出产品投入市场试错比花半年打磨出一款功能性能齐备的
应用更加重要，而对于成熟产品，也需要快速响应频繁的需求变化，这方面动态语言又更胜一筹。所以说到Web后端框架的技术选型，除非技术团队有比较深的JVM背景，
否则会倾向于选择RoR，Django这些框架。</p>

<p>JVM阵营在Web领域逐渐落后主要有三个原因：编译的锅，技术栈的锅和语言的锅。</p>

<p>大家都知道Java源代码需要编译之后才能运行，直接结果是每次修改源代码都需要重启Web服务器才能看到效果。如果项目比较小类也少，重启时间还勉强能接受。
我以前参与的一个项目，使用的是WebLogic服务器，Spring容器里大概有上千个Bean，重启一次至少得花5分钟，还是优化后的结果。工作时间至少有20%花在重启上了。
虽然现在有JRebel之类的热加载技术，但是国内使用的相对较少。</p>

<p>Servlet规范在1997年出现，在当时可以说是很先进的技术，加上Tomcat的横空出世，直接促成了JSP的崛起。然而时过境迁，Servlet风光不再，
Web容器存在的必要性也<a href="https://jaxenter.com/java-application-servers-dead-112186.html">被越来越多的人质疑</a>。原因就在于人为的将应用与容器剥离，
虽然这种做法本意是好的，但是结果就是给开发测试部署带来一系列集成的问题，现在越来越多的项目开始使用内嵌的Jetty或Tomcat就是一个现实的例子。
Servlet还带来一个问题，就是有状态的服务器。一旦使用了Session，服务器就无法享受到水平扩展的好处了，由此不得不采用Session复制或者粘性Session(Sticky Session)的
方案来解决这个问题，无论采取哪种方案都会有性能损耗，并且推高了技术成本。Servlet说到底是Java EE家族的一员，由于Sun的领导（Oracle背锅），
从Java EE 5开始，Java EE的角色已经从技术创新者转换为跟随者，这些年基本上可以说是跟着开源社区的步子在走的，除了政府大单和跨国企业，你很难再看见它的身影了。</p>

<p>至于语言，其实从JDK8开始，Java已经很好用了。不过从JDK5到JDK8，十年太长，尤其是在Web。</p>

<p>之前Java阵营受累于没有成熟的快速开发框架，Spring热衷于提供各种集成方案，可是配置和使用还是相当的麻烦，直到Spring Boot的出现才有改善。
不过近几年出现了一些相当优秀的框架，如<a href="http://www.dropwizard.io">Dropwizard</a>，<a href="https://playframework.com">Play</a>，<a href="http://vertx.io/">Vert.x</a>。
这篇系列要介绍的Play，通过ClassLoader在源代码修改的时候动态加载类，解决了修改代码需要重启服务器的问题，完全抛弃了Servlet技术栈，基于Netty实现了自己的
请求响应接口（Request/Result），基于Play的应用就是无状态的，另外Play处理请求的方式是无阻塞的（Non-Blocking）。Play2在设计的时候借鉴了RoR的许多优点，
学习Play能够让你了解一些现代化框架的特点，同时能够为你打开异步编程世界的大门。Promise已经被Scala，JavaScript等语言大量使用，Actor模型也已经遍地开花，
这些你都可以直接在Play中使用，或者你想保持原来的编程风格也完全没有问题。</p>

<h3>4. Play的特性</h3>

<h4>1. Play2的模板引擎</h4>

<p>Play2的模板是很强大并且容易上手的. 相对于Java领域其他模板引擎(Freemarker, Velocity, JSP, Groovy, etc), 主要有三个特点.<br/>
1) 简单易上手, 没有JSP里面繁杂的内置对象和指令, 所有功能都通过方法调用完成.<br/>
2) 主流IDE中都支持Play模板的静态类型检查, 类似JSP.<br/>
3) 支持反向路由.<br/>
举个例子, 一般系统都会有一个固定的页面布局, 比如分出页头页尾。如果用JSP或者Velocity之类的模板，
一般都是通过sitemesh+filter或者在每个页面include来完成布局。使用Play模板, 完成这个功能非常容易。
首先定义一个main页面
main.scala.html：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(title: String = &quot;默认标题&quot;)(staticFile: Html = Html(&quot;&quot;))(content: Html)
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;zh-cmn-Hans&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>@title<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'>@header()  <span class="nt">&lt;--</span> <span class="err">页头</span> <span class="na">--</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>@navigator() <span class="c">&lt;!-- 导航 --&gt;</span>
</span><span class='line'>
</span><span class='line'>@content
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;@routes.Assets.versioned(&quot;</span><span class="na">js</span><span class="err">/</span><span class="na">jquery-1</span><span class="err">.</span><span class="na">11</span><span class="err">.</span><span class="na">2</span><span class="err">.</span><span class="na">min</span><span class="err">.</span><span class="na">js</span><span class="err">&quot;)&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>@staticFile
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(title: String = &quot;默认标题&quot;)(staticFile: Html = Html(&quot;&quot;))(content: Html)
</span></code></pre></td></tr></table></div></figure>


<p>这一部分是参数声明，这里声明了三个参数:title标题, 有默认值；staticFile为html代码块, 可以传js等；content为页面内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@header()  <span class="nt">&lt;--</span> <span class="err">页头</span> <span class="na">--</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>@navigator() <span class="c">&lt;!-- 导航 --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一部分是引用同目录下的另外两个页面：header.scala.html和navigator.scala.html。为什么能这样引用，因为这些页面(main,header,navigator)都会被自动
编译成一个方法（准确地说是一个Scala object，不过这里先当做方法），所以这里相当于方法调用。同样，这个main也会被编译成方法，其他页面可以调用main来完成布局，
例如
login.scala.html</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@main() {
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nx">FG</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">login</span><span class="p">();</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>} {
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;login width1200&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- login --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>这就是一个简单的登录页面。登录页面调用main页面的方法，第一个参数不传使用默认标题，第二个参数传入登录页面的js代码，第三个参数传入登录页面的html代码。
这样就完成了页面布局, 没有随处可见的include, 也没有暗箱操作的filter, 所有的一切都是方法调用, 是不是很简单清晰？</p>

<p>静态类型检查就不说了, 本来Java的一大优点(Que Dian)就是类型检查，所以在Java里用Freemarker或者Velocity这种模板的做法值得商榷。</p>

<p>反向路由的意思是, 在Play中, 所有的Controller url都配置在一个routes文件中, 例如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>GET         /register                           @controllers.user.LoginController.registerPage
</span></code></pre></td></tr></table></div></figure>


<p>之后无论是在Controller里还是模板中, 都不用硬编码url。而是使用routes文件。例如在Controller中使用<code>redirect(routes.LoginController.registerPage())</code>就能实现重定向。
而在模板中使用 <code>&lt;a href="@controllers.routes.LoginController.registerPage()"&gt;</code>来指向链接。这种风格就是REST里的URI模板。</p>

<h4>2. 热部署</h4>

<p>这个上面介绍过，不用重启服务器。</p>

<h4>3. 内置dev/prod环境，内置部署脚本</h4>

<p>平常开发的时候使用run启动Play，是跑在dev模式。 Play会定时扫描源码目录进行热更新，并且类都是访问的时候再加载，提高启动速度。
使用start启动项目就运行在prod模式。Play内置dist命令，可以把所有的文件打包成一个zip，解压之后直接运行bin目录下的可执行文件即可启动项目，除了JDK之外无须任何其他外部依赖。
这大大减轻了运维成本，同时也能够很方便的进行持续集成（CI）。</p>

<h4>4. 使用Play开发的Server大部分能做到Stateless</h4>

<p>这个之前也说过，Play抛弃了Servlet/JSP里Session等概念, 内置没有提供方法将对象与服务器实例进行绑定(你要使用HashMap存的话Play也没办法)。
推荐的做法是使用外部缓存, 比如Redis, Memcached等。可能有人会觉得没有Session是Play的一个缺点（Play里的Session和Servlet Session不是一回事）,
但是只要你开发过流量大一点的应用, 你就会理解这点。</p>

<h4>5. 好用的配置库</h4>

<p>如果你之前开发过Java项目, 肯定写过**.properties或者管理过一大堆的xml。Java内置库对properties文件的处理是很弱的，你不得不自己写一些工具类去进行处理，
而且properties文件还不支持更复杂的语法。Play使用<a href="https://github.com/typesafehub/config">Typesafe Config</a>库，配置文件使用HOCON格式，默认配置文件为application.conf。
你能很容易读取里面的配置, 并且你也可以把自己的配置写在里面。所以项目中基本不需要使用properties或者xml文件了，除了第三方库需要的。</p>

<h4>6. Play插件</h4>

<p>RoR框架之所以好用，主要原因之一就是围绕RoR有相当丰富的插件可供选择，很多业务功能甚至都不需要开发就能实现。Play的插件数量当然相对于RoR还是要少一些，
不过你遇到的需求基本都有现成的插件可以使用。比如发邮件, 授权和验证, sitemap生成，第三方登录等等。自己写一个插件也很简单。</p>

<h4>7. 优秀的测试支持</h4>

<p>因为Play诞生的时候TDD已经很火热，所以Play对测试的支持非常好。
例如下面的几行代码就能对Controller进行测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">Http</span><span class="o">.</span><span class="na">RequestBuilder</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Http</span><span class="o">.</span><span class="na">RequestBuilder</span><span class="o">().</span><span class="na">method</span><span class="o">(</span><span class="n">POST</span><span class="o">).</span><span class="na">uri</span><span class="o">(</span><span class="n">routes</span><span class="o">.</span><span class="na">LoginController</span><span class="o">.</span><span class="na">requestPhoneCode</span><span class="o">(</span><span class="n">phone</span><span class="o">).</span><span class="na">url</span><span class="o">());</span>
</span><span class='line'><span class="n">Result</span> <span class="n">result</span> <span class="o">=</span> <span class="n">route</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">status</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="n">OK</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Play还内置了对 Selenium WebDriver的支持，可以模拟浏览器进行测试。以下是官方的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BrowserFunctionalTest</span> <span class="kd">extends</span> <span class="n">WithBrowser</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">runInBrowser</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">browser</span><span class="o">.</span><span class="na">goTo</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertNotNull</span><span class="o">(</span><span class="n">browser</span><span class="o">.</span><span class="na">$</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">).</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>8. 优秀的REST支持</h4>

<p>Play2从诞生起就能很容易的支持RESTful风格的架构（因为Play2在设计的时候REST就已经大行其道），
在Play2中实现RESTful API的示例可以参考Stackoverflow上的这个<a href="http://stackoverflow.com/questions/4379485/restful-on-play-framework">回答</a></p>

<h3>5. 使用Play过程中遇到的坑</h3>

<h4>1. 首次编译速度过慢</h4>

<p>这是Scala的锅。Scala在编译过程中要<a href="http://stackoverflow.com/questions/4527902/what-is-the-order-of-the-scala-compiler-phases">经历至少30个步骤</a>，
导致编译速度相当慢。在我的机器上（Core&trade; i5-4590 CPU @ 3.30GHz，RAM 8GB），编译100多个Scala类大约需要1到2分钟。好在sbt可以增量编译，
即首次编译之后，你再修改代码，编译器只会编译那些它认为需要编译的类，编译几个类的时候速度很快，基本刷新页面就能完成。</p>

<h4>2. IDE的Scala插件偶尔会误报错误</h4>

<p>首先得说明，最适合开发Play项目的IDE是<a href="https://www.jetbrains.com/idea">IntelliJ IDEA</a>。现在IDEA最新的Scala插件相比之前的版本，已经有很大的提升。
不过偶尔还是会出现误报的情况，这个问题随着新版本插件的发布应该会慢慢解决。</p>

<h4>3. Scala和Sbt的学习成本较高</h4>

<p>这可能是初次接触Play的用户遇到的最大障碍。其实对于大多数业务开发人员来说，这不是问题。使用Play for Java版本，项目代码99%都是Java代码，
而Sbt类似于Maven，一旦项目搭建好后不需要过多接触，只要学会几个常用的命令就可以了，例如project root(切换项目), run(启动服务器在dev模式)。
我们团队大部分成员之前都没有接触过Scala和Play，经过一两周的磨合期之后都能很顺利的使用Play进行开发了。</p>

<h4>4. Play的API变化速度比较快</h4>

<p>Play的版本号遵循<a href="http://semver.org/">Semantic Versioning</a>，不同主版本的API变化非常大，比如Play1和Play2就是两个不同的框架。
而副版本之间API也会有一些变化，而且不一定完全向后兼容。例如使用Play2.3.x的项目在升级到2.4的时候，需要按照官方提供的迁移手册进行代码修改，
不然是运行不了的。这对于其他背景的开发者来说可能比较容易理解，但是如果是一直习惯于使用Spring MVC或Struts2的话，可能会对这点感到不适。</p>

<h3>6.总结</h3>

<p>Play2可以算是一个现代化的框架，吸收了RoR诸多优点，同时又解决了Java开发中的一些痛点，在国外已经被大量使用。参见
<img src="http://skaka.me/images/custom/20150728/playframework2.png">
数据来源(<a href="http://www.infoq.com/research/jvm-web-frameworks">http://www.infoq.com/research/jvm-web-frameworks</a>)</p>

<p>Play和Spring MVC的定位有些相似，但是比Spring MVC提供更丰富的功能，和Web有关的项目都可以使用Play。但是如果要用好Play，对团队有一定的要求。</p>

<p>首先，你的团队应该不是墨守成规的团队。大部分人都害怕变化，这是不争的事实。JDK的发展缓慢加上国内的技术氛围，着实让Java开发人员过了几年的舒服日子。
你如果是05年学会了ibatis和Spring，然后这十年去环游世界了，在15年你照样能轻松找到一份待遇还算可以的工作。然而事情已经开始发生变化，不会学习可能会被淘汰。</p>

<p>其次，你的团队应该重视工作效率和质量，并且有时间做出改进。国内很多团队信奉的是人海战术。以低薪聘请大量不合格的开发人员来开发业务功能，
而不是注重单人的工作效率和质量，很多项目的加班和延期都源于此。这样的团队就不适合用Play。很难想象每天都要加班去应付工作的团队有时间打磨升级自己的工具和技能。
但是反过来低效率的工具和技能又拖累了自己的工作效率，这是一个恶性循环。</p>

<p>最后，团队中需要有人对Scala和Sbt有一定的了解。虽然Play有Java版本可以使用，但是如果不会Scala和Sbt，在搭建环境，使用一些高级功能（如Filter）的时候可能会遇到麻烦。</p>

<p>下篇我会介绍Play和Spring还有JPA（Hibernate）的集成，毕竟Spring在大部分Java项目还是主流。有问题和建议欢迎指出。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用StatsD, Graphite, Grafana, Kamon搭建可用于JVM项目的可视化性能监控系统]]></title>
    <link href="http://skaka.me/blog/2015/07/21/kamon-statsd-graphite-grafana-introduction/"/>
    <updated>2015-07-21T16:12:13+08:00</updated>
    <id>http://skaka.me/blog/2015/07/21/kamon-statsd-graphite-grafana-introduction</id>
    <content type="html"><![CDATA[<h3>1. 什么是性能监控系统</h3>

<p>这里说的性能监控系统，主要侧重点是监控应用系统的性能。
说直白点就是每个业务（例如注册，登录）的请求响应时间，请求次数等信息。
操作系统的监控不是这里的重点，因为业界已经有许多相当成熟的基于Linux的运维系统。
操作系统的运维和应用系统的运维是两码事，应用系统的运维相对来说没有这么多选择。
而对于任何线上系统来说，运维监控系统又是必不可少的。
如果你是在大公司，一般会选择开发自己的运维系统，而对于中小团队，因为人力有限，大多会采用开源的解决方案。</p>

<p>我在这里要介绍的就是使用StatsD，Graphite, Grafana, Kamon搭建监控系统的方案。
这里的Kamon只适用于基于JVM的项目，另外，如果你的项目是基于Play或Akka或Spray，可以做到不写代码实现监控。
因为Kamon对这几个框架提供了AspectJ支持，在类加载的时候插入代码为你完成记录。
其他情况你需要调用Kamon API来进行数据记录，这也非常的简单。</p>

<!-- more -->


<h3>2. 监控系统UI</h3>

<p>介绍搭建步骤之前，先来看一看搭好后的界面。
<img src="http://skaka.me/images/custom/20150721/grafana1.png">
<img src="http://skaka.me/images/custom/20150721/grafana2.png">
转自(<a href="https://github.com/kamon-io/docker-grafana-graphite">https://github.com/kamon-io/docker-grafana-graphite</a>)<br/>
这里包含4部分的图表。<br/>
- Actor Metrics是Akka Actor的统计图表。因为我的项目中没有直接使用Akka，所以暂时忽略这一部分内容。<br/>
- Trace Metrics是业务请求的统计图表。例如每个请求的响应时间，以及某个时间段内各请求数量的统计对比。<br/>
- OS Metrics一看就知道是操作系统的统计图表了。<br/>
- JVM Metrics是JVM的统计图表。</p>

<h3>3. StatsD, Graphite, Grafana, Kamon简介</h3>

<p>简单介绍一下这四个开源项目，因为都在Github上就不贴链接了，<br/>
已经对这几个项目很熟悉的可以略过。</p>

<h4>1. StatsD</h4>

<p>StatsD是一个用于记录统计信息的守护进程。使用NodeJS开发，提供各种语言的客户端API。</p>

<h4>2. Graphite</h4>

<p>使用Python开发，分为三个子项目<br/>
- carbon 守护进程，接收StatsD发送过来的原始统计数据。<br/>
- whisper 用来存储统计数据的库。<br/>
- graphite webapp 用来图形化展示统计数据的web项目。</p>

<h4>3. Grafana</h4>

<p>使用Go开发，可以直接在界面上设计统计图表。<br/>
之前看到就是使用Grafana制作的界面。</p>

<h4>4. Kamon</h4>

<p>一套类库用来记录统计数据，使用Scala开发，提供Java和Scala API。<br/>
除了提供API，还结合AspectJ对一些框架提供自动记录的功能，当然性能上会有损耗。</p>

<p>整体流程：业务系统调用Kamon的Api记录数据，Kamon将数据发送给StatsD，<br/>
StatsD定期（默认10s）将数据汇总发送到Graphite，<br/>
当用户访问Grafana界面的时候，Grafana调用Graphite接口读取数据绘制成图形展示给用户。</p>

<h3>4.搭建环境</h3>

<p>因为用到了多个项目，并且每个项目都基于不同语言，所以安装过程肯定不会很简单。<br/>
使用docker的朋友直接参考这个项目(<a href="https://github.com/kamon-io/docker-grafana-graphite">https://github.com/kamon-io/docker-grafana-graphite</a>)<br/>
用docker镜像会方便很多。</p>

<p>如果不用docker，可以参考我的安装步骤。<br/>
以下安装是基于Ubuntu14.04，如果是CentOS或其他系统可能某些步骤会不一样。<br/>
另外因为测试的时候是在开发机上，所以下面安装的时候没有使用独立用户和权限。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.安装需要的软件
</span><span class='line'>
</span><span class='line'>sudo apt-get -y install software-properties-common
</span><span class='line'>
</span><span class='line'>sudo add-apt-repository -y ppa:chris-lea/node.js
</span><span class='line'>
</span><span class='line'>sudo apt-get -y update
</span><span class='line'>
</span><span class='line'>sudo apt-get -y install python-django-tagging python-simplejson python-memcache python-ldap python-cairo python-pysqlite2 python-support \
</span><span class='line'>
</span><span class='line'>                           python-pip gunicorn nginx-light nodejs wget curl build-essential python-dev
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>sudo pip install Twisted==11.1.0
</span><span class='line'>
</span><span class='line'>sudo pip install Django==1.5
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Install Elasticsearch
</span><span class='line'>
</span><span class='line'>cd ~ && wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.3.2.deb
</span><span class='line'>
</span><span class='line'>cd ~ && sudo dpkg -i elasticsearch-1.3.2.deb && rm elasticsearch-1.3.2.deb
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>2.从源码安装StatsD, Graphite, Grafana
</span><span class='line'>
</span><span class='line'># Checkout the stable branches of Graphite, Carbon and Whisper and install from there
</span><span class='line'>
</span><span class='line'>mkdir ~/src
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>git clone https://github.com/kamon-io/docker-grafana-graphite.git ~/src/docker-grafana-graphite
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>git clone https://github.com/graphite-project/whisper.git ~/src/whisper &&\
</span><span class='line'>
</span><span class='line'>cd ~/src/whisper                                                                   &&\
</span><span class='line'>
</span><span class='line'>git checkout 0.9.x                                                                &&\
</span><span class='line'>
</span><span class='line'>sudo python setup.py install
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>git clone https://github.com/graphite-project/carbon.git ~/src/carbon              &&\
</span><span class='line'>
</span><span class='line'>cd ~/src/carbon                                                                    &&\
</span><span class='line'>
</span><span class='line'>git checkout 0.9.x                                                                &&\
</span><span class='line'>
</span><span class='line'>sudo python setup.py install
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>git clone https://github.com/graphite-project/graphite-web.git ~/src/graphite-web  &&\
</span><span class='line'>
</span><span class='line'>cd ~/src/graphite-web                                                              &&\
</span><span class='line'>
</span><span class='line'>git checkout 0.9.x                                                                &&\
</span><span class='line'>
</span><span class='line'>sudo python setup.py install
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Install StatsD
</span><span class='line'>
</span><span class='line'>git clone https://github.com/etsy/statsd.git ~/src/statsd                                                                        &&\
</span><span class='line'>
</span><span class='line'>cd ~/src/statsd                                                                                                                  &&\
</span><span class='line'>
</span><span class='line'>git checkout v0.7.2
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Install Grafana
</span><span class='line'>
</span><span class='line'>mkdir ~/src/grafana
</span><span class='line'>
</span><span class='line'>wget http://grafanarel.s3.amazonaws.com/grafana-1.9.1.tar.gz -O ~/src/grafana.tar.gz                   &&\
</span><span class='line'>
</span><span class='line'>        cd ~/src/ && tar -xzf ~/src/grafana.tar.gz && mv ~/src/grafana-1.9.1 ~/src/grafana && cd - &&\
</span><span class='line'>
</span><span class='line'>        rm ~/src/grafana.tar.gz
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>3.修改配置
</span><span class='line'>
</span><span class='line'># Configure Elasticsearch
</span><span class='line'>
</span><span class='line'>sudo mkdir -p /tmp/elasticsearch
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Confiure StatsD
</span><span class='line'>
</span><span class='line'>cp ~/src/docker-grafana-graphite/statsd/config.js ~/src/statsd/config.js
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Configure Whisper, Carbon and Graphite-Web
</span><span class='line'>
</span><span class='line'>sudo cp ~/src/docker-grafana-graphite/graphite/initial_data.json /opt/graphite/webapp/graphite/
</span><span class='line'>
</span><span class='line'>sudo cp ~/src/docker-grafana-graphite/graphite/local_settings.py /opt/graphite/webapp/graphite/
</span><span class='line'>
</span><span class='line'># 此时要 sudo vi /opt/graphite/webapp/graphite/local_settings.py, 把TimeZone改为Asia/Shanghai
</span><span class='line'>
</span><span class='line'>sudo cp ~/src/docker-grafana-graphite/graphite/carbon.conf /opt/graphite/conf
</span><span class='line'>
</span><span class='line'>sudo cp ~/src/docker-grafana-graphite/graphite/storage-aggregation.conf /opt/graphite/conf
</span><span class='line'>
</span><span class='line'>sudo cp ~/src/docker-grafana-graphite/graphite/storage-schemas.conf /opt/graphite/conf
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>sudo mkdir -p /opt/graphite/storage/whisper
</span><span class='line'>
</span><span class='line'>sudo touch /opt/graphite/storage/graphite.db /opt/graphite/storage/index
</span><span class='line'>
</span><span class='line'>sudo chmod 0775 /opt/graphite/storage /opt/graphite/storage/whisper
</span><span class='line'>
</span><span class='line'>sudo chmod 0664 /opt/graphite/storage/graphite.db
</span><span class='line'>
</span><span class='line'>cd /opt/graphite/webapp/graphite && sudo python manage.py syncdb --noinput
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Configure Grafana
</span><span class='line'>
</span><span class='line'>cp ~/src/docker-grafana-graphite/grafana/config.js ~/src/grafana/config.js
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Add the default dashboards
</span><span class='line'>
</span><span class='line'>mkdir ~/src/dashboards
</span><span class='line'>
</span><span class='line'>cp ~/src/docker-grafana-graphite/grafana/dashboards/* ~/src/dashboards/
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># Configure nginx
</span><span class='line'>
</span><span class='line'>将下面的内容加入nginx.conf
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>
</span><span class='line'>    listen 80 default_server;
</span><span class='line'>
</span><span class='line'>    server_name _;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>
</span><span class='line'>     # !!! change me 这里改成你的目录 !!!
</span><span class='line'>
</span><span class='line'>      root /home/liubin/src/grafana;
</span><span class='line'>
</span><span class='line'>      index index.html;
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    location /graphite/ {
</span><span class='line'>
</span><span class='line'>        proxy_pass                 http://127.0.0.1:8000/;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Real-IP   $remote_addr;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Proto  $scheme;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Server  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Host  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           Host  $host;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        client_max_body_size       10m;
</span><span class='line'>
</span><span class='line'>        client_body_buffer_size    128k;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_connect_timeout      90;
</span><span class='line'>
</span><span class='line'>        proxy_send_timeout         90;
</span><span class='line'>
</span><span class='line'>        proxy_read_timeout         90;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_buffer_size          4k;
</span><span class='line'>
</span><span class='line'>        proxy_buffers              4 32k;
</span><span class='line'>
</span><span class='line'>        proxy_busy_buffers_size    64k;
</span><span class='line'>
</span><span class='line'>        proxy_temp_file_write_size 64k;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        add_header Access-Control-Allow-Origin "*";
</span><span class='line'>
</span><span class='line'>        add_header Access-Control-Allow-Methods "GET, OPTIONS";
</span><span class='line'>
</span><span class='line'>        add_header Access-Control-Allow-Headers "origin, authorization, accept";
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    location /elasticsearch/ {
</span><span class='line'>
</span><span class='line'>        proxy_pass                 http://127.0.0.1:9200/;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Real-IP   $remote_addr;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Proto  $scheme;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Server  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Host  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           Host  $host;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        client_max_body_size       10m;
</span><span class='line'>
</span><span class='line'>        client_body_buffer_size    128k;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_connect_timeout      90;
</span><span class='line'>
</span><span class='line'>        proxy_send_timeout         90;
</span><span class='line'>
</span><span class='line'>        proxy_read_timeout         90;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_buffer_size          4k;
</span><span class='line'>
</span><span class='line'>        proxy_buffers              4 32k;
</span><span class='line'>
</span><span class='line'>        proxy_busy_buffers_size    64k;
</span><span class='line'>
</span><span class='line'>        proxy_temp_file_write_size 64k;
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  server {
</span><span class='line'>
</span><span class='line'>    listen 81 default_server;
</span><span class='line'>
</span><span class='line'>    server_name _;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    open_log_file_cache max=1000 inactive=20s min_uses=2 valid=1m;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>
</span><span class='line'>        proxy_pass                 http://127.0.0.1:8000;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Real-IP   $remote_addr;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Proto  $scheme;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Server  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           X-Forwarded-Host  $host;
</span><span class='line'>
</span><span class='line'>        proxy_set_header           Host  $host;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        client_max_body_size       10m;
</span><span class='line'>
</span><span class='line'>        client_body_buffer_size    128k;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_connect_timeout      90;
</span><span class='line'>
</span><span class='line'>        proxy_send_timeout         90;
</span><span class='line'>
</span><span class='line'>        proxy_read_timeout         90;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        proxy_buffer_size          4k;
</span><span class='line'>
</span><span class='line'>        proxy_buffers              4 32k;
</span><span class='line'>
</span><span class='line'>        proxy_busy_buffers_size    64k;
</span><span class='line'>
</span><span class='line'>        proxy_temp_file_write_size 64k;
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    add_header Access-Control-Allow-Origin "*";
</span><span class='line'>
</span><span class='line'>    add_header Access-Control-Allow-Methods "GET, OPTIONS";
</span><span class='line'>
</span><span class='line'>    add_header Access-Control-Allow-Headers "origin, authorization, accept";
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    location /content {
</span><span class='line'>
</span><span class='line'>      alias /opt/graphite/webapp/content;
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    location /media {
</span><span class='line'>
</span><span class='line'>      alias /usr/share/pyshared/django/contrib/admin/media;
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>4.启动
</span><span class='line'>
</span><span class='line'>export GRAPHITE_STORAGE_DIR='/opt/graphite/storage'
</span><span class='line'>
</span><span class='line'>export GRAPHITE_CONF_DIR='/opt/graphite/conf'
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run nginx
</span><span class='line'>
</span><span class='line'>sudo /etc/init.d/nginx restart
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run carbon
</span><span class='line'>
</span><span class='line'>sudo /opt/graphite/bin/carbon-cache.py --debug start
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run graphite-web
</span><span class='line'>
</span><span class='line'>export PYTHONPATH='/opt/graphite/webapp'
</span><span class='line'>
</span><span class='line'>cd /opt/graphite/webapp
</span><span class='line'>
</span><span class='line'>sudo /usr/bin/gunicorn_django -b127.0.0.1:8000 -w2 graphite/settings.py
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run StatsD
</span><span class='line'>
</span><span class='line'>sudo /usr/bin/node ~/src/statsd/stats.js ~/src/statsd/config.js
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run elasticsearch
</span><span class='line'>
</span><span class='line'>sudo /etc/init.d/elasticsearch start
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'># run grafana
</span><span class='line'>
</span><span class='line'>cd ~/src/dashboards
</span><span class='line'>
</span><span class='line'>sudo /usr/bin/node dashboard-loader.js system-metrics.json welcome.json</span></code></pre></td></tr></table></div></figure>


<p>安装完成后，可以尝试访问(<a href="http://127.0.0.1">http://127.0.0.1</a>)，如果出现之前的界面并且没有报错，就代表安装成功了。</p>

<h3>5. 配置项目</h3>

<p>主要是引入Kamon依赖。<br/>
因为我们的项目基于Play，所以直接使用了Kamon-Play依赖。</p>

<h4>1.修改build.sbt</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="k">val</span> <span class="n">kamonVersion</span> <span class="k">=</span> <span class="s">&quot;0.4.0&quot;</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="k">val</span> <span class="n">dependencies</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class='line'>  <span class="s">&quot;io.kamon&quot;</span> <span class="o">%%</span> <span class="s">&quot;kamon-core&quot;</span> <span class="o">%</span> <span class="n">kamonVersion</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;io.kamon&quot;</span> <span class="o">%%</span> <span class="s">&quot;kamon-statsd&quot;</span> <span class="o">%</span> <span class="n">kamonVersion</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;io.kamon&quot;</span> <span class="o">%%</span> <span class="s">&quot;kamon-play&quot;</span> <span class="o">%</span> <span class="n">kamonVersion</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;io.kamon&quot;</span> <span class="o">%%</span> <span class="s">&quot;kamon-system-metrics&quot;</span> <span class="o">%</span> <span class="n">kamonVersion</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;org.aspectj&quot;</span> <span class="o">%</span> <span class="s">&quot;aspectjweaver&quot;</span> <span class="o">%</span> <span class="s">&quot;1.8.1&quot;</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.修改application.conf</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="n">akka</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">extensions</span> <span class="k">=</span> <span class="o">[</span><span class="err">&quot;</span><span class="kt">kamon.statsd.StatsD</span><span class="err">&quot;</span>, <span class="err">&quot;</span><span class="kt">kamon.system.SystemMetrics</span><span class="err">&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">kamon</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">metric</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">tick</span><span class="o">-</span><span class="n">interval</span> <span class="k">=</span> <span class="mi">1</span> <span class="n">second</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">statsd</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">#</span> <span class="nc">Hostname</span> <span class="n">and</span> <span class="n">port</span> <span class="n">in</span> <span class="n">which</span> <span class="n">your</span> <span class="nc">StatsD</span> <span class="n">is</span> <span class="n">running</span><span class="o">.</span> <span class="nc">Remember</span> <span class="n">that</span> <span class="nc">StatsD</span> <span class="n">packets</span> <span class="n">are</span> <span class="n">sent</span> <span class="n">using</span> <span class="nc">UDP</span> <span class="n">and</span>
</span><span class='line'>    <span class="k">#</span> <span class="n">setting</span> <span class="n">unreachable</span> <span class="n">hosts</span> <span class="n">and</span><span class="o">/</span><span class="n">or</span> <span class="n">not</span> <span class="n">open</span> <span class="n">ports</span> <span class="n">wont</span> <span class="n">be</span> <span class="n">warned</span> <span class="n">by</span> <span class="n">the</span> <span class="nc">Kamon</span><span class="o">,</span> <span class="n">your</span> <span class="n">data</span> <span class="n">wont</span> <span class="n">go</span> <span class="n">anywhere</span><span class="o">.</span>
</span><span class='line'>    <span class="n">hostname</span> <span class="k">=</span> <span class="s">&quot;127.0.0.1&quot;</span>
</span><span class='line'>    <span class="n">port</span> <span class="k">=</span> <span class="mi">8125</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">#</span> <span class="nc">Interval</span> <span class="n">between</span> <span class="n">metrics</span> <span class="n">data</span> <span class="n">flushes</span> <span class="n">to</span> <span class="nc">StatsD</span><span class="o">.</span> <span class="nc">It</span><span class="-Symbol">&#39;s</span> <span class="n">value</span> <span class="n">must</span> <span class="n">be</span> <span class="n">equal</span> <span class="n">or</span> <span class="n">greater</span> <span class="n">than</span> <span class="n">the</span>
</span><span class='line'>    <span class="k">#</span> <span class="n">kamon</span><span class="o">.</span><span class="n">metrics</span><span class="o">.</span><span class="n">tick</span><span class="o">-</span><span class="n">interval</span> <span class="n">setting</span><span class="o">.</span>
</span><span class='line'>    <span class="n">flush</span><span class="o">-</span><span class="n">interval</span> <span class="k">=</span> <span class="mi">1</span> <span class="n">second</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">#</span> <span class="nc">Max</span> <span class="n">packet</span> <span class="n">size</span> <span class="k">for</span> <span class="nc">UDP</span> <span class="n">metrics</span> <span class="n">data</span> <span class="n">sent</span> <span class="n">to</span> <span class="nc">StatsD</span><span class="o">.</span>
</span><span class='line'>    <span class="n">max</span><span class="o">-</span><span class="n">packet</span><span class="o">-</span><span class="n">size</span> <span class="k">=</span> <span class="mi">1024</span> <span class="n">bytes</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">#</span> <span class="nc">Subscription</span> <span class="n">patterns</span> <span class="n">used</span> <span class="n">to</span> <span class="n">select</span> <span class="n">which</span> <span class="n">metrics</span> <span class="n">will</span> <span class="n">be</span> <span class="n">pushed</span> <span class="n">to</span> <span class="nc">StatsD</span><span class="o">.</span> <span class="nc">Note</span> <span class="n">that</span> <span class="n">first</span><span class="o">,</span> <span class="n">metrics</span>
</span><span class='line'>    <span class="k">#</span> <span class="n">collection</span> <span class="k">for</span> <span class="n">your</span> <span class="n">desired</span> <span class="n">entities</span> <span class="n">must</span> <span class="n">be</span> <span class="n">activated</span> <span class="n">under</span> <span class="n">the</span> <span class="n">kamon</span><span class="o">.</span><span class="n">metrics</span><span class="o">.</span><span class="n">filters</span> <span class="n">settings</span><span class="o">.</span>
</span><span class='line'>    <span class="n">includes</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">actor</span>      <span class="k">=</span>  <span class="o">[</span> <span class="err">&quot;</span><span class="kt">*</span><span class="err">&quot;</span> <span class="o">]</span>
</span><span class='line'>      <span class="n">trace</span>      <span class="k">=</span>  <span class="o">[</span> <span class="err">&quot;</span><span class="kt">*</span><span class="err">&quot;</span> <span class="o">]</span>
</span><span class='line'>      <span class="n">dispatcher</span> <span class="k">=</span>  <span class="o">[</span> <span class="err">&quot;</span><span class="kt">*</span><span class="err">&quot;</span> <span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">simple</span><span class="o">-</span><span class="n">metric</span><span class="o">-</span><span class="n">key</span><span class="o">-</span><span class="n">generator</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">#</span> <span class="nc">Application</span> <span class="n">prefix</span> <span class="k">for</span> <span class="n">all</span> <span class="n">metrics</span> <span class="n">pushed</span> <span class="n">to</span> <span class="nc">StatsD</span><span class="o">.</span> <span class="nc">The</span> <span class="n">default</span> <span class="n">namespacing</span> <span class="n">scheme</span> <span class="k">for</span> <span class="n">metrics</span> <span class="n">follows</span>
</span><span class='line'>      <span class="k">#</span> <span class="k">this</span> <span class="n">pattern</span><span class="k">:</span>
</span><span class='line'>      <span class="k">#</span>    <span class="kt">application.host.entity.entity-name.metric-name</span>
</span><span class='line'>      <span class="k">#</span> <span class="o">!!!</span> <span class="n">这里改成项目名</span> <span class="o">!!!</span>
</span><span class='line'>      <span class="n">application</span> <span class="k">=</span> <span class="s">&quot;sk-shop&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">play</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">include</span><span class="o">-</span><span class="n">trace</span><span class="o">-</span><span class="n">token</span><span class="o">-</span><span class="n">header</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'>    <span class="n">trace</span><span class="o">-</span><span class="n">token</span><span class="o">-</span><span class="n">header</span><span class="o">-</span><span class="n">name</span> <span class="k">=</span> <span class="s">&quot;X-Trace-Token&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3.启动项目</h4>

<p>play运行时环境分为dev环境和prod环境。
因为Kamon-Play使用AspectJ在类加载加载的时候进行织入，AspectJ会使用自己的类加载器，
而运行在dev环境的Play项目因为要实现热加载，所以dev环境不能使用AspectJ。
prod一般会会使用dist命令将项目打包，可用以下方式启动（假设项目名是shop，并且已cd进入打包后的目录）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="o">./</span><span class="n">bin</span><span class="o">/</span><span class="n">shop</span> <span class="o">-</span><span class="n">J</span><span class="o">-</span><span class="n">javaagent</span><span class="k">:</span><span class="kt">lib/org.aspectj.aspectjweaver-</span><span class="err">1</span><span class="kt">.</span><span class="err">8</span><span class="kt">.</span><span class="err">1</span><span class="kt">.jar</span>
</span></code></pre></td></tr></table></div></figure>


<p>启动之后随便访问你项目几个页面，然后访问127.0.0.1，如果一切正常就可以看到数据了。</p>

<h3>6.总结</h3>

<p>恭喜，如果做到这一步，你就已经初步的搭好你们运维系统的架子了。
如果你的应用比较简单，对性能要求也不高，到这一步就可以结束了。
不过，大多数的应用都对统计数据有更进一步的分析需求，例如绘制响应时间超过某一阀值（例如100ms）的饼状图，
或者绘制日注册人数的直方图。
这就需要你手动调用Kamon的API来记录数据了，不过这相当的简单。
如果需要设计其他的Grafana图表，需要对Graphite的函数比较熟悉。</p>

<p>另外，如果应用对性能很敏感，不推荐使用AspectJ。因为LTW（Load Time Weaving）会有一些性能损耗。
我们的项目最开始是使用的Kamon-Play和Kamon-Akka，不过后来测试发现响应时间平均要增加10%-20%，
现在已经改成直接调用Kamon API完成记录。</p>

<p>Enjoy!</p>

<h3>7.附启动和停止脚本</h3>

<h4>1.启动脚本 start_stats.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="o">#!/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span>
</span><span class='line'>
</span><span class='line'><span class="n">export</span> <span class="nc">GRAPHITE_STORAGE_DIR</span><span class="o">=</span><span class="err">&#39;</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">graphite</span><span class="o">/</span><span class="n">storage</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">export</span> <span class="nc">GRAPHITE_CONF_DIR</span><span class="o">=</span><span class="err">&#39;</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">graphite</span><span class="o">/</span><span class="n">conf</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">nohup</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">graphite</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">carbon</span><span class="o">-</span><span class="n">cache</span><span class="o">.</span><span class="n">py</span> <span class="o">--</span><span class="n">debug</span> <span class="n">start</span> <span class="o">&gt;</span> <span class="o">~/</span><span class="n">logs</span><span class="o">/</span><span class="n">kamon</span><span class="o">/</span><span class="n">carbon</span><span class="o">.</span><span class="n">out</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span> <span class="o">&amp;</span>
</span><span class='line'><span class="n">export</span> <span class="nc">PYTHONPATH</span><span class="o">=</span><span class="err">&#39;</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">graphite</span><span class="o">/</span><span class="n">webapp</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">nohup</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">gunicorn_django</span> <span class="o">-</span><span class="n">b127</span><span class="o">.</span><span class="mf">0.0</span><span class="o">.</span><span class="mi">1</span><span class="k">:</span><span class="err">8000</span> <span class="kt">-w2</span> <span class="kt">/opt/graphite/webapp/graphite/settings.py</span>  <span class="kt">&gt;</span> <span class="kt">~/logs/kamon/graphite.out</span> <span class="err">2</span><span class="kt">&gt;&amp;</span><span class="err">1</span> <span class="kt">&amp;</span>
</span><span class='line'><span class="n">nohup</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">node</span> <span class="o">~/</span><span class="n">src</span><span class="o">/</span><span class="n">statsd</span><span class="o">/</span><span class="n">stats</span><span class="o">.</span><span class="n">js</span> <span class="o">~/</span><span class="n">src</span><span class="o">/</span><span class="n">statsd</span><span class="o">/</span><span class="n">config</span><span class="o">.</span><span class="n">js</span>  <span class="o">&gt;</span> <span class="o">~/</span><span class="n">logs</span><span class="o">/</span><span class="n">kamon</span><span class="o">/</span><span class="n">graphite</span><span class="o">.</span><span class="n">out</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span> <span class="o">&amp;</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">init</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">elasticsearch</span> <span class="n">start</span>
</span><span class='line'><span class="n">cd</span> <span class="o">~/</span><span class="n">src</span><span class="o">/</span><span class="n">dashboards</span>
</span><span class='line'><span class="n">nohup</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">node</span> <span class="n">dashboard</span><span class="o">-</span><span class="n">loader</span><span class="o">.</span><span class="n">js</span> <span class="n">system</span><span class="o">-</span><span class="n">metrics</span><span class="o">.</span><span class="n">json</span>  <span class="n">welcome</span><span class="o">.</span><span class="n">json</span>   <span class="o">&gt;</span> <span class="o">~/</span><span class="n">logs</span><span class="o">/</span><span class="n">kamon</span><span class="o">/</span><span class="n">grafana</span><span class="o">.</span><span class="n">out</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span> <span class="o">&amp;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.停止脚本 stop_stats.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="o">#!/</span><span class="n">bin</span><span class="o">/</span><span class="n">sh</span>
</span><span class='line'>
</span><span class='line'><span class="n">pkill</span> <span class="n">carbon</span>
</span><span class='line'><span class="n">pkill</span> <span class="n">gunicorn_django</span>
</span><span class='line'><span class="n">pkill</span> <span class="n">statsd</span>
</span><span class='line'><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">init</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">elasticsearch</span> <span class="n">stop</span>
</span><span class='line'><span class="n">kill</span> <span class="n">$</span><span class="o">(</span><span class="n">ps</span> <span class="n">aux</span> <span class="o">|</span> <span class="n">grep</span> <span class="-Symbol">&#39;node</span> <span class="n">dashboard</span><span class="o">-</span><span class="n">loader</span><span class="o">.</span><span class="n">js</span><span class="err">&#39;</span> <span class="o">|</span> <span class="n">awk</span> <span class="err">&#39;</span><span class="o">{</span><span class="n">print</span> <span class="n">$2</span><span class="o">}</span><span class="err">&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
