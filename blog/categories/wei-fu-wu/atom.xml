<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 微服务 | skaka的博客]]></title>
  <link href="http://skaka.me/blog/categories/wei-fu-wu/atom.xml" rel="self"/>
  <link href="http://skaka.me/"/>
  <updated>2016-09-10T01:33:58+08:00</updated>
  <id>http://skaka.me/</id>
  <author>
    <name><![CDATA[skaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[微服务框架Spring Cloud介绍 Part5: 在微服务系统中使用Hystrix, Hystrix Dashboard与Turbine]]></title>
    <link href="http://skaka.me/blog/2016/09/04/springcloud5/"/>
    <updated>2016-09-04T21:03:22+08:00</updated>
    <id>http://skaka.me/blog/2016/09/04/springcloud5</id>
    <content type="html"><![CDATA[通过前面几篇文章的介绍, 我们已经能够使用Spring Cloud开发出一个简单的系统了. 这篇文章里, 我们将关注点转移到如何提高微服务系统的容错性(Fault Tolerance),
并了解如何借助Hystrix开发健壮的微服务.  

以往我们在开发单体应用, 或者调用RPC服务的时候, 可能没有考虑太多目标服务调用失败的情况, 经常一个Try/Catch加上打印日志就解决了.
但是在微服务系统中, 这种处理方法会给系统的稳定性带来很大隐患.举个例子, 假设我们系统中下单的功能要依赖50个服务, 每个服务正常响应的概率为99.99%,
如果我们不做容错处理, 只要任意一个服务没有响应下单就失败的话, 我们下单成功的概率为

>99.99<sup>50</sup>  =  99.5%

日订单量为1W的话, 50个会出现下单失败, 这还是建立在依赖服务稳定性很高的情况下(4个9). 但是服务调用失败引起的问题不仅仅是这么简单, 在分布式环境下,
一个服务的调用失败可能会使其他被依赖服务发生延迟和超时, 而且这个影响会很快扩散到其他服务, 从而引发整个系统的雪崩(Avalanche).

####1. hystrix介绍
这篇文章要介绍的Hystrix是一个Java类库, 它提供下面这些功能来帮助我们构建健壮的微服务系统:(对Hystrix已经比较熟悉的同学可以直接跳过这段到下面的Hystrix javanica介绍)  
**1.断路器机制**  
断路器很好理解, 当Hystrix Command请求后端服务失败数量超过一定比例(默认50%), 断路器会切换到开路状态(Open). 这时所有请求会直接失败而不会发送到后端服务.
断路器保持在开路状态一段时间后(默认5秒), 自动切换到半开路状态(HALF-OPEN). 这时会判断下一次请求的返回情况, 如果请求成功, 断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN).
Hystrix的断路器就像我们家庭电路中的保险丝, 一旦后端服务不可用, 断路器会直接切断请求链, 避免发送大量无效请求影响系统吞吐量, 并且断路器有自我检测并恢复的能力.  
**2.Fallback**  
Fallback相当于是降级操作. 对于查询操作, 我们可以实现一个fallback方法, 当请求后端服务出现异常的时候, 可以使用fallback方法返回的值. fallback方法的返回值一般是设置的默认值或者来自缓存.  
**3.资源隔离**  
在Hystrix中, 主要通过线程池来实现资源隔离. 通常在使用的时候我们会根据调用的远程服务划分出多个线程池. 例如调用产品服务的Command放入A线程池, 调用账户服务的Command放入B线程池.
这样做的主要优点是运行环境被隔离开了. 这样就算调用服务的代码存在bug或者由于其他原因导致自己所在线程池被耗尽时, 不会对系统的其他服务造成影响.
但是带来的代价就是维护多个线程池会对系统带来额外的性能开销. 如果是对性能有严格要求而且确信自己调用服务的客户端代码不会出问题的话, 可以使用Hystrix的信号模式(Semaphores)来隔离资源.  

以上是对Hystrix的简单介绍, 如果想进一步了解Hystrix可以访问[GitHub](https://github.com/Netflix/Hystrix/wiki). 现在我们来看如何编写一个Hystrix Command, 代码来自Hystrix的Github:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommandHelloFailure</span> <span class="kd">extends</span> <span class="n">HystrixCommand</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">CommandHelloFailure</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">Setter</span><span class="o">.</span><span class="na">withGroupKey</span><span class="o">(</span><span class="n">HystrixCommandGroupKey</span><span class="o">.</span><span class="na">Factory</span><span class="o">.</span><span class="na">asKey</span><span class="o">(</span><span class="s">&quot;ExampleGroup&quot;</span><span class="o">))</span>
</span><span class='line'>                      <span class="o">.</span><span class="na">andCommandKey</span><span class="o">(</span><span class="n">HystrixCommandKey</span><span class="o">.</span><span class="na">Factory</span><span class="o">.</span><span class="na">asKey</span><span class="o">(</span><span class="s">&quot;HelloWorld&quot;</span><span class="o">))</span>
</span><span class='line'>                      <span class="o">.</span><span class="na">andThreadPoolKey</span><span class="o">(</span><span class="n">HystrixThreadPoolKey</span><span class="o">.</span><span class="na">Factory</span><span class="o">.</span><span class="na">asKey</span><span class="o">(</span><span class="s">&quot;HelloWorldPool&quot;</span><span class="o">)));</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;hello world&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="nf">getFallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hello Failure &quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;!&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
编写一个Hystrix Command, 需要继承`HystrixCommand`类, 在`run`方法中完成你的业务逻辑. 你可以重写`getFallback`方法来在run方法抛出异常的时候返回备用的结果.

<!--more-->

####2. Hystrix javanica介绍

上面的代码写起来有点繁琐, 好在有[javanica](https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica). 这是Hystrix开源社区贡献的一个类库.
使用javanica, 你不需要继承`HystrixCommand`, 只要在方法上添加`@HystrixCommand`注解, 你的方法就能够通过Hystrix运行. 例如下面的代码:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@HystrixCommand</span><span class="o">(</span><span class="n">groupKey</span><span class="o">=</span><span class="s">&quot;ExampleGroup&quot;</span><span class="o">,</span> <span class="n">commandKey</span> <span class="o">=</span> <span class="s">&quot;HelloWorld&quot;</span><span class="o">,</span>
</span><span class='line'>         <span class="n">threadPoolKey</span><span class="o">=</span><span class="s">&quot;HelloWorldPool&quot;</span><span class="o">,</span> <span class="n">fallbackMethod</span> <span class="o">=</span> <span class="s">&quot;defaultHello&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getUserById</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;hello world&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">defaultHello</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello Failure &quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;!&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
这段代码与之前的继承`HystrixCommand`代码所完成的工作是一样的, 如果习惯了使用Java注解和Spring, 一般会更习惯javanica的开发方式.

####3. 在Spring Cloud中使用Hystrix
了解了Hystrix和javanica, 现在我们来看看如何在基于Spring Cloud的项目中使用Hystrix.
#####1. 添加maven依赖
在pom.xml文件中加入下面的依赖
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-hystrix<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>
mysteam项目里, 依赖被加到了`$YOUR_PATH/mysteam/common/pom.xml`文件中.

#####2. Spring配置加上@EnableHystrix注解
`BaseConfiguration`类中加了这个注解, 文件位置在`$YOUR_PATH/mysteam/common/src/main/java/com/akkafun/common/spring/BaseConfiguration.java`.

#####3. 方法上添加@HystrixCommand注解
上篇文章中我们开发了下单的功能. 为了查询账户余额是否足够, 我们调用了`AccountGateway`的`isBalanceEnough`方法:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@HystrixCommand</span><span class="o">(</span><span class="n">ignoreExceptions</span> <span class="o">=</span> <span class="n">RemoteCallException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBalanceEnough</span><span class="o">(</span><span class="n">Long</span> <span class="n">userId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">accountClient</span><span class="o">.</span><span class="na">checkEnoughBalance</span><span class="o">(</span><span class="n">userId</span><span class="o">,</span> <span class="n">amount</span><span class="o">).</span><span class="na">isSuccess</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
这里我们没有指定`commandKey`和`groupKey`参数, `commandKey`的默认值是方法名称`isBalanceEnough`, `groupKey`的默认值是类名`AccountGateway`.
javanica使用AOP来完成普通方法到Hystrix Command的转换, 所以我们只需要在方法上加上`@HystrixCommand`注解, 就能让这个方法成为一个Hystrix Command了, 相当便捷.
这里说明一下`ignoreExceptions = RemoteCallException.class`这个配置的含义. 在Hystrix Command的`run`方法执行的时候, 如果抛出了`HystrixBadRequestException`异常,
是不会触发Fallback逻辑而是直接失败, 这个异常一般被用来提示客户端参数请求错误或者其他需要直接失败的错误.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@HystrixCommand</span><span class="o">(</span><span class="n">ignoreExceptions</span> <span class="o">=</span> <span class="n">RemoteCallException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
这个配置的意思是, 如果方法中抛出了`RemoteCallException`(这个异常是我们自己定义的), javanica会负责将异常包装为`HystrixBadRequestException`并抛出.
这里指定`RemoteCallException`是因为在mysteam中, 远程服务返回的正常错误信息会被包装为`RemoteCallException`抛出, 因为是正常的返回, 我们不想让Hystrix执行Fallback逻辑,
所以在这里配置了ignoreExceptions参数(如果想了解mysteam的http请求和异常处理逻辑, 可以查看`CustomRestTemplate`类和`RestTemplateErrorHandler`类的代码).

####4. 在Spring Cloud中使用Hystrix Dashboard和Turbine
针对生产环境, Netflix还给我们准备了一个非常好用的运维工具,
那就是[Hystrix Dashboard](https://github.com/Netflix/Hystrix/tree/master/hystrix-dashboard)和[Turbine](https://github.com/Netflix/Turbine).  
先上一张图有个直观感受, 来自Turbine的GitHub
<img src="https://github.com/Netflix/Turbine/wiki/images/NetflixDash.jpg">
通过Hystrix Dashboard我们可以在直观地看到各Hystrix Command的请求响应时间, 请求成功率等数据. 但是只使用Hystrix Dashboard的话, 你只能看到单个应用内的服务信息, 这明显不够.
我们需要一个工具能让我们汇总系统内多个服务的数据并显示到Hystrix Dashboard上, 这个工具就是Turbine.  

我在mysteam中已经加了一个turbine模块, 模块名称是`turbine`, 接下来, 让我们启动turbine服务.
#####1. 首先启动EurekaApplication和ConfigApplication
关于mysteam中为什么要先启动这两个服务, 可以参看我[之前的文章](http://skaka.me/blog/2016/08/03/springcloud2/).
#####2. 启动turbine模块下的TurbineApplication
启动完成之后, 打开链接[http://localhost:7777/hystrix](http://localhost:7777/hystrix), 你应该能看见可爱的豪猪logo. 在页面中部的输入框输入你要监控的turbine流地址, 例如输入
`http://localhost:7777/turbine.stream?cluster=ORDER`, 代表我们要监控ORDER服务下所有实例的Hystrix. 输入完成点击`Monitor Stream`按钮, 你就能进入监控UI了. 但是这时应该还没有显示图表,
因为ORDER服务还没有启动. 到此为止, 如果你只是想启动Turbine服务, 那么你已经完成了. 但是如果你想看到实际的监控信息, 还需要启动其他服务并构造数据. 接下来让我们启动其他的5个服务.
#####3. 启动AccountApplication, CouponApplication, OrderApplication, ProductApplication, UserApplication
#####4. 运行integration-test模块下的OrderIntegrationTest.testCreateOrderSuccess方法生成测试数据
`OrderIntegrationTest`类的位置在`$YOUR_PATH/mysteam/integration-test/core/src/test/java/com/akkafun/integrationtest/order/OrderIntegrationTest.java`, 这是一个下单功能的集成测试类.
这个类会模拟真实用户下单, 所以运行这个测试类之前需要把依赖的服务全部启动好. `testCreateOrderSuccess`测试方法运行完成之后, 在浏览器里你应该能看见如下的界面
<img src="/images/custom/20160904/turbine.png">
这张图里, `Circuit`标签下显示的是断路器信息, 其中显示了ORDER服务的两个断路器, 分别是`findProducts`和`isBalanceEnough`, 并且状态都是`Closed`. `Thread Pools`标签下显示的是线程池的信息.
这张图里各参数的详细含义, 大家可以参考[Dashboard的Wiki](https://github.com/Netflix/Hystrix/wiki/Dashboard). 通过Hystrix Dashboard和Turbine, 我们能够很方便地监控每个Hystrix Command的运行情况,
在出现问题的时候能够及时定位到问题所在的服务. Tubine本质是一个数据聚合服务, 我们可以使用Turbine的数据开发一些定制的功能. 比如我之前开发的预警系统, 会实时对Turbine的流式数据进行消费,
在发现Hystrix Command调用失败次数达到一定阀值的时候, 会根据调用链定位到疑似的问题服务并发出告警. 你也可以很容易的将Hystrix Dashbord和Turbine整合到你自己的监控系统里.  

这一篇文章介绍的Hystrix和上一篇文章介绍的Eureka, Ribbon都属于Spring Cloud Netflix这个子项目的内容. 下一篇里我们将把目光移到分布式系统最重要的中间件: MQ,
了解如何使用Spring Cloud Stream与Kafka交互.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Spring Cloud介绍 Part4: 使用Eureka, Ribbon, Feign实现REST服务客户端]]></title>
    <link href="http://skaka.me/blog/2016/08/25/springcloud4/"/>
    <updated>2016-08-25T19:52:31+08:00</updated>
    <id>http://skaka.me/blog/2016/08/25/springcloud4</id>
    <content type="html"><![CDATA[在[上一篇文章](http://skaka.me/blog/2016/08/10/springcloud3/)中我们开发了一个用户注册服务. 这篇文章我将介绍如何开发mysteam订单服务中的下单功能,
下单功能会涉及服务之间的交互与事件的处理, 并且我会对开发过程中用到的框架和类库进行简单地讲解. 开始写代码之前, 我们先来看看下单的处理流程:
<img src="/images/custom/20160825/place_order.png">

其中1,2,3,4,11步的黑色箭头代表是同步操作, 5,6,7,8,9,10步是异步操作.
下单接口接收要订购的产品ID, 数量和要使用的优惠券ID, 然后调用产品服务的接口查询产品信息, 调用优惠券接口校验优惠券是否有效,
以及调用账户接口判断账户金额是否足够(mysteam是一个虚拟物品商城, 采用先充值后购买的形式). 如果这些校验都成功, 订单服务会发送账户扣款事件和优惠券使用事件到MQ,
账户服务和优惠券服务会从MQ读取事件进行处理, 如果处理成功, 订单服务将能接收到结果, 并且将订单状态置为`下单成功`, 如果处理失败或超时, 订单状态会被置为`下单失败`.  

####1. 实现Model
流程清楚了, 现在我们来看代码. 订单类是`$YOUR_PATH/mysteam/order/core/src/main/java/com/akkafun/order/domain/Order.java`, 订单类和前面的用户类类似, 其中有两个字段需要注意一下:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Column</span>
</span><span class='line'><span class="nd">@Enumerated</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">EnumType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="n">OrderStatus</span> <span class="n">status</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@OneToMany</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="n">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">mappedBy</span> <span class="o">=</span> <span class="s">&quot;order&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">OrderItem</span><span class="o">&gt;</span> <span class="n">orderItemList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>
OrderStatus是一个枚举, 表示订单状态. OrderItem是订单项.  

<!-- more -->

####2. 实现DAO
DAO层基本没有实际的代码, 就不贴了.  

####3. 实现Service
下单的业务逻辑都在service内, 打开`$YOUR_PATH/mysteam/order/core/src/main/java/com/akkafun/order/service/OrderService.java`, 找到`placeOrder`方法:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 下订单</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param placeOrderDto</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Order</span> <span class="nf">placeOrder</span><span class="o">(</span><span class="n">PlaceOrderDto</span> <span class="n">placeOrderDto</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//#1</span>
</span><span class='line'>    <span class="c1">//查询产品信息</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">productIds</span> <span class="o">=</span> <span class="n">placeOrderDto</span><span class="o">.</span><span class="na">getPlaceOrderItemList</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">PlaceOrderItemDto:</span><span class="o">:</span><span class="n">getProductId</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">ProductDto</span><span class="o">&gt;</span> <span class="n">productDtoList</span> <span class="o">=</span> <span class="n">productGateway</span><span class="o">.</span><span class="na">findProducts</span><span class="o">(</span><span class="n">productIds</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//#2</span>
</span><span class='line'>    <span class="c1">//查询优惠券信息</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">OrderCoupon</span><span class="o">&gt;</span> <span class="n">orderCouponList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">couponIdSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">placeOrderDto</span><span class="o">.</span><span class="na">getCouponIdList</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">couponIdSet</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//#2</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">CouponDto</span><span class="o">&gt;</span> <span class="n">couponDtoList</span> <span class="o">=</span> <span class="n">couponGateway</span><span class="o">.</span><span class="na">findCoupons</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">couponIdSet</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">orderCouponList</span> <span class="o">=</span> <span class="n">couponDtoList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">couponDto</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">OrderCoupon</span> <span class="n">orderCoupon</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">OrderCoupon</span><span class="o">();</span>
</span><span class='line'>            <span class="n">orderCoupon</span><span class="o">.</span><span class="na">setCouponAmount</span><span class="o">(</span><span class="n">couponDto</span><span class="o">.</span><span class="na">getAmount</span><span class="o">());</span>
</span><span class='line'>            <span class="n">orderCoupon</span><span class="o">.</span><span class="na">setCouponCode</span><span class="o">(</span><span class="n">couponDto</span><span class="o">.</span><span class="na">getCode</span><span class="o">());</span>
</span><span class='line'>            <span class="n">orderCoupon</span><span class="o">.</span><span class="na">setCouponId</span><span class="o">(</span><span class="n">couponDto</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">orderCoupon</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//#3</span>
</span><span class='line'>    <span class="c1">//计算订单金额</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">couponAmount</span> <span class="o">=</span> <span class="n">orderCouponList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToLong</span><span class="o">(</span><span class="nl">OrderCoupon:</span><span class="o">:</span><span class="n">getCouponAmount</span><span class="o">).</span><span class="na">sum</span><span class="o">();</span>
</span><span class='line'>    <span class="n">order</span><span class="o">.</span><span class="na">setPayAmount</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">calcPayAmount</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getTotalAmount</span><span class="o">(),</span> <span class="n">couponAmount</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//检验账户余额是否足够</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getPayAmount</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0L</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">balanceEnough</span> <span class="o">=</span> <span class="n">accountGateway</span><span class="o">.</span><span class="na">isBalanceEnough</span><span class="o">(</span><span class="n">placeOrderDto</span><span class="o">.</span><span class="na">getUserId</span><span class="o">(),</span> <span class="n">order</span><span class="o">.</span><span class="na">getPayAmount</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(!</span><span class="n">balanceEnough</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">AppBusinessException</span><span class="o">(</span><span class="n">CommonErrorCode</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">,</span> <span class="s">&quot;下单失败, 账户余额不足&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//#4</span>
</span><span class='line'>    <span class="n">eventBus</span><span class="o">.</span><span class="na">ask</span><span class="o">(</span>
</span><span class='line'>            <span class="n">AskParameterBuilder</span><span class="o">.</span><span class="na">askOptional</span><span class="o">(</span><span class="n">askReduceBalance</span><span class="o">,</span> <span class="n">askUseCoupon</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">callbackClass</span><span class="o">(</span><span class="n">OrderCreateCallback</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">addParam</span><span class="o">(</span><span class="s">&quot;orderId&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getId</span><span class="o">()))</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">build</span><span class="o">()</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">order</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
代码略长, 我略过了其中一部分代码. `placeOrder`方法主要做的事情有:  
1.根据订购的产品ID, 向产品服务查询产品信息, 并计算订单金额.  
2.如果有使用优惠券, 向优惠券服务查询优惠券是否有效(请求REST接口).  
3.根据订单金额, 向账户服务查询用户余额是否足够(请求REST接口).  
4.如果上述步骤都成功完成, 发送账户扣款事件以及优惠券使用事件(如果有优惠券), 并注册回调方法等待事件结果.  
如果事件处理成功会调用`markCreateSuccess`方法, 处理失败会调用`markCreateFail`, `markCreateSuccess`方法的代码如下:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">markCreateSuccess</span><span class="o">(</span><span class="n">Long</span> <span class="n">orderId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="n">checkOrderBeforeMarkSuccessOrFail</span><span class="o">(</span><span class="n">orderId</span><span class="o">);</span>
</span><span class='line'>    <span class="n">order</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">OrderStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">orderRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
这个方法只是将订单状态置为`下单成功`, 流程就完成了. `markCreateFail`处理过程类似, 只不过是将订单状态改为`下单失败`.  

看到这里, 先不去管服务调用的实现细节, 细心的你可能会产生一些疑问:  
1.第4步为什么要使用事件的形式去扣款和处理优惠券, 不能和前面的查询操作一样使用REST接口来处理吗?  
2.为什么要先查询用户余额是否足够, 再发送扣款事件, 直接发送扣款事件不好吗? 如果查询余额返回成功之后, 其他业务修改了余额, 处理扣款事件的时候余额不足怎么办?  
3.第4步同时发送了扣款事件和优惠券使用事件, 如果扣款成功了, 但是优惠券使用失败了怎么处理?  

其实这些问题都指向同一个问题域: 分布式事务. 分布式事务是开发微服务首先要解决的问题.
分布式事务是一个很大的话题, 这里我只简单介绍一下eBay的Dan Pritchard提出的BASE原则:  
基本可用(Basically Available)  
软状态(Soft state)  
最终一致(Eventually consistent)  

BASE其实和传统数据库的ACID是两个不同的思想, 以我们上面的订单系统为例. 订单服务向账户服务发送扣款事件, 账户服务接收到事件并且处理成功, 但是还没有将处理结果发送到订单服务,
这时候系统数据就处于短暂的不一致状态: 用户的账户余额已经被扣减掉了, 但是订单状态还是`正在下单`. 过了一段时间, 订单服务获取到扣款事件的处理结果并且将订单状态置为`下单成功`.
这个时候系统才达到最终一致的状态. 这种事务处理方法并不是适用于所有业务, 如果需要强一致性, 还是得使用2PC或者3PC来完成.  

了解了mysteam的事务处理原则, 我们回头看看刚才提出的3个问题:  
1.mysteam是使用事件的方式来进行事务处理的, REST接口一般只用来实现查询或者其他不需要事务的操作. 所以只要涉及到数据修改, 一般都通过事件来完成.  
2.发送扣款之前先查询余额是为了减少不必要的事件操作, 因为如果事件处理失败会涉及到事件撤销, 是比较耗时的操作, 先进行余额查询, 余额不足直接流程就中止了.
根据我们的经验, 一般来说查询余额成功后续扣款失败的几率比较小, 所以收益大于付出.
3.这涉及到事件的撤销处理. 在mysteam的订单服务中, 如果接收到了扣款成功和优惠券使用失败这两个事件结果, 订单服务会启动事件撤销流程, 向账户服务发送扣款撤销事件, 并且将订单状态置为下单失败.  

综上, mysteam的事务处理遵循BASE, 实现方式是使用事件. 关于事务的其他细节以及事件如何实现, 我后面会用单独的文章来介绍.
这里我们先回到本篇的主题, 如何调用REST接口. 在这里, 我先简单介绍一下Eureka, Ribbon和Feign这三个组件.  
**[Eureka](https://github.com/Netflix/eureka)**: 服务注册中心. 我们的REST服务在启动的时候会将自己的地址注册到Eureka,
其他需要该服务的应用会请求Eureka进行服务寻址, 得到目标服务的ip地址之后就会使用该地址直连目标服务.  
**[Ribbon](https://github.com/Netflix/ribbon)**: 客户端负载均衡类库. 当客户端请求的目标服务存在多个实例时, Ribbon会将请求分散到各个实例. 一般会结合Eureka一起使用.  
**[Feign](https://github.com/OpenFeign/feign)**: HTTP客户端类库. 我们使用Feign提供的注解编写HTTP接口的客户端代码非常简单, 只需要声明一个Java接口加上少量注解就完成了.  

接下来我们看代码实例. 以账户服务的接口为例, 之前我们在`placeOrder`方法内查询账户余额的代码如下:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">boolean</span> <span class="n">balanceEnough</span> <span class="o">=</span> <span class="n">accountGateway</span><span class="o">.</span><span class="na">isBalanceEnough</span><span class="o">(</span><span class="n">placeOrderDto</span><span class="o">.</span><span class="na">getUserId</span><span class="o">(),</span> <span class="n">order</span><span class="o">.</span><span class="na">getPayAmount</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>
打开`$YOUR_PATH/mysteam/order/core/src/main/java/com/akkafun/order/service/gateway/AccountGateway.java`, 代码如下:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AccountGateway</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">AccountGateway</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="n">AccountClient</span> <span class="n">accountClient</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@HystrixCommand</span><span class="o">(</span><span class="n">ignoreExceptions</span> <span class="o">=</span> <span class="n">RemoteCallException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBalanceEnough</span><span class="o">(</span><span class="n">Long</span> <span class="n">userId</span><span class="o">,</span> <span class="n">Long</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">accountClient</span><span class="o">.</span><span class="na">checkEnoughBalance</span><span class="o">(</span><span class="n">userId</span><span class="o">,</span> <span class="n">amount</span><span class="o">).</span><span class="na">isSuccess</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
AccountClient是一个加了Feign注解的接口:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">AccountUrl</span><span class="o">.</span><span class="na">SERVICE_HOSTNAME</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AccountClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">AccountUrl</span><span class="o">.</span><span class="na">CHECK_ENOUGH_BALANCE</span><span class="o">)</span>
</span><span class='line'>    <span class="n">BooleanWrapper</span> <span class="nf">checkEnoughBalance</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&quot;userId&quot;</span><span class="o">)</span> <span class="n">Long</span> <span class="n">userId</span><span class="o">,</span> <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;balance&quot;</span><span class="o">)</span> <span class="n">Long</span> <span class="n">balance</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
`@FeignClient`注解需要声明一个service id, 这个service id就是我们在YAML配置文件中配的`spring.application.name`的值, 比如`account.yml`中的`spring.application.name`值是`account`.
我们请求的REST接口需要一个url路径参数userId, 以及一个查询参数balance. 我们在代码中不需要直接调用Ribbon的代码, Feign会帮我们处理好一切.
根据我们的`AccountClient`接口声明, Feign会在Spring容器启动之后, 将生成的代理类注入`AccountGateway`,
所以我们不需要写HTTP调用的实现代码就能完成REST接口的调用.  

到这里下单的逻辑就完成了. 我们知道在分布式环境下, 服务之间的依赖都是脆弱而且不稳定的, 极有可能因为一个服务实例的延迟或宕机造成所有服务不可用.
所以mysteam中引入了hystrix. 细心的同学可能已经在`AccountGateway`中发现`@HystrixCommand`注解了, 下篇文章我将介绍hystrix的基本用法, 以及如何使用hystrix board和turbine来监控hystrix服务.

对这篇博客或者这个系列有问题的同学欢迎留言讨论: )
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Spring Cloud介绍 Part3: Mysteam项目结构与开发用户注册服务]]></title>
    <link href="http://skaka.me/blog/2016/08/10/springcloud3/"/>
    <updated>2016-08-10T10:06:10+08:00</updated>
    <id>http://skaka.me/blog/2016/08/10/springcloud3</id>
    <content type="html"><![CDATA[在[上一篇文章](http://skaka.me/blog/2016/08/04/springcloud2/)中我们简单的了解了一下Spring Cloud.
因为Spring Cloud相关的内容较多, 所以我建了一个项目mysteam来演示Spring Cloud的使用, [GitHub地址](https://github.com/sunnykaka/mysteam).

####1. 项目结构
这是一个Maven项目, 下载下来之后直接导入IDE, 你会看到如下的项目结构(我用的是Intellij IDEA):
<img src="/images/custom/20160810/mysteam_structure.png">

普通目录:  
docs: 存放文档资料, 例如数据库脚本, astah文件(UML工具)等.  
logs: 运行日志存放目录.  
公共模块:  
apiutils: api模块公共父模块.  
common: 服务模块公共父模块, 存放微服务共同依赖的逻辑, 例如事件处理, 定时任务等.  
utils: 工具类模块.  
基础服务模块:  
eureka: eureka服务. 提供服务注册与服务发现. 这个服务之后会有专门的文章来介绍.  
config: config服务. 提供配置管理服务. 这个服务之后会有专门的文章来介绍.  
turbine: hystrix服务监控. 这个服务之后会有专门的文章来介绍.  
服务模块:  
account: 账户服务.  
coupon: 优惠券服务.  
order: 订单服务.  
product: 产品服务.  
user: 用户服务.  
其他模块:  
integration-test: 集成测试模块.  

这些模块内部的项目结构大多类似, 以服务模块user为例.  
api: api接口模块. 其他依赖user服务的服务会依赖这个模块.  
core: user服务实现模块.  
api和core模块内容都是标准的maven项目结构, 其中core模块主要有这么一些子目录:  
context: 存放Spring Boot启动类.  
dao: DAO层.  
domain: Model层.
service: Service层.  
web: 存放Spring MVC Controller.  

值得特别说明的是, 在真实的项目中, 一般每个服务都是一个独立的项目, 彼此之间只是通过pom引用. 如果代码都放到一个项目中,
过一段时间你会发现每次打开IDE都是件痛苦的事情, 而且IDE运行速度会奇慢无比. 这样做也违背了微服务开发的本意: 各个服务之间相对独立.
mysteam把所有的服务都放到一个项目中只是为了方便演示和运行. 如果你想将mysteam的模块都拆到独立项目中去也是相当的简单, 只要修改pom文件即可.  

好了, 项目结构介绍完, 接下来我们要做点正事了: ) 实现用户注册服务.

####2. 实现Model
用户表的结构相当简单, 只有三个字段. sql文件在`$YOUR_PATH/mysteam/user/docs/user-service.sql`. 我们首先创建实体类.
文件位置在`$YOUR_PATH/mysteam/user/core/src/main/java/com/akkafun/user/domain/User.java`.
<!-- more -->
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;user&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="n">VersionEntity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Id</span>
</span><span class='line'>    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Column</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Column</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
实体类很简单, 使用的是JPA注解, 继承抽象基类VersionEntity来获得乐观锁控制功能.  

####3. 实现DAO
DAO层使用的是[Spring Data JPA](http://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/),  
目录在`$YOUR_PATH/mysteam/user/core/src/main/java/com/akkafun/user/dao`, DAO相对简单也不是重点, 这里就不介绍了.

####4. 实现Service
Service类是`$YOUR_PATH/mysteam/user/core/src/main/java/com/akkafun/user/service/UserService.java`, 我们看一下用户注册的业务逻辑:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Transactional</span>
</span><span class='line'><span class="kd">public</span> <span class="n">User</span> <span class="nf">register</span><span class="o">(</span><span class="n">RegisterDto</span> <span class="n">registerDto</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">isUsernameExist</span><span class="o">(</span><span class="n">registerDto</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">()))</span> <span class="o">{</span>                         <span class="c1">//1</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AppBusinessException</span><span class="o">(</span><span class="n">UserErrorCode</span><span class="o">.</span><span class="na">UsernameExist</span><span class="o">,</span>
</span><span class='line'>                <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;用户名%s已存在&quot;</span><span class="o">,</span> <span class="n">registerDto</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">();</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">registerDto</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">PasswordHash</span><span class="o">.</span><span class="na">createHash</span><span class="o">(</span><span class="n">registerDto</span><span class="o">.</span><span class="na">getPassword</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">GeneralSecurityException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;创建哈希密码的时候发生错误&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AppBusinessException</span><span class="o">(</span><span class="s">&quot;用户注册失败&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">userRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>                                                                  <span class="c1">//2</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//用户创建事件</span>
</span><span class='line'>    <span class="n">eventBus</span><span class="o">.</span><span class="na">publish</span><span class="o">(</span><span class="k">new</span> <span class="nf">UserCreated</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getCreateTime</span><span class="o">()));</span>  <span class="c1">//3</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isUsernameExist</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">isUsernameExist</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
1.注册之前首先判断用户名是否存在, 判断逻辑在UserRepositoryImpl类里. 如果用户名重复就抛出异常.  
2.调用DAO的save方法持久化用户到数据库.  
3.发送用户创建事件.  

注意register方法上有`@Transactional`注解, 代表事务边界是在service层. register方法构成一个事务, 包括事件发送.
关于事件处理后续有专门的文章介绍, 这里先略过.

####5. 实现Controller
现在来看下Controller层的处理. 打开`$YOUR_PATH/mysteam/user/core/src/main/java/com/akkafun/user/web/UserController.java`:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">produces</span> <span class="o">=</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>                  <span class="c1">//1</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">USER_REGISTER_URL</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">UserDto</span> <span class="nf">register</span><span class="o">(</span><span class="nd">@Valid</span> <span class="nd">@RequestBody</span> <span class="n">RegisterDto</span> <span class="n">registerDto</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">//2</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="n">registerDto</span><span class="o">);</span>                        <span class="c1">//3</span>
</span><span class='line'>        <span class="n">UserDto</span> <span class="n">userDto</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UserDto</span><span class="o">();</span>
</span><span class='line'>        <span class="n">userDto</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
</span><span class='line'>        <span class="n">userDto</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">userDto</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
这就是一个很普通的Spring MVC Controller.  
1. 我们的Rest服务暂且只提供json数据的请求和响应, 所以在class级别加了一个注解`@RequestMapping(produces = MediaType.APPLICATION_JSON_VALUE)`.  
2. 注册是POST请求, 我们使用DTO对象RegisterDto来收集数据. 注意RegisterDto是user服务的api模块提供的, 意味着其他依赖了user服务的模块可以直接使用RegisterDto.
RequestBody类使用了[Java Validation](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html)注解来校验参数的合法性.  
3. 调用UserService的register方法完成注册, 然后将User实体对象转化成UserDto对象返回.  

####6. 运行
到此就开发完了. 现在我们可以启动user服务来看一下效果(user服务运行在23101端口).  
(**提示: 运行下面的UserApplication之前, 需要先启动Eureka服务和Config服务, 启动方法请参考[上一篇文章](http://skaka.me/blog/2016/08/04/springcloud2/).**)  
打开`$YOUR_PATH/mysteam/user/core/src/main/java/com/akkafun/context/web/UserApplication.java`, 直接运行main方法.
项目启动之后, 在浏览器访问http://localhost:23101/swagger-ui.html, 你应该能看见如下的页面:
<img src="/images/custom/20160810/user_swagger_ui.png">

这个页面是[SpringFox](http://springfox.github.io/springfox)根据我们的Controller类, 自动生成的swagger ui页面.
关于swagger和SpringFox, 之后会有专门的文章来介绍. 这个页面列出了user服务下所有的api信息(暂时只有一个register), 包括url链接, 请求参数, 返回值等,
你也可以在Controller类中加入`@ApiOperation`这种Swagger注解来对接口进行更详细的描述. 此外, 在这个页面你还可以直接对api进行测试, 例如在registerDto参数栏填入
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s">&quot;password&quot;</span><span class="o">:</span> <span class="s">&quot;123456&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s">&quot;username&quot;</span><span class="o">:</span> <span class="s">&quot;aaa&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
然后点击下面的Try it out!按钮, 你就能看见服务器的返回结果了.  

大功告成. 整个过程除去实体类的话, 真正的业务代码只有几十行. 代码量虽少, 但是我们已经开发了一个完整的注册服务,
服务不但自动生成了完整的API文档, 同时已经能通过Eureka被其他服务调用了(下一篇文章演示).
当然, 这一切都仰仗于Spring Cloud, Netflix OSS, SpringFox, Swagger等一系列开源软件的帮助, 程序员的生产力也因此越来越高.
看着上面的步骤, 你也许会觉得, 开发一个微服务也是相当简单的嘛. 事实上, 我们还没有接触到真正的难点, 因为服务之间还没有交互.
下篇文章我会通过下单服务, 介绍如何进行服务之间的相互调用以及如何处理事件来保证事务完整性.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Spring Cloud介绍 Part2: Spring Cloud与微服务]]></title>
    <link href="http://skaka.me/blog/2016/08/03/springcloud2/"/>
    <updated>2016-08-03T22:09:25+08:00</updated>
    <id>http://skaka.me/blog/2016/08/03/springcloud2</id>
    <content type="html"><![CDATA[之前介绍过[微服务的概念与Finagle框架](http://skaka.me/blog/2016/03/19/finagle1/), 这个系列介绍Spring Cloud.

Spring Cloud还是一个相对较新的框架, 今年(2016)才推出1.0的release版本. 虽然Spring Cloud时间最短, 但是相比我之前用过的Dubbo和Finagle, Spring Cloud提供的功能最齐全.

Spring Cloud完全依赖于Spring Boot, 我先简单介绍下Spring Boot.
[Spring Boot](http://projects.spring.io/spring-boot/)是Pivotal在Spring基础上推出的一个支持快速开发的框架. 如果是新项目, 建议基于Spring Boot而不是Spring.
以前使用Spring的项目, 需要自己指定一大堆项目依赖, 例如依赖Spring Core, Spring MVC, Mybatis等等, Spring Boot将这些依赖都模块化好了, 你不再需要自己手动去添加多个依赖项.
另外Spring Boot默认内嵌了一个Servlet容器, 你的页面可以直接通过main方法启动访问了, 不再需要部署到单独的应用服务器中, 这样应用的开发调试都会方便很多.
Spring Boot的这些特点使得它比较适合用来做微服务的基础框架, 但是要开发一个完整的微服务系统可不仅仅是从命令行启动一个web系统这么简单. Pivotal看到了这点, 推出了Spring Cloud.

[Spring Cloud](http://projects.spring.io/spring-cloud/)基于Spring Boot, 由众多的子项目组成. 例如[Spring Cloud Config](http://cloud.spring.io/spring-cloud-config)是一个中心化的配置管理服务,
用来解决微服务环境下配置文件分散管理的难题, [Spring Cloud Stream](http://cloud.spring.io/spring-cloud-stream)是一个消息中间件抽象层, 目前支持Redis, Rabbit MQ和Kafka,
[Spring Cloud Netflix](http://cloud.spring.io/spring-cloud-netflix)整合了[Netflix OSS](https://netflix.github.io/), 可以直接在项目中使用Netflix OSS.
目前Spring Cloud的子项目有接近20个, 如果要使用Spring Cloud, 务必先将子项目都了解一遍, 得知道哪些功能Spring Cloud已经提供了, 避免团队花费大量时间重复造轮子.

Spring Cloud是伴随着微服务的概念诞生的. 毫无疑问, 微服务真正落地是一项艰巨的任务. 不但是技术的变革, 也是开发方式的转变. 仅仅依靠Dubbo或Spring Cloud开发几个互相调用的服务不能算做是微服务.
一个合格的微服务系统必然包括从设计(从业务层面划分服务, 独立数据库), 到开发(选用合适的架构和工具, 解决CAP问题), 到测试(持续集成, 自动化测试), 到运维(容器化, 服务监控, 服务容错)的一系列解决方案.

我这个系列的博客就是介绍如何借助Spring Cloud和Netflix OSS, 来解决上面提到的问题.
之后的博客主要会涉及下面这些技术:  
**使用eureka和Netflix Ribbon进行服务注册和服务发现**  
**使用Spring Cloud Stream, zookeeper和kafka实现分布式事务**  
**使用hystrix实现服务隔离, 并且用hystrix dashboard和turbine监控hystrix服务**  
**使用Spring MVC和Swagger实现REST API**  
**使用Spring Cloud Config实现配置集中管理**  
**使用Spring Cloud Sleuth与Zipkin实现服务监控**  
...  

内容比较多, 我会分成多篇博客. 我不想泛泛地谈概念, 这样有点无趣, 对实际工作也起不到什么帮助.
我为演示这些技术的使用, 搭建了一个项目: mysteam.
我选择了一个简单的问题域, 电商系统里最基础的下单功能. 围绕下单功能, 系统拆分成了五个服务:  
**用户服务(user service)**  
**账户服务(account service)**  
**产品服务(product service)**  
**优惠券服务(coupon service)**  
**订单服务(order service)**  
下面是mysteam的架构示意图:
<img src="/images/custom/20160804/mysteam_arch.png">
我们的关注点主要在Backend Services和MQ, MySQL这一部分. 服务之间通过Rest API和事件进行通信. Rest API主要用来进行一些只读等不需要事务的操作,
涉及事务的操作一般使用事件来完成. 具体怎么做后面有专门的博客来介绍.

首先, 让我们来个Hello World, 先介绍如何将mysteam下载下来并启动.
一旦涉及微服务, 项目结构和环境都会比较复杂, 我已经尽量简化了, 请系好安全带: )

####1. 环境准备
**JDK 8+**  
**MySQL**  
**[kafka 0.8.22](https://www.apache.org/dyn/closer.cgi?path=/kafka/0.8.2.2/kafka_2.11-0.8.2.2.tgz)**  
**zookeeper** (可以下载, 也可以直接使用kafka自带的zookeeper)  
**Intellij IDEA或Eclipse** (这个项目结构比较复杂, IDE能起到很大帮助)  

<!-- more -->

####2. 从GitHub上下载项目
需要下载两个项目:  
**[mysteam](https://github.com/sunnykaka/mysteam)**  
**[mysteam-config-repo](https://github.com/sunnykaka/mysteam-config-repo)**  
mysteam是主项目, mysteam-config-repo是配置文件存放仓库, 后面讲Spring Cloud Config的时候会用到.

####3. 修改配置文件
######1. 修改配置文件读取路径
假设你的mysteam-config-repo项目存放路径是`D:/mysteam-config-repo`,
打开`$YOUR_PATH/mysteam/config/src/main/resources/application.yml`, 找到`uri: https://github.com/sunnykaka/mysteam-config-repo`这一行,
替换为`uri: file:///D:/mysteam-config-repo`.(如果你是linux系统, 并且mysteam-config-repo项目存放路径是`/home/my/mysteam-config-repo`,
则改为`uri: file:///home/my/mysteam-config-repo`).

######2. 修改kafka和zookeeper地址
打开`$YOUR_PATH/mysteam/config/src/main/resources/application.yml`, 将`brokers: 192.168.239.129:9092,192.168.239.129:9093,192.168.239.129:9094`修改成你的
kafka地址, 将`zkNodes: 192.168.239.129:2181`修改成你的zookeeper地址.
打开`$YOUR_PATH/mysteam-config-repo/application.yml`, 同样, 将`brokers: 192.168.239.129:9092,192.168.239.129:9093,192.168.239.129:9094`修改成你的
kafka地址, 将`zkNodes: 192.168.239.129:2181`修改成你的zookeeper地址.

######3. 修改MySQL数据库地址
进入`$YOUR_PATH/mysteam-config-repo`目录, 打开`account.yml`, `coupon.yml`, `order.yml`, `product.yml`, `user.yml`这几个文件,
找到`datasource`的配置, 将数据库的ip地址和端口, 以及用户名和密码修改成你的配置.

######4. 初始化数据库
数据库初始化文件是`$YOUR_PATH/mysteam/docs/init_database.sql`. 执行方法(假设你的mysteam目录是`D:/mysteam`, 数据库在本机3306, 用户名密码都是root):
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">cd</span> <span class="nl">D:</span><span class="o">/</span><span class="n">mysteam</span>
</span><span class='line'><span class="n">mysql</span> <span class="o">-</span><span class="n">uroot</span> <span class="o">-</span><span class="n">proot</span> <span class="o">&lt;</span> <span class="n">docs</span><span class="o">/</span><span class="n">init_database</span><span class="o">.</span><span class="na">sql</span>
</span></code></pre></td></tr></table></div></figure>
执行完成之后, 进入数据库应该可以看见5个数据库已经初始化好了.

####5. 启动Eureka服务, Config服务, 并运行测试.
主要介绍如何在IDE中启动服务.
因为Eureka和Config服务被其他服务使用, 所以要首先启动这两个服务. 其中Eureka服务要最先启动.
######1. 启动Eureka服务, 运行在1111端口
打开`$YOUR_PATH/mysteam/eureka/src/main/java/com/akkafun/eureka/EurekaApplication.java`, 直接运行main方法.
######2. 启动Config服务, 运行在8888端口.
打开`$YOUR_PATH/mysteam/config/src/main/java/com/akkafun/config/ConfigApplication.java`, 直接运行main方法.
######3. 运行EventBusTest测试.
打开`$YOUR_PATH/mysteam/user/core/src/test/java/com/akkafun/common/event/service/EventBusTest.java`, 运行junit测试.

这个测试的运行时间稍长, 在我机器上需要3分钟左右. 如果测试全部通过, 代表环境OK了.
如果运行报错, 则检查下前面的步骤看看问题出在哪儿. 特别关注下kafka和zookeeper的服务是不是启动了, 并且ip是否正确.

下一篇我会介绍mysteam的maven项目结构, 以及实现用户注册功能.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Finagle介绍 Part3: 在Finagle中开发基于Thrift协议的应用]]></title>
    <link href="http://skaka.me/blog/2016/05/02/finagle3/"/>
    <updated>2016-05-02T21:32:55+08:00</updated>
    <id>http://skaka.me/blog/2016/05/02/finagle3</id>
    <content type="html"><![CDATA[在[上篇文章](http://skaka.me/blog/2016/05/01/finagle2/)中我们开发了一个基于Http协议的echo服务端和客户端.
这篇文章我们将开发一个基于Thrift协议的客户端和服务端.
这两篇文章对应的源代码地址在[Github](https://github.com/sunnykaka/java-finagle-example).
代码中有Java和Scala版本两套版本的实现, 但是这里我只会介绍Java版本.  

[Thrift](http://thrift.apache.org/)最早由Facebook开源, 后被Apache收录成为顶级项目. Thrift严格来说不只是一种协议,
而是一个RPC框架. 使用Thrift, 我们只需要定义好使用的类型和接口声明, Thrift的代码生成工具能够自动为我们生成客户端和服务端代码.
我们现在来看如何在Finagle中使用Thrift.  

首先定义一个Thrift的IDL文件, 文件位置在`java-finagle-example/src/main/thrift/DemoService.thrift`:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">namespace</span> <span class="n">java</span> <span class="n">com</span><span class="o">.</span><span class="na">akkafun</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">thrift</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="n">DemoService</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">string</span> <span class="nf">method1</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">i32</span> <span class="nf">method2</span><span class="o">(</span><span class="mi">1</span><span class="o">:</span> <span class="n">i32</span> <span class="n">a</span><span class="o">,</span> <span class="mi">2</span><span class="o">:</span> <span class="n">i32</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">method3</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
定义了一个DemoService服务, 这个服务有三个示例方法. `namespace`的语法是为接口定义一个命名空间(对应Java里的包).
method1没有参数, 方法的返回值类型是字符串. method2有两个参数, a和b, 参数和返回值类型都是int32类型.
method3无参数, 无返回值.  
<!--more-->
现在我们来生成代码. Twitter提供了一个开源的工具[Scrooge](https://github.com/twitter/scrooge)用来生成Finagle + Thrift的代码.
我们使用Scrooge提供的maven插件用来生成代码. 这个插件的配置可以查看`pom.xml`, 这里不做介绍.
运行maven命令: `mvn clean compile`, 生成的代码在`java-finagle-example/target/classes/thrift`目录下.
这里我们生成的是Scala代码. 虽然Scrooge提供Java代码的生成, 但是实际使用存在bug.
我们需要将这些代码手动拷贝到源代码目录下. 将这些代码拷贝到`java-finagle-example/src/main/scala/thrift`目录下.

现在我们来实现Thrift服务端代码. 打开`java-finagle-example/src/main/java/com/akkafun/finagle/thrift/ThriftServer.java`:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThriftServer</span> <span class="kd">implements</span> <span class="n">DemoService</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ListeningServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">Thrift</span><span class="o">.</span><span class="na">serveIface</span><span class="o">(</span><span class="s">&quot;127.0.0.1:8081&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">ThriftServer</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">result</span><span class="o">(</span><span class="n">server</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">method1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;implement method1&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="s">&quot;abc&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">method2</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;implement method2&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">BoxedUnit</span><span class="o">&gt;</span> <span class="nf">method3</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;implement method3&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
我们使用maven命令生成的Scala代码, 里面有一个DemoService接口. 我们现在要做的事情就是实现这个接口.
我们需要实现DemoService接口声明的三个方法. 上面的实现都只是打印内容和返回简单的值.
实现了这个接口, 接下来我们就可以写启动服务的代码了.
上篇文章中我们启动Http服务器的时候使用的是`Http.server`相关的方法. 现在启动Thrift服务端可以使用`Thrift.serveIface`方法.
第一个参数传入监听的ip和端口, 第二个参数传入接口的实现类. 这样服务端的代码就完成了.

Thrift的客户端代码也相当简单. 打开`java-finagle-example/src/main/java/com/akkafun/finagle/thrift/ThriftClient.java`:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThriftClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">Function1</span><span class="o">&lt;</span><span class="n">Throwable</span><span class="o">,</span> <span class="n">BoxedUnit</span><span class="o">&gt;</span> <span class="n">errorFunc</span> <span class="o">=</span> <span class="n">func</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;error: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DemoService</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&gt;</span> <span class="n">demoService</span> <span class="o">=</span> <span class="n">Thrift</span><span class="o">.</span><span class="na">newIface</span><span class="o">(</span><span class="s">&quot;127.0.0.1:8081&quot;</span><span class="o">,</span> <span class="n">DemoService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">future1</span> <span class="o">=</span> <span class="n">demoService</span><span class="o">.</span><span class="na">method1</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">future2</span> <span class="o">=</span> <span class="n">demoService</span><span class="o">.</span><span class="na">method2</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">BoxedUnit</span><span class="o">&gt;</span> <span class="n">future3</span> <span class="o">=</span> <span class="n">demoService</span><span class="o">.</span><span class="na">method3</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">future1</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">future1</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">errorFunc</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">future2</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">future2</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">errorFunc</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">future3</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">future3</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">errorFunc</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">ready</span><span class="o">(</span><span class="n">future1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">ready</span><span class="o">(</span><span class="n">future2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">ready</span><span class="o">(</span><span class="n">future3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
客户端代码中, 通过调用`Thrift.newIface`我们构造了一个DemoService的stub.
之后即可对DemoService的方法进行调用. 虽然调用方式看起来很像是本地调用, 实际上还是RPC.
DemoService的服务端实现只是很简单的返回了几个值, 客户端实现只是把返回值打印了出来.现在我们来运行看看.
首先启动ThriftServer类, 然后启动ThriftClient. ThriftClient运行完毕自动结束, 你应该能在ThriftClient的控制台看到如下输出:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">implement</span> <span class="n">method2</span>
</span><span class='line'><span class="n">implement</span> <span class="n">method3</span>
</span><span class='line'><span class="n">implement</span> <span class="n">method1</span>
</span></code></pre></td></tr></table></div></figure>
ThriftServer控制台的输出:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="o">()</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="n">abc</span>
</span></code></pre></td></tr></table></div></figure>
无论是客户端还是服务端, 方法被调用的顺序都是不固定的. 因为客户端的RPC调用是异步执行.

Finagle的开发实战就暂时介绍到这里. 通过前面的介绍你应该能了解到, 使用Finagle开发一个服务是非常的简单.
但是实际的多服务项目中, 几乎不会直接通过ip和端口来访问服务,
而是使用[zookeeper](http://zookeeper.apache.org/)或[etcd](https://github.com/coreos/etcd)这种注册中心来完成.
下篇文章我会介绍如何将Finagle服务注册到zookeeper中以及如何使用[zipkin](https://github.com/twitter/zipkin)来监控Finagle服务.
]]></content>
  </entry>
  
</feed>
