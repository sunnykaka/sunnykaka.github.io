<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | skaka的博客]]></title>
  <link href="http://skaka.me/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://skaka.me/"/>
  <updated>2015-08-21T09:12:30+08:00</updated>
  <id>http://skaka.me/</id>
  <author>
    <name><![CDATA[skaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[给Java开发者的Play Framework(2.4)介绍 Part2：使用Play，Spring，JPA进行开发]]></title>
    <link href="http://skaka.me/blog/2015/08/17/play2/"/>
    <updated>2015-08-17T20:19:50+08:00</updated>
    <id>http://skaka.me/blog/2015/08/17/play2</id>
    <content type="html"><![CDATA[<h3>1. 介绍</h3>

<p>这篇文章会使用Play，Spring，JPA（hibernate）开发一个简单的CRUD功能，主要是为了介绍如何使用Play进行开发。</p>

<h3>2. 界面截图</h3>

<p><img src="/images/custom/20150818/play2_1.png">
<img src="/images/custom/20150818/play2_2.png">
很简单的新增和查询功能。我们来看看代码如何实现。</p>

<h3>3. 代码实现</h3>

<h4>1. Model</h4>

<p>代码架构使用典型的MVC，分层为Controller-Service-Dao-Model。首先来看Model。</p>

<pre><code class="java">//省略了部分字段
@Table(name = "test_object")
@Entity
public class TestObject implements EntityClass&lt;Integer&gt;, OperableData {

    private Integer id;

    private String orderNo;

    /**
     * 状态
     */
    private TestObjectStatus status;

    //...
    /**
     * 下单时间
     */
    private DateTime buyTime;
    //...

    private List&lt;TestObjectItem&gt; testObjectItemList = new ArrayList&lt;&gt;(0);


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "testObject")
    public List&lt;TestObjectItem&gt; getTestObjectItemList() {
        return testObjectItemList;
    }

    public void setTestObjectItemList(List&lt;TestObjectItem&gt; testObjectItemList) {
        this.testObjectItemList = testObjectItemList;
    }

    @GeneratedValue(strategy = GenerationType.AUTO)
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }


    @Column(name = "status")
    @Enumerated(EnumType.STRING)
    public TestObjectStatus getStatus() {
        return status;
    }

    public void setStatus(TestObjectStatus status) {
        this.status = status;
    }


    @Column(name = "buy_time")
    @Type(type="org.jadira.usertype.dateandtime.joda.PersistentDateTime")
    public DateTime getBuyTime() {
        return buyTime;
    }

    public void setBuyTime(DateTime buyTime) {
        this.buyTime = buyTime;
    }


}
</code></pre>

<p>很普通的Entity，使用JPA注解，唯一需要注意的是在处理枚举类型和Joda DateTime类型的时候用到了不同的类型注解。</p>

<h4>2. Dao</h4>

<pre><code class="java">//省略了部分方法
@Repository
public class GeneralDao {

    @PersistenceContext
    EntityManager em;

    public GeneralDao(){}

    public GeneralDao(EntityManager em) {this.em = em;}

    public EntityManager getEm() {
        return em;
    }

    /**
     * 使用jpql进行查询
     * @param ql jpql
     * @param page 分页对象,可选
     * @param queryParams 查询参数
     * @param &lt;T&gt;
     * @return
     */
    public &lt;T&gt; List&lt;T&gt; query(String ql, Optional&lt;Page&lt;T&gt;&gt; page, Map&lt;String, Object&gt; queryParams) {
      //...
    }

    /**
     * 使用jpql进行数据更新操作
     * @param ql
     * @param queryParams
     * @return
     */
    public int update(String ql, Map&lt;String, Object&gt; queryParams) {
      //...
    }

    public &lt;T extends EntityClass&lt;Integer&gt;&gt; void persist(T t) {
        setOperableDataIfNecessary(t, t.getId() == null || t.getId() == 0);
        em.persist(t);
    }

    public &lt;T extends EntityClass&lt;Integer&gt;&gt; T merge(T t) {
        setOperableDataIfNecessary(t, t.getId() == null || t.getId() == 0);
        return em.merge(t);
    }

    public &lt;T extends EntityClass&lt;Integer&gt;&gt; boolean remove(T t) {
        if(t != null) {
            em.remove(t);
            return true;
        } else {
            return false;
        }
    }

    public &lt;T extends EntityClass&lt;Integer&gt;&gt; boolean removeById(Class&lt;T&gt; type, Integer id) {
        T t = get(type, id);
        return remove(t);
    }

    public &lt;T extends EntityClass&lt;Integer&gt;&gt; T get(Class&lt;T&gt; type, Integer id) {
        return em.find(type, id);
    }

    public void flush() {
        em.flush();
    }

    public &lt;T extends EntityClass&lt;Integer&gt;&gt; void refresh(T t) {
        em.refresh(t);
    }

    public &lt;T extends EntityClass&lt;Integer&gt;&gt; void detach(T t) {
        em.detach(t);
    }
}
</code></pre>

<p>这里使用的是通用Dao，一般的增删改查操作可以直接通过该Dao完成。可以看出这个Dao只是对JPA的EntityManager一个简单封装，
大部分操作还是委派给EntityManager完成。代码中也可以直接取得EntityManager进行操作。</p>

<!-- more -->


<h4>3. Service</h4>

<pre><code class="java">//省略了部分方法
@Service
public class TestObjectService {

    @PersistenceContext
    EntityManager em;

    @Autowired
    GeneralDao generalDao;

    @Transactional(readOnly = true)
    public List&lt;TestObject&gt; findByKey(Optional&lt;Page&lt;TestObject&gt;&gt; page, Optional&lt;String&gt; orderNo, Optional&lt;TestObjectStatus&gt; status,
            Optional&lt;DateTime&gt; createTimeStart, Optional&lt;DateTime&gt; createTimeEnd) {

        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery&lt;TestObject&gt; cq = cb.createQuery(TestObject.class);
        Root&lt;TestObject&gt; order = cq.from(TestObject.class);

        List&lt;Predicate&gt; predicateList = new ArrayList&lt;&gt;();
        if(orderNo.isPresent()) {
            predicateList.add(cb.equal(order.get("orderNo"), orderNo.get()));
        }
        if(createTimeStart.isPresent()) {
            predicateList.add(cb.greaterThanOrEqualTo(order.get("createTime"), createTimeStart.get()));
        }
        if(createTimeEnd.isPresent()) {
            predicateList.add(cb.lessThanOrEqualTo(order.get("createTime"), createTimeEnd.get()));
        }
        if(status.isPresent()) {
            predicateList.add(cb.equal(order.get("status"), status.get()));
        }

        cq.select(order).where(predicateList.toArray(new Predicate[predicateList.size()])).orderBy(cb.desc(order.get("updateTime")));

        TypedQuery&lt;TestObject&gt; query = em.createQuery(cq);

        if(page.isPresent()) {
            CriteriaQuery&lt;Long&gt; countCq = cb.createQuery(Long.class);
            countCq.select(cb.count(countCq.from(TestObject.class))).where(predicateList.toArray(new Predicate[predicateList.size()]));
            Long count = em.createQuery(countCq).getSingleResult();
            page.get().setTotalCount(count.intValue());

            query.setFirstResult(page.get().getStart());
            query.setMaxResults(page.get().getLimit());
        }

        List&lt;TestObject&gt; results = query.getResultList();

        if(page.isPresent()) {
            page.get().setResult(results);
        }

        return results;
    }


    @Transactional(readOnly = true)
    public TestObject get(Integer id) {
        return generalDao.get(TestObject.class, id);
    }

}
</code></pre>

<p>findByKey方法是一个查询方法，这里使用的是JPA的Criteria查询。Service类没有使用接口，只有实现类。Service就是一个Spring管理的Bean，
事务边界在Service层。</p>

<h4>4. Controller</h4>

<pre><code class="java">//省略了部分方法
@org.springframework.stereotype.Controller
public class TestObjectController extends Controller {

    @Autowired
    private TestObjectService testObjectService;


    public Result list(String status, String orderNo) {

        List&lt;TestObject&gt; testObjectList = testObjectService.findByKey(of(PageFactory.getPage(request())), ofNullable(orderNo),
                ofNullable(status).map(TestObjectStatus::valueOf), empty(), empty());

        return ok(list.render(testObjectList));
    }

    public Result addPage() {
        return ok(add.render(Form.form(TestObject.class)));
    }

    public Result updatePage(Integer id) {
        return ok(update.render(Form.form(TestObject.class).fill(testObjectService.get(id))));
    }

    //...
}
</code></pre>

<p>Controller继承play.mvc.Controller。和SpringMVC一样，在Play中，Controller就是一系列Action的集合。例如我开发用户有关的功能，
那么我就建一个UserController，然后把用户的CRUD方法都放在UserController里，每个方法都有自己的路由规则。这里我们先来看list方法：</p>

<pre><code class="java">public Result list(String status, String orderNo) {

    List&lt;TestObject&gt; testObjectList = testObjectService.findByKey(of(PageFactory.getPage(request())), ofNullable(orderNo),
            ofNullable(status).map(TestObjectStatus::valueOf), empty(), empty());

    return ok(list.render(testObjectList));
}
</code></pre>

<p>这里list的功能是查询出所有满足条件的测试对象（TestObject对象）。首先来看参数，这里声明了两个查询参数status和orderNo，用来匹配Http请求QueryString中的参数，
这和SpringMVC中声明了RequestParam(&ldquo;status&rdquo;)的参数类似。注意有一点区别，这里的status和orderNo不能捕捉通过Http Body提交的参数，只能匹配QueryString中的参数。</p>

<p>Controller中调用service方法来完成查询，然后将结果返回。方法的返回值声明是play.mvc.Result接口，你可以理解Result的实现类只需要包含两个值：
ResponseHeader和ResponseBody。对于ResponseHeader的设置，这里调用父类的ok方法设置返回的Http状态码为200，对应的还有created 201, notFound 404等方法。
ok方法参数需要传入的就是ResponseBody，参数类型声明为play.twirl.api.Content特质（Scala中的特质类似于Java的接口），你基本上永远不需要去手动构造这个特质的实现，
而是使用Play提供的模板。这里我在views.html.test目录下有一个list.scala.html模板，这个模板文件会被IDE自动编译成views.html.test.list类，类里面有一个render方法来完成模板的渲染，
render方法返回值就是play.twirl.api.Content的子类。所以我在这里可以直接调用list.render(testObjectList)方法来完成模板的渲染。</p>

<p>好了，现在来对照SpringMVC，如果是用SpringMVC的话，这个方法应该是这样的</p>

<pre><code class="java">@RequestMapping(value = "/test/objects", method = RequestMethod.GET)
@ResponseStatus(HttpStatus.OK)  //可省略
public String list(String status, String orderNo, Model model) {

    List&lt;TestObject&gt; testObjectList = testObjectService.findByKey(of(PageFactory.getPage(request())), ofNullable(orderNo),
            ofNullable(status).map(TestObjectStatus::valueOf), empty(), empty());

    model.addAttribute("testObjectList", testObjectList);

    return "views/html/test/list";
}
</code></pre>

<p>细心的你可能已经发现了，Play的版本与SpringMVC的对照，少了一个路由的信息，那么在Play中怎么配置路由呢，请看下节</p>

<h4>5. routes文件（路由）</h4>

<p>在Play中，所有的路由信息都是统一放在一个文件里，即conf/routes文件。上面的list方法路由在routes中对应如下：</p>

<pre><code>GET         /test/objects                     @controllers.test.TestObjectController.list(status ?= null, orderNo ?= null)
</code></pre>

<p>最左边的GET声明的是Http Method，在Play中每个路由都要明确写出对应的Http Method，中间是路由的URI，最右边是映射的Controller方法。参数<code>status ?= null</code>代表参数是可选的，
如果请求参数中没有status则默认值是null。routes文件的一大好处是在写映射Controller方法的时候IDE能帮助自动补全，并且编译器在编译的时候也能校验声明的参数个数与类型是否一致，
这能有效的帮助开发者减少错误。路由也配好了，剩下的工作就是模板的编写。</p>

<h4>6. 模板</h4>

<p>list.scala.html</p>

<pre><code class="html">@(testObjects: List[ordercenter.models.TestObject])

@import common.utils.DateUtils._

@main()() {

    &lt;div class="breadcrumbs" id="breadcrumbs"&gt;
        &lt;script type="text/javascript"&gt;
        try{ace.settings.check('breadcrumbs' , 'fixed')}catch(e){}
        &lt;/script&gt;

        &lt;ul class="breadcrumb"&gt;
            &lt;li&gt;
                &lt;i class="icon-home home-icon"&gt;&lt;/i&gt;测试对象管理
            &lt;/li&gt;
            &lt;li class="active"&gt;&lt;a href="@controllers.test.routes.TestObjectController.list()"&gt;测试对象查询&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;&lt;!-- .breadcrumb --&gt;
    &lt;/div&gt;

    &lt;div class="page-content"&gt;
        &lt;div class="page-header"&gt;
            &lt;h1&gt;
                测试对象管理
                &lt;small&gt;
                    &lt;i class="icon-double-angle-right"&gt;&lt;/i&gt;测试对象查询
                &lt;/small&gt;
            &lt;/h1&gt;
        &lt;/div&gt;
            &lt;!-- /.page-header --&gt;

        &lt;div class="row"&gt;
            &lt;div class="col-xs-12"&gt;
                    &lt;!-- PAGE CONTENT BEGINS --&gt;

                &lt;div class="row"&gt;
                    &lt;div class="col-xs-12"&gt;
                        &lt;div class="table-responsive"&gt;
                            &lt;table id="sample-table-1" class="table table-striped table-bordered table-hover"&gt;
                                &lt;thead&gt;
                                    &lt;tr&gt;
                                        &lt;th&gt;状态&lt;/th&gt;
                                        &lt;th&gt;买家&lt;/th&gt;
                                        &lt;th class="hidden-480"&gt;金额&lt;/th&gt;
                                        &lt;th&gt;下单时间&lt;/th&gt;
                                        &lt;th&gt;&lt;/th&gt;
                                    &lt;/tr&gt;
                                &lt;/thead&gt;

                                &lt;tbody&gt;
                                @for(testObject &lt;- testObjects) {
                                    &lt;tr&gt;
                                        &lt;td&gt;@testObject.getStatus.value&lt;/td&gt;
                                        &lt;td&gt;@testObject.getBuyerId&lt;/td&gt;
                                        &lt;td&gt;@testObject.getActualFee&lt;/td&gt;
                                        &lt;td&gt;@printDateTime(testObject.getCreateTime) &lt;/td&gt;
                                        &lt;td&gt;
                                            &lt;div class="visible-md visible-lg hidden-sm hidden-xs btn-group"&gt;
                                                &lt;button class="btn btn-xs btn-info" onclick="location.href='@controllers.test.routes.TestObjectController.updatePage(testObject.getId)'"&gt;
                                                    &lt;i class="icon-edit bigger-120"&gt;&lt;/i&gt;
                                                &lt;/button&gt;
                                                &lt;button class="btn btn-xs btn-success" onclick="location.href='@controllers.test.routes.TestObjectController.list()'"&gt;
                                                    &lt;i class="icon-info bigger-120"&gt;&lt;/i&gt;
                                                &lt;/button&gt;
                                            &lt;/div&gt;
                                        &lt;/td&gt;
                                    &lt;/tr&gt;
                                }

                                &lt;/tbody&gt;
                            &lt;/table&gt;
                        &lt;/div&gt;&lt;!-- /.table-responsive --&gt;
                    &lt;/div&gt;&lt;!-- /span --&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
}
</code></pre>

<p>Play的模板引擎是<a href="https://github.com/playframework/twirl">Twirl</a>，关于这个引擎的介绍可以参考<a href="http://skaka.me/blog/2015/07/27/play1/">上一篇文章</a>。</p>

<p><code>@(testObjects: List[ordercenter.models.TestObject])</code>是参数声明，写Play模板的时候，建议参数都通过这种声明的形式传入，而不是使用页面隐藏对象。
因为编译器能够自动帮我们校验类型和个数，重构起来也会更方便。下面一行<code>@import common.utils.DateUtils._</code>引入了定义好的一个工具类，
下面的<code>@printDateTime(testObject.getCreateTime)</code>用来格式化显示时间。</p>

<p><code>@main()() {...}</code>的形式是调用main模板完成渲染，main模板前两个参数可以省略，第三个参数需要传入html代码。在Scala中，方法调用既可以用小括号，比如<code>println("ok")</code>，
也可以用大括号<code>println{"ok"}</code>。而这里第三个参数使用的是大括号。<code>@for(testObject &lt;- testObjects){}</code>是循环的写法，这里循环testObjects，取出每一条记录用来显示。</p>

<p><code>onclick="location.href='@controllers.test.routes.TestObjectController.list()'"</code>绑定了onClick事件，用户在点击的时候会跳转到测试对象的编辑页面。
这里没有硬编码uri，而是使用routes反向路由的写法。之所以能这样写，是因为IDE在编译的时候会根据routes文件自动生成一个routes对象，
对象里面的方法对应的就是我们配置好的controller方法映射。这里写的<code>@controllers.test.routes.TestObjectController.list()</code>在模板渲染的时候就会被替换成<code>/test/objects</code>这个URI。</p>

<h3>4. 总结</h3>

<p>这一篇主要介绍了Play在整合Spring和JPA之后是如何进行开发的。可以看出，开发Play应用与开发SSH应用没有太大区别，只是Controller和模板的写法有所不同，
但是我们能很快享受到Play的便利：简单易用的模板，修改代码无需重启服务器，不需要配置外部服务器，etc。随着业务和技术的扩展，使用Play的项目更容易整合其他服务。
例如整合监控工具<a href="http://skaka.me/blog/2015/07/21/kamon-statsd-graphite-grafana-introduction/">StatsD+Graphite+Grafana+Kamon</a>，Docker化，服务化。</p>

<p>这篇文章我没有介绍如何启动应用，因为这需要一些开发环境的准备，以及了解SBT的基本用法。这些内容我会在下一篇博客介绍。这篇文章相关的代码已经提交到Github，<a href="TODO">项目地址</a>。
这个项目整合了Play，Spring，JPA，数据存储使用MySQL和Redis，使用Bootstrap作为页面框架，可以作为脚手架项目给有兴趣的朋友进行研究。</p>

<p>除此之外，感兴趣的朋友还可以下载<a href="http://www.typesafe.com/get-started">Typesafe Reactive Platform</a>进行学习。这这上面有很多关于Play，Akka的项目模板，
并且你可以通过浏览器查看编辑这些代码，还可以直接运行。另外要进一步学习可以读<a href="http://www.amazon.com/Play-Java-Covers-2/dp/1617290904">这本书</a>，网上有电子版的。</p>

<p>下篇我会介绍如何搭建开发环境，以及如何调试应用。掌握了之后，你会发现开发和调试过程原来还能这样直观和简单!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Java开发者的Play Framework(2.4)介绍 Part1：Play的优缺点以及适用场景]]></title>
    <link href="http://skaka.me/blog/2015/07/27/play1/"/>
    <updated>2015-07-27T16:46:32+08:00</updated>
    <id>http://skaka.me/blog/2015/07/27/play1</id>
    <content type="html"><![CDATA[<h3>1. 关于这篇系列</h3>

<p>这篇系列不是Play框架的Hello World，因为这样的文章网上已经有很多。</p>

<p>这篇系列会首先结合实际代码介绍Play的特点以及适用场景，然后会有几篇文章介绍Play与Spring，JPA（Hibernate）的集成，以及一些Play应用的最佳实践，
这期间会在Github上提供一个脚手架项目，方便感兴趣的朋友直接动手尝试。最后会简单分析Play的部分源码，帮助大家理解黑盒子的内部机制。</p>

<p>我水平有限，有错误欢迎指出。</p>

<h3>2. Play介绍</h3>

<p>Play Framework是一个开源的Web框架，背后商业公司是Typesafe。要介绍Play之前，首先理清Play的两个不同的分支。
Play 1.x 使用Java开发，最新版本是1.3.1，只支持Java项目。从11年开始就进入了维护阶段，新项目一般不考虑使用Play1。
Play 2.x 使用Scala和Java开发，同时支持Java和Scala项目。
这里主要介绍最新的Play2.4 for Java。有一点需要提前说明，虽然Play2主要由Scala开发，但是对于项目中的一般开发人员而言，
使用Play可以完全不懂Scala，具体情况后面会说明。</p>

<h3>3. 为什么要了解Play</h3>

<p>现在的Web框架或者类库可以说是浩如烟海。近十年来，在Web开发领域，JVM阵营的占有率一直不高，
<img src="/images/custom/20150728/frameworks.png">
数据来源(<a href="http://hotframeworks.com/#rankings">http://hotframeworks.com/#rankings</a>)<br/>
这是国外开源项目的数据，相对来说国内Java框架的使用率会高一些。而最近几年，Ruby和Python在国内的开发群体也在不断壮大。
Java框架在Web领域不那么受欢迎，主要原因在于开发速度远落后于其他的开发框架。对于初创公司而言，快速开发出产品投入市场试错比花半年打磨出一款功能性能齐备的
应用更加重要，而对于成熟产品，也需要快速响应频繁的需求变化，这方面动态语言又更胜一筹。所以说到Web后端框架的技术选型，除非技术团队有比较深的JVM背景，
否则会倾向于选择RoR，Django这些框架。</p>

<p>JVM阵营在Web领域逐渐落后主要有三个原因：编译的锅，技术栈的锅和语言的锅。</p>

<p>大家都知道Java源代码需要编译之后才能运行，直接结果是每次修改源代码都需要重启Web服务器才能看到效果。如果项目比较小类也少，重启时间还勉强能接受。
我以前参与的一个项目，使用的是WebLogic服务器，Spring容器里大概有上千个Bean，重启一次至少得花5分钟，还是优化后的结果。工作时间至少有20%花在重启上了。
虽然现在有JRebel之类的热加载技术，但是国内使用的相对较少。</p>

<p>Servlet规范在1997年出现，在当时可以说是很先进的技术，加上Tomcat的横空出世，直接促成了JSP的崛起。然而时过境迁，Servlet风光不再，
Web容器存在的必要性也<a href="https://jaxenter.com/java-application-servers-dead-112186.html">被越来越多的人质疑</a>。原因就在于人为的将应用与容器剥离，
虽然这种做法本意是好的，但是结果就是给开发测试部署带来一系列集成的问题，现在越来越多的项目开始使用内嵌的Jetty或Tomcat就是一个现实的例子。
Servlet还带来一个问题，就是有状态的服务器。一旦使用了Session，服务器就无法享受到水平扩展的好处了，由此不得不采用Session复制或者粘性Session(Sticky Session)的
方案来解决这个问题，无论采取哪种方案都会有性能损耗，并且推高了技术成本。Servlet说到底是Java EE家族的一员，由于Sun的领导（Oracle背锅），
从Java EE 5开始，Java EE的角色已经从技术创新者转换为跟随者，这些年基本上可以说是跟着开源社区的步子在走的，除了政府大单和跨国企业，你很难再看见它的身影了。</p>

<!-- more -->


<p>
至于语言，其实从JDK8开始，Java已经很好用了。不过从JDK5到JDK8，十年太长，尤其是在Web。</p>

<p>之前Java阵营受累于没有成熟的快速开发框架，Spring热衷于提供各种集成方案，可是配置和使用还是相当的麻烦，直到Spring Boot的出现才有改善。
不过近几年出现了一些相当优秀的框架，如<a href="http://www.dropwizard.io">Dropwizard</a>，<a href="https://playframework.com">Play</a>，<a href="http://vertx.io/">Vert.x</a>。
这篇系列要介绍的Play，通过ClassLoader在源代码修改的时候动态加载类，解决了修改代码需要重启服务器的问题，完全抛弃了Servlet技术栈，基于Netty实现了自己的
请求响应接口（Request/Result），基于Play的应用就是无状态的，另外Play处理请求的方式是无阻塞的（Non-Blocking）。Play2在设计的时候借鉴了RoR的许多优点，
学习Play能够让你了解一些现代化框架的特点，同时能够为你打开异步编程世界的大门。Promise已经被Scala，JavaScript等语言大量使用，Actor模型也已经遍地开花，
这些你都可以直接在Play中使用，或者你想保持原来的编程风格也完全没有问题。</p>

<h3>4. Play的特性</h3>

<h4>1. Play2的模板引擎</h4>

<p>Play2的模板是很强大并且容易上手的. 相对于Java领域其他模板引擎(Freemarker, Velocity, JSP, Groovy, etc), 主要有三个特点.<br/>
1) 简单易上手, 没有JSP里面繁杂的内置对象和指令, 所有功能都通过方法调用完成.<br/>
2) 主流IDE中都支持Play模板的静态类型检查, 类似JSP.<br/>
3) 支持反向路由.<br/>
举个例子, 一般系统都会有一个固定的页面布局, 比如分出页头页尾。如果用JSP或者Velocity之类的模板，
一般都是通过sitemesh+filter或者在每个页面include来完成布局。使用Play模板, 完成这个功能非常容易。
首先定义一个main页面
main.scala.html：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@(title: String = <span class="ni">&amp;ldquo;</span>默认标题<span class="ni">&amp;rdquo;</span>)(staticFile: Html = Html(<span class="ni">&amp;ldquo;&amp;rdquo;</span>))(content: Html)<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;zh-cmn-Hans&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>@title<span class="nt">&lt;/title&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/head&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;body&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>@header()  <span class="nt">&lt;--</span> <span class="err">页头</span> <span class="na">--</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>@navigator() <span class="c">&lt;!-- 导航 --&gt;</span><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>@content<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;@routes.Assets.versioned(&quot;</span><span class="na">js</span><span class="err">/</span><span class="na">jquery-1</span><span class="err">.</span><span class="na">11</span><span class="err">.</span><span class="na">2</span><span class="err">.</span><span class="na">min</span><span class="err">.</span><span class="na">js</span><span class="err">&quot;)&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>@staticFile
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>@(title: String = "默认标题")(staticFile: Html = Html(""))(content: Html)
</code></pre>

<p>这一部分是参数声明，这里声明了三个参数:title标题, 有默认值；staticFile为html代码块, 可以传js等；content为页面内容。</p>

<pre><code>@header()  &lt;-- 页头 --&gt;

@navigator() &lt;!-- 导航 --&gt;
</code></pre>

<p>这一部分是引用同目录下的另外两个页面：header.scala.html和navigator.scala.html。为什么能这样引用，因为这些页面(main,header,navigator)都会被自动
编译成一个方法（准确地说是一个Scala object，不过这里先当做方法），所以这里相当于方法调用。同样，这个main也会被编译成方法，其他页面可以调用main来完成布局，
例如
login.scala.html
<code>html
@main() {
    &lt;script type="text/javascript"&gt;
        FG.user.login();
    &lt;/script&gt;
} {
    &lt;div class="login width1200"&gt;
    &lt;!-- login --&gt;
    &lt;/div&gt;
}
</code>
这就是一个简单的登录页面。登录页面调用main页面的方法，第一个参数不传使用默认标题，第二个参数传入登录页面的js代码，第三个参数传入登录页面的html代码。
这样就完成了页面布局, 没有随处可见的include, 也没有暗箱操作的filter, 所有的一切都是方法调用, 是不是很简单清晰？</p>

<p>静态类型检查就不说了, 本来Java的一大优点(Que Dian)就是类型检查，所以在Java里用Freemarker或者Velocity这种模板的做法值得商榷。</p>

<p>反向路由的意思是, 在Play中, 所有的Controller url都配置在一个routes文件中, 例如
<code>
GET         /register                           @controllers.user.LoginController.registerPage
</code>
之后无论是在Controller里还是模板中, 都不用硬编码url。而是使用routes文件。例如在Controller中使用<code>redirect(routes.LoginController.registerPage())</code>就能实现重定向。
而在模板中使用 <code>&lt;a href="@controllers.routes.LoginController.registerPage()"&gt;</code>来指向链接。这种风格就是REST里的URI模板。</p>

<h4>2. 热部署</h4>

<p>这个上面介绍过，不用重启服务器。</p>

<h4>3. 内置dev/prod环境，内置部署脚本</h4>

<p>平常开发的时候使用run启动Play，是跑在dev模式。 Play会定时扫描源码目录进行热更新，并且类都是访问的时候再加载，提高启动速度。
使用start启动项目就运行在prod模式。Play内置dist命令，可以把所有的文件打包成一个zip，解压之后直接运行bin目录下的可执行文件即可启动项目，除了JDK之外无须任何其他外部依赖。
这大大减轻了运维成本，同时也能够很方便的进行持续集成（CI）。</p>

<h4>4. 使用Play开发的Server大部分能做到Stateless</h4>

<p>这个之前也说过，Play抛弃了Servlet/JSP里Session等概念, 内置没有提供方法将对象与服务器实例进行绑定(你要使用HashMap存的话Play也没办法)。
推荐的做法是使用外部缓存, 比如Redis, Memcached等。可能有人会觉得没有Session是Play的一个缺点（Play里的Session和Servlet Session不是一回事）,
但是只要你开发过流量大一点的应用, 你就会理解这点。</p>

<h4>5. 好用的配置库</h4>

<p>如果你之前开发过Java项目, 肯定写过**.properties或者管理过一大堆的xml。Java内置库对properties文件的处理是很弱的，你不得不自己写一些工具类去进行处理，
而且properties文件还不支持更复杂的语法。Play使用<a href="https://github.com/typesafehub/config">Typesafe Config</a>库，配置文件使用HOCON格式，默认配置文件为application.conf。
你能很容易读取里面的配置, 并且你也可以把自己的配置写在里面。所以项目中基本不需要使用properties或者xml文件了，除了第三方库需要的。</p>

<h4>6. Play插件</h4>

<p>RoR框架之所以好用，主要原因之一就是围绕RoR有相当丰富的插件可供选择，很多业务功能甚至都不需要开发就能实现。Play的插件数量当然相对于RoR还是要少一些，
不过你遇到的需求基本都有现成的插件可以使用。比如发邮件, 授权和验证, sitemap生成，第三方登录等等。自己写一个插件也很简单。</p>

<h4>7. 优秀的测试支持</h4>

<p>因为Play诞生的时候TDD已经很火热，所以Play对测试的支持非常好。
例如下面的几行代码就能对Controller进行测试。
<code>Java
Http.RequestBuilder request = new Http.RequestBuilder().method(POST).uri(routes.LoginController.requestPhoneCode(phone).url());
Result result = route(request);
assertThat(result.status(), is(OK));
</code>
Play还内置了对 Selenium WebDriver的支持，可以模拟浏览器进行测试。以下是官方的例子：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BrowserFunctionalTest</span> <span class="kd">extends</span> <span class="n">WithBrowser</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">runInBrowser</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">browser</span><span class="o">.</span><span class="na">goTo</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertNotNull</span><span class="o">(</span><span class="n">browser</span><span class="o">.</span><span class="na">$</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">).</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>8. 优秀的REST支持</h4>

<p>Play2从诞生起就能很容易的支持RESTful风格的架构（因为Play2在设计的时候REST就已经大行其道），
在Play2中实现RESTful API的示例可以参考Stackoverflow上的这个<a href="http://stackoverflow.com/questions/4379485/restful-on-play-framework">回答</a></p>

<h3>5. 使用Play过程中遇到的坑</h3>

<h4>1. 首次编译速度过慢</h4>

<p>这是Scala的锅。Scala在编译过程中要<a href="http://stackoverflow.com/questions/4527902/what-is-the-order-of-the-scala-compiler-phases">经历至少30个步骤</a>，
导致编译速度相当慢。在我的机器上（Core&trade; i5-4590 CPU @ 3.30GHz，RAM 8GB），编译100多个Scala类大约需要1到2分钟。好在sbt可以增量编译，
即首次编译之后，你再修改代码，编译器只会编译那些它认为需要编译的类，编译几个类的时候速度很快，基本刷新页面就能完成。</p>

<h4>2. IDE的Scala插件偶尔会误报错误</h4>

<p>首先得说明，最适合开发Play项目的IDE是<a href="https://www.jetbrains.com/idea">IntelliJ IDEA</a>。现在IDEA最新的Scala插件相比之前的版本，已经有很大的提升。
不过偶尔还是会出现误报的情况，这个问题随着新版本插件的发布应该会慢慢解决。</p>

<h4>3. Scala和Sbt的学习成本较高</h4>

<p>这可能是初次接触Play的用户遇到的最大障碍。其实对于大多数业务开发人员来说，这不是问题。使用Play for Java版本，项目代码99%都是Java代码，
而Sbt类似于Maven，一旦项目搭建好后不需要过多接触，只要学会几个常用的命令就可以了，例如project root(切换项目), run(启动服务器在dev模式)。
我们团队大部分成员之前都没有接触过Scala和Play，经过一两周的磨合期之后都能很顺利的使用Play进行开发了。</p>

<h4>4. Play的API变化速度比较快</h4>

<p>Play的版本号遵循<a href="http://semver.org/">Semantic Versioning</a>，不同主版本的API变化非常大，比如Play1和Play2就是两个不同的框架。
而副版本之间API也会有一些变化，而且不一定完全向后兼容。例如使用Play2.3.x的项目在升级到2.4的时候，需要按照官方提供的迁移手册进行代码修改，
不然是运行不了的。这对于其他背景的开发者来说可能比较容易理解，但是如果是一直习惯于使用Spring MVC或Struts2的话，可能会对这点感到不适。</p>

<h3>6.总结</h3>

<p>Play2可以算是一个现代化的框架，吸收了RoR诸多优点，同时又解决了Java开发中的一些痛点，在国外已经被大量使用。参见
<img src="/images/custom/20150728/playframework2.png">
数据来源(<a href="http://www.infoq.com/research/jvm-web-frameworks">http://www.infoq.com/research/jvm-web-frameworks</a>)</p>

<p>Play和Spring MVC的定位有些相似，但是比Spring MVC提供更丰富的功能，和Web有关的项目都可以使用Play。但是如果要用好Play，对团队有一定的要求。</p>

<p>首先，你的团队应该不是墨守成规的团队。大部分人都害怕变化，这是不争的事实。JDK的发展缓慢加上国内的技术氛围，着实让Java开发人员过了几年的舒服日子。
你如果是05年学会了ibatis和Spring，然后这十年去环游世界了，在15年你照样能轻松找到一份待遇还算可以的工作。然而事情已经开始发生变化，不会学习可能会被淘汰。</p>

<p>其次，你的团队应该重视工作效率和质量，并且有时间做出改进。国内很多团队信奉的是人海战术。以低薪聘请大量不合格的开发人员来开发业务功能，
而不是注重单人的工作效率和质量，很多项目的加班和延期都源于此。这样的团队就不适合用Play。很难想象每天都要加班去应付工作的团队有时间打磨升级自己的工具和技能。
但是反过来低效率的工具和技能又拖累了自己的工作效率，这是一个恶性循环。</p>

<p>最后，团队中需要有人对Scala和Sbt有一定的了解。虽然Play有Java版本可以使用，但是如果不会Scala和Sbt，在搭建环境，使用一些高级功能（如Filter）的时候可能会遇到麻烦。</p>

<p>下篇我会介绍Play和Spring还有JPA（Hibernate）的集成，毕竟Spring在大部分Java项目还是主流。有问题和建议欢迎指出。</p>
]]></content>
  </entry>
  
</feed>
