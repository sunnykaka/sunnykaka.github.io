<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Finagle | skaka的博客]]></title>
  <link href="http://skaka.me/blog/categories/finagle/atom.xml" rel="self"/>
  <link href="http://skaka.me/"/>
  <updated>2016-05-01T12:53:34+08:00</updated>
  <id>http://skaka.me/</id>
  <author>
    <name><![CDATA[skaka]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[微服务框架Finagle介绍 Part2: 在Finagle中开发基于Http协议的应用]]></title>
    <link href="http://skaka.me/blog/2016/05/01/finagle2/"/>
    <updated>2016-05-01T10:17:35+08:00</updated>
    <id>http://skaka.me/blog/2016/05/01/finagle2</id>
    <content type="html"><![CDATA[在[上篇文章](http://skaka.me/blog/2016/03/19/finagle1/)中我介绍了Finagle中的Future/Service/Filter.
这篇文章里, 我们将构建一个基于Http协议的echo服务端和客户端, 下篇文章将构建一个基于thrift协议的客户端和服务端.
这两篇文章对应的源代码地址在[Github](https://github.com/sunnykaka/java-finagle-example)上.
代码中有Java和Scala版本两套版本的实现, 但是这里我们只会介绍Java版本.  

首先来看echo应用的Server端代码, 打开`java-finagle-example/src/main/java/com/akkafun/finagle/Server.java`:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="kd">extends</span> <span class="n">Service</span><span class="o">&lt;</span><span class="n">Request</span><span class="o">,</span> <span class="n">Response</span><span class="o">&gt;</span> <span class="o">{</span>                             <span class="c1">//1</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>                                 <span class="c1">//2</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;request: &quot;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getContentString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Response</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">Http11$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span> <span class="n">Status</span><span class="o">.</span><span class="na">Ok</span><span class="o">());</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">setContentString</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getContentString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Server</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Server</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ListeningServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">Http</span><span class="o">.</span><span class="na">server</span><span class="o">().</span>                                      <span class="c1">//3</span>
</span><span class='line'>                <span class="n">withLabel</span><span class="o">(</span><span class="s">&quot;echo-server&quot;</span><span class="o">).</span>
</span><span class='line'>                <span class="n">withTracer</span><span class="o">(</span><span class="n">ZipkinTracer</span><span class="o">.</span><span class="na">mk</span><span class="o">(</span><span class="s">&quot;192.168.99.100&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="mi">9410</span><span class="o">,</span> <span class="n">DefaultStatsReceiver$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">)).</span>
</span><span class='line'>                <span class="n">serve</span><span class="o">(</span><span class="k">new</span> <span class="nf">InetSocketAddress</span><span class="o">(</span><span class="mi">8081</span><span class="o">),</span> <span class="n">service</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">result</span><span class="o">(</span><span class="n">server</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
<!--more-->
1. 在Finagle中, 实现一个RPC服务非常简单. 只需要继承Service抽象类, 实现它的apply方法.
Service抽象类有两个类型参数, 第一个类型参数代表的是请求对象, 第二个类型参数代表的是返回对象.
这两个对象的具体类型与Service实现类使用的具体协议有关.
例如我们在echo服务中使用Http协议, 对应的Request类就是`com.twitter.finagle.http.Request`,
对应的Response类是`com.twitter.finagle.http.Response`.
如果是thrift协议, 则这两个类型参数在Service实现类中都是`scala.Array<scala.Byte>`(Array和Byte都是scala中的类, 对应Java中的数组与byte).  

2. apply方法中, 我们首先使用Response的工厂方法构造一个Response对象. 然后将Request中的请求内容原封不动的设置到Response中,
再将Response设置到Future中返回. 需要最后一步的原因是apply方法的返回值类型是`Future<Response>`, 但是我们在这个方法中不需要进行异步操作,
所以可以直接使用`Future.value(response)`将对象包装成Future返回.
另外, 细心的你应该发现了一行比较碍眼的代码: `Response.apply(Version.Http11$.MODULE$, Status.Ok())`, 其中Version的用法很古怪.
这是Java调用Scala伴生对象的副作用, Scala有一些语法和特性在Java中没有对应的概念, 这种情况下Java调用Scala的代码就会比较晦涩.  

3. 为了启动Service实例, 我们需要构造一个`com.twitter.finagle.ListeningServer`. `withLabel`设置服务名称,
`withTracer`设置监控信息, 这个等后面介绍zipkin的时候在解释. 最后指定端口启动服务.  

现在来看echo应用的Client端代码, 打开`java-finagle-example/src/main/java/com/akkafun/finagle/Client.java`:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">scala</span><span class="o">.</span><span class="na">compat</span><span class="o">.</span><span class="na">java8</span><span class="o">.</span><span class="na">JFunction</span><span class="o">.*;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TimeoutException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Service</span><span class="o">&lt;</span><span class="n">Request</span><span class="o">,</span> <span class="n">Response</span><span class="o">&gt;</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Http</span><span class="o">.</span><span class="na">client</span><span class="o">().</span>                             <span class="c1">//1</span>
</span><span class='line'>                <span class="n">withLabel</span><span class="o">(</span><span class="s">&quot;echo-client&quot;</span><span class="o">).</span>
</span><span class='line'>                <span class="n">withTracer</span><span class="o">(</span><span class="n">ZipkinTracer</span><span class="o">.</span><span class="na">mk</span><span class="o">(</span><span class="s">&quot;192.168.99.100&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="mi">9410</span><span class="o">,</span> <span class="n">DefaultStatsReceiver$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span> <span class="mf">1.0f</span><span class="o">)).</span>
</span><span class='line'>                <span class="n">newService</span><span class="o">(</span><span class="s">&quot;127.0.0.1:8081&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//create a &quot;Greetings!&quot; request.</span>
</span><span class='line'>        <span class="n">Reader</span> <span class="n">data</span> <span class="o">=</span> <span class="n">Reader$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">.</span><span class="na">fromStream</span><span class="o">(</span>                                       <span class="c1">//2</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">ByteArrayInputStream</span><span class="o">(</span><span class="s">&quot;Greetings!&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="n">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">)));</span>
</span><span class='line'>        <span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="n">Request</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">Http11$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Method</span><span class="o">.</span><span class="na">Post$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span> <span class="s">&quot;/&quot;</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="n">responseFuture</span> <span class="o">=</span> <span class="n">Await</span><span class="o">.</span><span class="na">ready</span><span class="o">(</span><span class="n">service</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">request</span><span class="o">));</span>          <span class="c1">//3</span>
</span><span class='line'>        <span class="n">responseFuture</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">response</span> <span class="o">-&gt;</span> <span class="o">{</span>                                     <span class="c1">//4</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;response status: %s, response string: %s&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">response</span><span class="o">.</span><span class="na">status</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">contentString</span><span class="o">()));</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">responseFuture</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;error: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">responseFuture</span><span class="o">.</span><span class="na">ensure</span><span class="o">(</span><span class="n">func</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">service</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="c1">//IDE may complain here, just ignore</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
1. 这部分代码和我们之前的Server类代码很像. 在Server类中, 我们创建了一个Service实例并监听了8081端口,
现在客户端通过newService创建了一个Service的stub.  

2. 这部分代码用来构造一个消息内容为Greetings的Http请求.  

3. `service.apply(request)`就是一次客户端到服务端的RPC调用. 这个调用的返回值是`Future<Response>`.  
而`service.apply(request)`是一个异步操作, 主线程调用这个方法并不会阻塞, 有可能主线程退出了实际调用还没有完成.
所以这里就要用到`Await.ready`了. `Await.ready`的作用是等待一个Future执行完成再返回, 是一个同步操作.
通过调用`Await.ready`我们就能将一个异步操作转化成一个同步操作.  

4. 接下来我们在Future上注册请求成功与失败的回调函数. 请求成功的回调函数中只是简单的打印出响应的消息内容.  
这里有个细节需要说明一下. Future的onSuccess方法需要传入一个Scala的函数特质: `scala.Function1[Response, BoxedUnit]`.
如果是Java6或7, 我们可以这样实现这个特质:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">responseFuture</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="k">new</span> <span class="n">AbstractFunction1</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">,</span> <span class="n">BoxedUnit</span><span class="o">&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">BoxedUnit</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;response status: %s, response string: %s&quot;</span><span class="o">,</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">status</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">contentString</span><span class="o">()));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>
在Java8中, 这种匿名类我们一般会使用Lambda代替, 理想情况下写法是这样:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">responseFuture</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">response</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;response status: %s, response string: %s&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">status</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">contentString</span><span class="o">()));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>
可惜的是这种写法编译不会通过, 因为只有符合`FunctionalInterface`定义的接口才能使用Lambda表达式(什么是`FunctionalInterface`, 请参考[Javadoc](https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html)), 而在Scala2.11中, `scala.Function1`不是一个`FunctionalInterface`(Scala2.12会兼容Java8). 为了在这里使用Lambda, 我们使用了[scala-java8-compat](https://github.com/scala/scala-java8-compat)这个库, 调用`scala.compat.java8.JFunction.func`方法将一个`FunctionalInterface`转化成`scala.Function1`.  

可以看出, 在Java中调用Finagle的API不是很方便. 所以Finagle适合以Scala为主, Java为辅的项目. 如果项目全是Java,
则值得为Finagle主要的API写一层Java的适配层, 来屏蔽Java调用Scala代码会出现的一些晦涩代码.  

现在我们启动服务端和客户端来看看运行结果.
首先启动Server类, 然后启动Client. Client运行完毕自动结束, 你应该能在Client的控制台看到如下输出:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">response</span> <span class="nl">status:</span> <span class="n">Status</span><span class="o">(</span><span class="mi">200</span><span class="o">),</span> <span class="n">response</span> <span class="nl">string:</span> <span class="n">Greetings</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>
Server控制台的输出:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="nl">request:</span> <span class="n">Greetings</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>

Http协议比较适合用于对外提供服务, 并且一般会使用REST. 在Finagle中使用REST可以使用[Finch](https://github.com/finagle/finch)库.
这个库轻量小巧, API简单, 提供了一套很方便的对Http消息进行操作的DSL.
如果是内网服务调用, 一般推荐使用结构紧凑, 传输效率高的协议. 比如protocol buffer, thrift或Avro.
Finagle对thrift有很好的支持, 下篇文章我将介绍在Finagle中如何开发thrift应用.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微服务框架Finagle介绍 Part1: Future, Service, Filter]]></title>
    <link href="http://skaka.me/blog/2016/03/19/finagle1/"/>
    <updated>2016-03-19T21:33:12+08:00</updated>
    <id>http://skaka.me/blog/2016/03/19/finagle1</id>
    <content type="html"><![CDATA[微服务架构可能是时下最热的一种架构模式了. 这篇系列里, 我想介绍一些常用的微服务框架. 通过学习这些框架,
我们将会了解实现微服务的过程中会遇到哪些问题, 以及这些微服务框架是如何帮助我们解决这些问题的.
所以这是一篇关于微服务实践的系列, 我不会讨论太多概念性的东西. 系列末尾我会给出一些微服务架构相关的链接, 感兴趣的可以参考.

微服务不同于单一架构应用, 是典型的分布式场景, 各服务之间通过IPC进行通信. 实现微服务的过程中, 我们需要解决以下问题:  
1. **服务注册和服务发现.**  
2. **根据应用选择合适的通信协议和数据协议.** 例如可以选用thrift, protocol buffer或REST.  
3. **服务负载均衡.** 一个服务一般会部署多个实例. 如果使压力均匀分布是需要考虑的问题.  
4. **服务路由与限流.**  
5. **容错处理.** 相对于单机应用, 分布式环境下错误发生的概率会大大提高, 服务宕机, 网络不可用的情况时常发生.  
6. **服务监控.** 各服务实例的性能指标, 例如请求响应时间, 请求并发数量, 以及服务实例的部署数量等.  
7. **事务一致性.** 一般来说这个问题需要我们结合业务自己处理, 框架不会给我们太多帮助.

好的微服务框架应该能帮助我们解决上面的全部或者大部分问题. 这里我选择JVM上比较热门的三个微服务框架: Finagle,
  Spring Cloud(NetflixOSS), Dubbox. 我会从实例入手, 介绍这些框架的使用方式, 特点和适用场景.

首先来看Finagle.
[Finagle](http://twitter.github.io/finagle)是Twitter在2011年开源的一款RPC框架, 在国外使用较多,
例如Pinterest, Nest, Tumblr, 感兴趣的可以Google. Finagle有着较为丰富的生态圈, 例如可以使用[Finch](https://github.com/finagle/finch)很方便的实现REST, 使用[Finagle OAuth2](https://github.com/finagle/finagle-oauth2)实现OAuth认证, 使用[zipkin](http://twitter.github.io/zipkin/)实现服务监控. Finagle使用Scala开发, 官方宣称同时支持Scala和Java语言.

学习Finagle的使用之前, 首先要了解Finagle中的三个核心概念: Future, Service, Filter.
<!--more-->
###1. Future
Finagle使用的Future是`com.twitter.util.Future`. 由于Future非常实用, 从Scala2.10开始被加入到官方库`scala.concureent.Future`. Java8中也引入了一个类似的接口`java.util.concurrent.CompletableFuture`.
Future是对异步操作的抽象, 你可以将Future理解为一个容器, 这个容器包含一个异步操作. 一个Future容器可能处于三个状态中的一种: 异步操作还没有完成, 操作已经完成了并包含了成功结果, 操作失败并包含了异常结果. Future一种很常用的用法是可以注册成功或失败的回调函数, 例如下面的Java代码:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">responseFuture</span><span class="o">.</span><span class="na">onSuccess</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">response</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;response status: %s, response string: %s&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">status</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">contentString</span><span class="o">()));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'><span class="o">}));</span>
</span><span class='line'><span class="n">responseFuture</span><span class="o">.</span><span class="na">onFailure</span><span class="o">(</span><span class="n">func</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;error: &quot;</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">BoxedUnit</span><span class="o">.</span><span class="na">UNIT</span><span class="o">;</span>
</span><span class='line'><span class="o">}));</span>
</span></code></pre></td></tr></table></div></figure>
我在`responseFuture`上注册了一个成功的回调函数和失败的回调函数, 当Future对应的操作完成时, 会简单的打印出结果或异常信息.
Future另外一个十分强大的用法是组合.例如下面的Java代码:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="n">Future</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">authenticatedUser</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">authenticate</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">)</span>
</span><span class='line'> 
</span><span class='line'><span class="n">Future</span><span class="o">&lt;</span><span class="n">Seq</span><span class="o">&lt;</span><span class="n">Tweet</span><span class="o">&gt;&gt;</span> <span class="n">lookupTweets</span> <span class="o">=</span> <span class="n">authenticatedUser</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">user</span> <span class="o">-&gt;</span> <span class="n">Tweet</span><span class="o">.</span><span class="na">findAllByUser</span><span class="o">(</span><span class="n">user</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//#1</span>
</span></code></pre></td></tr></table></div></figure>
这段代码首先根据email和password获取user对象, 然后获取user对应的所有微博. 我解释下这段代码的执行逻辑.
首先调用`User.authenticate(email, password)`方法进行用户认证, 返回的对象是Future<User>, 代表这是一个异步操作.
注意我们拿到的是Future<User>, 这个时候我们还没有真正的拿到user对象.
接下来flatMap方法就派上用场了. 在上面代码中, flatMap函数签名应该是这样的:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">//Java8中并没有这个函数, 这里只是用来解释概念.</span>
</span><span class='line'><span class="c1">//Java8中CompletableFuture的thenCompose方法类似于flatMap</span>
</span><span class='line'><span class="n">Future</span><span class="o">&lt;</span><span class="n">Seq</span><span class="o">&lt;</span><span class="n">Tweet</span><span class="o">&gt;&gt;</span> <span class="nf">flatMap</span><span class="o">(</span><span class="n">Function</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Seq</span><span class="o">&lt;</span><span class="n">Tweet</span><span class="o">&gt;&gt;)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
简单来说, flatMap的作用是将`Future<A>`转换成`Future<B>`, 在这个例子里, 是将`Future<User>`转换成`Future<Seq<Tweet>>`.
通过flatMap这种方式, 我们的代码写起来很像是同步执行的, 但是实际上Future中的操作是由一个叫做Scheduler的组件去执行的,
你可以将Scheduler理解为一个ExecutorService, 即我们的代码是由其他线程异步执行的. 上面的代码中, 当代码执行到`#1`位置的时候, 其实认证用户和获取微博这两个操作可能并没有真正被执行.

Future与flatMap的概念都来源于函数式编程. 在Haskell中, flatMap叫做绑定(bind), 而Future可以近似看作Monad(单子). 对函数式编程中的Monad感兴趣的朋友可以参考[我之前的文章](http://skaka.me/blog/2015/12/19/functor-applicative-monad-scala-haskell/).

Future还有其他一些很有用的方法, 例如从异常中恢复的rescue方法, 连接多个Future的join方法等, 这里就不展开了.
Future在Finagle中无处不在, Finagle的设计哲理之一就是能异步的尽量异步, 大部分操作都不会阻塞.
例如下面我们要说的Service和Filter, 返回的结果都是Future. 如果你之前主要使用Spring或者Servlet这种技术, 可能刚学习Finagle的时候觉得有些难以理解. 这很正常, 在后面的文章我会详细介绍如何使用Future编程, 你会发现其实这种异步编程习惯与之前相比没有太大的不同.只是ThreadLocal在这种环境下失效了, 不过好在我们有替代品 ：）

###2. Service
Service是Finagle中的核心概念. Service可以被理解为接收一个Request参数, 返回一个Future对象的函数.
如果定义为Java的抽象类, 原型如下:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">//Service在Finagle中是用Scala代码定义的, 这里只是用来解释概念.</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Service</span><span class="o">&lt;</span><span class="n">Request</span><span class="o">,</span> <span class="n">Response</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Request</span> <span class="n">r</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
如果用Spring MVC类比, Finagle的Service就类似于Controller的方法, 可以用来处理客户端的请求.
例如要在Finagle中实现一个Echo服务器, 代码如下:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="kd">extends</span> <span class="n">Service</span><span class="o">&lt;</span><span class="n">Request</span><span class="o">,</span> <span class="n">Response</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">Response</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">Response</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">Version</span><span class="o">.</span><span class="na">Http11$</span><span class="o">.</span><span class="na">MODULE$</span><span class="o">,</span> <span class="n">Status</span><span class="o">.</span><span class="na">Ok</span><span class="o">());</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">setContentString</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getContentString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Server</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Server</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ListeningServer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">Http</span><span class="o">.</span><span class="na">server</span><span class="o">().</span>
</span><span class='line'>                <span class="n">withLabel</span><span class="o">(</span><span class="s">&quot;echo-server&quot;</span><span class="o">).</span>
</span><span class='line'>                <span class="n">serve</span><span class="o">(</span><span class="k">new</span> <span class="nf">InetSocketAddress</span><span class="o">(</span><span class="mi">8081</span><span class="o">),</span> <span class="n">service</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Await</span><span class="o">.</span><span class="na">result</span><span class="o">(</span><span class="n">server</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
注意Service的返回值是Future, 代表操作可以是异步完成的.

###3. Filter
Finagle Filter类似于Servlet Filter, 可以对Service的请求和响应进行过滤. 不过Finagle Filter使用类型参数明确定义了
输入输出的参数类型, Finagle Filter如果定义为Java的抽象类, 原型如下:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="c1">//Filter在Finagle中是用Scala代码定义的, 这里只是用来解释概念.</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Filter</span><span class="o">&lt;</span><span class="n">ReqIn</span><span class="o">,</span> <span class="n">RepOut</span><span class="o">,</span> <span class="n">ReqOut</span><span class="o">,</span> <span class="n">RepIn</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>     <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">RepOut</span><span class="o">&gt;</span> <span class="nf">apply</span><span class="o">(</span><span class="n">ReqIn</span> <span class="n">request</span><span class="o">,</span> <span class="n">Service</span><span class="o">&lt;</span><span class="n">ReqOut</span><span class="o">,</span> <span class="n">RepIn</span><span class="o">&gt;</span> <span class="n">service</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
对于ReqIn, RepOut, ReqOut, RepIn这四个类型参数的定义, 可以参考下图.
<img src="/images/custom/20160404/finagle_filter.png">

ReqIn和ReqOut分别是Filter的入参和出参, 而RepIn和RepOut则是Service的入参和出参.
我们来看看Filter在代码中的实际用法:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="k">val</span> <span class="n">baseService</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Service</span><span class="o">[</span><span class="kt">HttpRequest</span>, <span class="kt">HttpResponse</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'><span class="err">  </span><span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">request</span><span class="k">:</span> <span class="kt">HttpRequest</span><span class="o">)</span> <span class="k">=</span>
</span><span class='line'><span class="err">    </span><span class="nc">Future</span><span class="o">(</span><span class="k">new</span> <span class="nc">DefaultHttpResponse</span><span class="o">(</span><span class="nc">HTTP_1_1</span><span class="o">,</span> <span class="nc">OK</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">val</span> <span class="n">authorize</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">RequireAuthorization</span><span class="o">(</span><span class="err">…</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">handleExceptions</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">HandleExceptions</span><span class="o">(...)</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="k">val</span> <span class="n">decoratedService</span><span class="k">:</span> <span class="kt">Service</span><span class="o">[</span><span class="kt">HttpRequest</span>, <span class="kt">HttpResponse</span><span class="o">]</span> <span class="k">=</span>
</span><span class='line'><span class="err">  </span><span class="n">handleExceptions</span> <span class="n">andThen</span> <span class="n">authorize</span> <span class="n">andThen</span> <span class="n">baseService</span>
</span></code></pre></td></tr></table></div></figure>
我们定义了一个Service对象baseService, 两个Filter对象authorize和handleExceptions.
通过filter的andThen方法, 我们能够很简单的将Filter和Service组装到一起,
这有点类似于在web.xml中定义了一个Servlet, 以及两个Filter来拦截针对Servlet的请求.
不过毫无疑问Finagle这种使用方式更加直观, 并且不容易出错.

现在我们已经了解了Finagle的基本概念, 下一篇我将结合实例介绍如何使用Finagle进行开发.
]]></content>
  </entry>
  
</feed>
